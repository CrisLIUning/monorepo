// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package webhookhandler is a generated GoMock package.
package webhookhandler

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebhookHandler is a mock of WebhookHandler interface.
type MockWebhookHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookHandlerMockRecorder
}

// MockWebhookHandlerMockRecorder is the mock recorder for MockWebhookHandler.
type MockWebhookHandlerMockRecorder struct {
	mock *MockWebhookHandler
}

// NewMockWebhookHandler creates a new mock instance.
func NewMockWebhookHandler(ctrl *gomock.Controller) *MockWebhookHandler {
	mock := &MockWebhookHandler{ctrl: ctrl}
	mock.recorder = &MockWebhookHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookHandler) EXPECT() *MockWebhookHandlerMockRecorder {
	return m.recorder
}

// SendEvent mocks base method.
func (m *MockWebhookHandler) SendEvent(uri string, method MethodType, dataType DataType, data []byte) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", uri, method, dataType, data)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockWebhookHandlerMockRecorder) SendEvent(uri, method, dataType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockWebhookHandler)(nil).SendEvent), uri, method, dataType, data)
}

// Test mocks base method.
func (m *MockWebhookHandler) Test() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Test")
}

// Test indicates an expected call of Test.
func (mr *MockWebhookHandlerMockRecorder) Test() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockWebhookHandler)(nil).Test))
}
