// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package activeflowhandler is a generated GoMock package.
package activeflowhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
	activeflow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/activeflow"
)

// MockActiveflowHandler is a mock of ActiveflowHandler interface.
type MockActiveflowHandler struct {
	ctrl     *gomock.Controller
	recorder *MockActiveflowHandlerMockRecorder
}

// MockActiveflowHandlerMockRecorder is the mock recorder for MockActiveflowHandler.
type MockActiveflowHandlerMockRecorder struct {
	mock *MockActiveflowHandler
}

// NewMockActiveflowHandler creates a new mock instance.
func NewMockActiveflowHandler(ctrl *gomock.Controller) *MockActiveflowHandler {
	mock := &MockActiveflowHandler{ctrl: ctrl}
	mock.recorder = &MockActiveflowHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveflowHandler) EXPECT() *MockActiveflowHandlerMockRecorder {
	return m.recorder
}

// ActiveFlowCreate mocks base method.
func (m *MockActiveflowHandler) ActiveFlowCreate(ctx context.Context, referenceType activeflow.ReferenceType, referenceID, flowID uuid.UUID) (*activeflow.ActiveFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveFlowCreate", ctx, referenceType, referenceID, flowID)
	ret0, _ := ret[0].(*activeflow.ActiveFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveFlowCreate indicates an expected call of ActiveFlowCreate.
func (mr *MockActiveflowHandlerMockRecorder) ActiveFlowCreate(ctx, referenceType, referenceID, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveFlowCreate", reflect.TypeOf((*MockActiveflowHandler)(nil).ActiveFlowCreate), ctx, referenceType, referenceID, flowID)
}

// ActiveFlowNextActionGet mocks base method.
func (m *MockActiveflowHandler) ActiveFlowNextActionGet(ctx context.Context, callID, caID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveFlowNextActionGet", ctx, callID, caID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveFlowNextActionGet indicates an expected call of ActiveFlowNextActionGet.
func (mr *MockActiveflowHandlerMockRecorder) ActiveFlowNextActionGet(ctx, callID, caID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveFlowNextActionGet", reflect.TypeOf((*MockActiveflowHandler)(nil).ActiveFlowNextActionGet), ctx, callID, caID)
}

// ActiveFlowSetForwardActionID mocks base method.
func (m *MockActiveflowHandler) ActiveFlowSetForwardActionID(ctx context.Context, callID, actionID uuid.UUID, forwardNow bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveFlowSetForwardActionID", ctx, callID, actionID, forwardNow)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActiveFlowSetForwardActionID indicates an expected call of ActiveFlowSetForwardActionID.
func (mr *MockActiveflowHandlerMockRecorder) ActiveFlowSetForwardActionID(ctx, callID, actionID, forwardNow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveFlowSetForwardActionID", reflect.TypeOf((*MockActiveflowHandler)(nil).ActiveFlowSetForwardActionID), ctx, callID, actionID, forwardNow)
}

// Execute mocks base method.
func (m *MockActiveflowHandler) Execute(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockActiveflowHandlerMockRecorder) Execute(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockActiveflowHandler)(nil).Execute), ctx, id)
}
