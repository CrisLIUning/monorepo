// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package conferencehandler is a generated GoMock package.
package conferencehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	conference "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conference"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
)

// MockConferenceHandler is a mock of ConferenceHandler interface.
type MockConferenceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConferenceHandlerMockRecorder
}

// MockConferenceHandlerMockRecorder is the mock recorder for MockConferenceHandler.
type MockConferenceHandlerMockRecorder struct {
	mock *MockConferenceHandler
}

// NewMockConferenceHandler creates a new mock instance.
func NewMockConferenceHandler(ctrl *gomock.Controller) *MockConferenceHandler {
	mock := &MockConferenceHandler{ctrl: ctrl}
	mock.recorder = &MockConferenceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConferenceHandler) EXPECT() *MockConferenceHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockConferenceHandler) Create(ctx context.Context, conferenceType conference.Type, userID uint64, name, detail string, timeout int, webhookURI string, preActions, postActions []action.Action) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, conferenceType, userID, name, detail, timeout, webhookURI, preActions, postActions)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConferenceHandlerMockRecorder) Create(ctx, conferenceType, userID, name, detail, timeout, webhookURI, preActions, postActions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConferenceHandler)(nil).Create), ctx, conferenceType, userID, name, detail, timeout, webhookURI, preActions, postActions)
}

// Get mocks base method.
func (m *MockConferenceHandler) Get(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConferenceHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConferenceHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockConferenceHandler) Gets(ctx context.Context, userID uint64, confType conference.Type, size uint64, token string) ([]*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, userID, confType, size, token)
	ret0, _ := ret[0].([]*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockConferenceHandlerMockRecorder) Gets(ctx, userID, confType, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockConferenceHandler)(nil).Gets), ctx, userID, confType, size, token)
}

// Join mocks base method.
func (m *MockConferenceHandler) Join(ctx context.Context, conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", ctx, conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockConferenceHandlerMockRecorder) Join(ctx, conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockConferenceHandler)(nil).Join), ctx, conferenceID, callID)
}

// Joined mocks base method.
func (m *MockConferenceHandler) Joined(ctx context.Context, conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Joined", ctx, conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Joined indicates an expected call of Joined.
func (mr *MockConferenceHandlerMockRecorder) Joined(ctx, conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joined", reflect.TypeOf((*MockConferenceHandler)(nil).Joined), ctx, conferenceID, callID)
}

// Leave mocks base method.
func (m *MockConferenceHandler) Leave(ctx context.Context, id, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", ctx, id, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave.
func (mr *MockConferenceHandlerMockRecorder) Leave(ctx, id, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockConferenceHandler)(nil).Leave), ctx, id, callID)
}

// Leaved mocks base method.
func (m *MockConferenceHandler) Leaved(ctx context.Context, id, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leaved", ctx, id, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leaved indicates an expected call of Leaved.
func (mr *MockConferenceHandlerMockRecorder) Leaved(ctx, id, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leaved", reflect.TypeOf((*MockConferenceHandler)(nil).Leaved), ctx, id, callID)
}

// Terminate mocks base method.
func (m *MockConferenceHandler) Terminate(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate.
func (mr *MockConferenceHandlerMockRecorder) Terminate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockConferenceHandler)(nil).Terminate), ctx, id)
}
