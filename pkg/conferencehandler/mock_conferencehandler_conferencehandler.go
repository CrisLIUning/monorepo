// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package conferencehandler is a generated GoMock package.
package conferencehandler

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	bridge "gitlab.com/voipbin/bin-manager/call-manager.git/models/bridge"
	channel "gitlab.com/voipbin/bin-manager/call-manager.git/models/channel"
	conference "gitlab.com/voipbin/bin-manager/call-manager.git/models/conference"
)

// MockConferenceHandler is a mock of ConferenceHandler interface.
type MockConferenceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConferenceHandlerMockRecorder
}

// MockConferenceHandlerMockRecorder is the mock recorder for MockConferenceHandler.
type MockConferenceHandlerMockRecorder struct {
	mock *MockConferenceHandler
}

// NewMockConferenceHandler creates a new mock instance.
func NewMockConferenceHandler(ctrl *gomock.Controller) *MockConferenceHandler {
	mock := &MockConferenceHandler{ctrl: ctrl}
	mock.recorder = &MockConferenceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConferenceHandler) EXPECT() *MockConferenceHandlerMockRecorder {
	return m.recorder
}

// ARIChannelEnteredBridge mocks base method.
func (m *MockConferenceHandler) ARIChannelEnteredBridge(cn *channel.Channel, bridge *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelEnteredBridge", cn, bridge)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelEnteredBridge indicates an expected call of ARIChannelEnteredBridge.
func (mr *MockConferenceHandlerMockRecorder) ARIChannelEnteredBridge(cn, bridge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelEnteredBridge", reflect.TypeOf((*MockConferenceHandler)(nil).ARIChannelEnteredBridge), cn, bridge)
}

// ARIChannelLeftBridge mocks base method.
func (m *MockConferenceHandler) ARIChannelLeftBridge(cn *channel.Channel, br *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelLeftBridge", cn, br)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelLeftBridge indicates an expected call of ARIChannelLeftBridge.
func (mr *MockConferenceHandlerMockRecorder) ARIChannelLeftBridge(cn, br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelLeftBridge", reflect.TypeOf((*MockConferenceHandler)(nil).ARIChannelLeftBridge), cn, br)
}

// ARIStasisStart mocks base method.
func (m *MockConferenceHandler) ARIStasisStart(cn *channel.Channel, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIStasisStart", cn, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIStasisStart indicates an expected call of ARIStasisStart.
func (mr *MockConferenceHandlerMockRecorder) ARIStasisStart(cn, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIStasisStart", reflect.TypeOf((*MockConferenceHandler)(nil).ARIStasisStart), cn, data)
}

// Join mocks base method.
func (m *MockConferenceHandler) Join(conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockConferenceHandlerMockRecorder) Join(conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockConferenceHandler)(nil).Join), conferenceID, callID)
}

// Leave mocks base method.
func (m *MockConferenceHandler) Leave(conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave.
func (mr *MockConferenceHandlerMockRecorder) Leave(conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockConferenceHandler)(nil).Leave), conferenceID, callID)
}

// Start mocks base method.
func (m *MockConferenceHandler) Start(reqConf *conference.Conference) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", reqConf)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockConferenceHandlerMockRecorder) Start(reqConf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConferenceHandler)(nil).Start), reqConf)
}

// Terminate mocks base method.
func (m *MockConferenceHandler) Terminate(conferenceID uuid.UUID, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate", conferenceID, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate.
func (mr *MockConferenceHandlerMockRecorder) Terminate(conferenceID, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockConferenceHandler)(nil).Terminate), conferenceID, reason)
}
