// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/conferencehandler (interfaces: ConferenceHandler)

// Package conferencehandler is a generated GoMock package.
package conferencehandler

import (
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	bridge "gitlab.com/voipbin/bin-manager/call-manager/pkg/bridge"
	call "gitlab.com/voipbin/bin-manager/call-manager/pkg/call"
	channel "gitlab.com/voipbin/bin-manager/call-manager/pkg/channel"
	conference "gitlab.com/voipbin/bin-manager/call-manager/pkg/conference"
	reflect "reflect"
)

// MockConferenceHandler is a mock of ConferenceHandler interface
type MockConferenceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConferenceHandlerMockRecorder
}

// MockConferenceHandlerMockRecorder is the mock recorder for MockConferenceHandler
type MockConferenceHandlerMockRecorder struct {
	mock *MockConferenceHandler
}

// NewMockConferenceHandler creates a new mock instance
func NewMockConferenceHandler(ctrl *gomock.Controller) *MockConferenceHandler {
	mock := &MockConferenceHandler{ctrl: ctrl}
	mock.recorder = &MockConferenceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConferenceHandler) EXPECT() *MockConferenceHandlerMockRecorder {
	return m.recorder
}

// ARIChannelLeftBridge mocks base method
func (m *MockConferenceHandler) ARIChannelLeftBridge(arg0 *channel.Channel, arg1 *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelLeftBridge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelLeftBridge indicates an expected call of ARIChannelLeftBridge
func (mr *MockConferenceHandlerMockRecorder) ARIChannelLeftBridge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelLeftBridge", reflect.TypeOf((*MockConferenceHandler)(nil).ARIChannelLeftBridge), arg0, arg1)
}

// ARIStasisStart mocks base method
func (m *MockConferenceHandler) ARIStasisStart(arg0 *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIStasisStart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIStasisStart indicates an expected call of ARIStasisStart
func (mr *MockConferenceHandlerMockRecorder) ARIStasisStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIStasisStart", reflect.TypeOf((*MockConferenceHandler)(nil).ARIStasisStart), arg0)
}

// Join mocks base method
func (m *MockConferenceHandler) Join(arg0, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockConferenceHandlerMockRecorder) Join(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockConferenceHandler)(nil).Join), arg0, arg1)
}

// Joined mocks base method
func (m *MockConferenceHandler) Joined(arg0, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Joined", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Joined indicates an expected call of Joined
func (mr *MockConferenceHandlerMockRecorder) Joined(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joined", reflect.TypeOf((*MockConferenceHandler)(nil).Joined), arg0, arg1)
}

// Leave mocks base method
func (m *MockConferenceHandler) Leave(arg0, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave
func (mr *MockConferenceHandlerMockRecorder) Leave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockConferenceHandler)(nil).Leave), arg0, arg1)
}

// Leaved mocks base method
func (m *MockConferenceHandler) Leaved(arg0, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leaved", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leaved indicates an expected call of Leaved
func (mr *MockConferenceHandlerMockRecorder) Leaved(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leaved", reflect.TypeOf((*MockConferenceHandler)(nil).Leaved), arg0, arg1)
}

// Start mocks base method
func (m *MockConferenceHandler) Start(arg0 conference.Type, arg1 *call.Call) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockConferenceHandlerMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConferenceHandler)(nil).Start), arg0, arg1)
}

// Stop mocks base method
func (m *MockConferenceHandler) Stop(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockConferenceHandlerMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConferenceHandler)(nil).Stop), arg0)
}

// Terminate mocks base method
func (m *MockConferenceHandler) Terminate(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate
func (mr *MockConferenceHandlerMockRecorder) Terminate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockConferenceHandler)(nil).Terminate), arg0)
}
