// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package numberhandlertelnyx is a generated GoMock package.
package numberhandlertelnyx

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	availablenumber "gitlab.com/voipbin/bin-manager/number-manager.git/models/availablenumber"
	number "gitlab.com/voipbin/bin-manager/number-manager.git/models/number"
	providernumber "gitlab.com/voipbin/bin-manager/number-manager.git/models/providernumber"
)

// MockNumberHandlerTelnyx is a mock of NumberHandlerTelnyx interface.
type MockNumberHandlerTelnyx struct {
	ctrl     *gomock.Controller
	recorder *MockNumberHandlerTelnyxMockRecorder
}

// MockNumberHandlerTelnyxMockRecorder is the mock recorder for MockNumberHandlerTelnyx.
type MockNumberHandlerTelnyxMockRecorder struct {
	mock *MockNumberHandlerTelnyx
}

// NewMockNumberHandlerTelnyx creates a new mock instance.
func NewMockNumberHandlerTelnyx(ctrl *gomock.Controller) *MockNumberHandlerTelnyx {
	mock := &MockNumberHandlerTelnyx{ctrl: ctrl}
	mock.recorder = &MockNumberHandlerTelnyxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNumberHandlerTelnyx) EXPECT() *MockNumberHandlerTelnyxMockRecorder {
	return m.recorder
}

// GetAvailableNumbers mocks base method.
func (m *MockNumberHandlerTelnyx) GetAvailableNumbers(countyCode string, limit uint) ([]*availablenumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableNumbers", countyCode, limit)
	ret0, _ := ret[0].([]*availablenumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableNumbers indicates an expected call of GetAvailableNumbers.
func (mr *MockNumberHandlerTelnyxMockRecorder) GetAvailableNumbers(countyCode, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableNumbers", reflect.TypeOf((*MockNumberHandlerTelnyx)(nil).GetAvailableNumbers), countyCode, limit)
}

// PurchaseNumber mocks base method.
func (m *MockNumberHandlerTelnyx) PurchaseNumber(num string) (*providernumber.ProviderNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseNumber", num)
	ret0, _ := ret[0].(*providernumber.ProviderNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurchaseNumber indicates an expected call of PurchaseNumber.
func (mr *MockNumberHandlerTelnyxMockRecorder) PurchaseNumber(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseNumber", reflect.TypeOf((*MockNumberHandlerTelnyx)(nil).PurchaseNumber), num)
}

// ReleaseNumber mocks base method.
func (m *MockNumberHandlerTelnyx) ReleaseNumber(ctx context.Context, num *number.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseNumber", ctx, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseNumber indicates an expected call of ReleaseNumber.
func (mr *MockNumberHandlerTelnyxMockRecorder) ReleaseNumber(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseNumber", reflect.TypeOf((*MockNumberHandlerTelnyx)(nil).ReleaseNumber), ctx, num)
}
