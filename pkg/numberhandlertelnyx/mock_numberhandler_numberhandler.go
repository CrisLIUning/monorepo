// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package numberhandlertelnyx is a generated GoMock package.
package numberhandlertelnyx

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	availablenumber "gitlab.com/voipbin/bin-manager/number-manager.git/models/availablenumber"
	number "gitlab.com/voipbin/bin-manager/number-manager.git/models/number"
)

// MockNumberHandler is a mock of NumberHandler interface.
type MockNumberHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNumberHandlerMockRecorder
}

// MockNumberHandlerMockRecorder is the mock recorder for MockNumberHandler.
type MockNumberHandlerMockRecorder struct {
	mock *MockNumberHandler
}

// NewMockNumberHandler creates a new mock instance.
func NewMockNumberHandler(ctrl *gomock.Controller) *MockNumberHandler {
	mock := &MockNumberHandler{ctrl: ctrl}
	mock.recorder = &MockNumberHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNumberHandler) EXPECT() *MockNumberHandlerMockRecorder {
	return m.recorder
}

// CreateOrderNumbers mocks base method.
func (m *MockNumberHandler) CreateOrderNumbers(userID uint64, numbs []string) ([]*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderNumbers", userID, numbs)
	ret0, _ := ret[0].([]*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderNumbers indicates an expected call of CreateOrderNumbers.
func (mr *MockNumberHandlerMockRecorder) CreateOrderNumbers(userID, numbs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderNumbers", reflect.TypeOf((*MockNumberHandler)(nil).CreateOrderNumbers), userID, numbs)
}

// GetAvailableNumbers mocks base method.
func (m *MockNumberHandler) GetAvailableNumbers(countyCode string, limit uint) ([]*availablenumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableNumbers", countyCode, limit)
	ret0, _ := ret[0].([]*availablenumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableNumbers indicates an expected call of GetAvailableNumbers.
func (mr *MockNumberHandlerMockRecorder) GetAvailableNumbers(countyCode, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableNumbers", reflect.TypeOf((*MockNumberHandler)(nil).GetAvailableNumbers), countyCode, limit)
}

// ReleaseOrderNumber mocks base method.
func (m *MockNumberHandler) ReleaseOrderNumber(ctx context.Context, numb *number.Number) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseOrderNumber", ctx, numb)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseOrderNumber indicates an expected call of ReleaseOrderNumber.
func (mr *MockNumberHandlerMockRecorder) ReleaseOrderNumber(ctx, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseOrderNumber", reflect.TypeOf((*MockNumberHandler)(nil).ReleaseOrderNumber), ctx, numb)
}
