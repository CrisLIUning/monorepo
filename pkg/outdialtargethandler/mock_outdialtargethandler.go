// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package outdialtargethandler is a generated GoMock package.
package outdialtargethandler

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	address "gitlab.com/voipbin/bin-manager/call-manager.git/models/address"
	outdialtarget "gitlab.com/voipbin/bin-manager/outdial-manager.git/models/outdialtarget"
)

// MockOutdialTargetHandler is a mock of OutdialTargetHandler interface.
type MockOutdialTargetHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOutdialTargetHandlerMockRecorder
}

// MockOutdialTargetHandlerMockRecorder is the mock recorder for MockOutdialTargetHandler.
type MockOutdialTargetHandlerMockRecorder struct {
	mock *MockOutdialTargetHandler
}

// NewMockOutdialTargetHandler creates a new mock instance.
func NewMockOutdialTargetHandler(ctrl *gomock.Controller) *MockOutdialTargetHandler {
	mock := &MockOutdialTargetHandler{ctrl: ctrl}
	mock.recorder = &MockOutdialTargetHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutdialTargetHandler) EXPECT() *MockOutdialTargetHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOutdialTargetHandler) Create(ctx context.Context, outdialID uuid.UUID, name, detail, data string, destination0, destination1, destination2, destination3, destination4 *address.Address) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOutdialTargetHandlerMockRecorder) Create(ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOutdialTargetHandler)(nil).Create), ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4)
}

// Get mocks base method.
func (m *MockOutdialTargetHandler) Get(ctx context.Context, id uuid.UUID) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOutdialTargetHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOutdialTargetHandler)(nil).Get), ctx, id)
}

// GetAvailable mocks base method.
func (m *MockOutdialTargetHandler) GetAvailable(ctx context.Context, outdialID uuid.UUID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4 int, interval time.Duration, limit uint64) ([]*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailable", ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, interval, limit)
	ret0, _ := ret[0].([]*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailable indicates an expected call of GetAvailable.
func (mr *MockOutdialTargetHandlerMockRecorder) GetAvailable(ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, interval, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailable", reflect.TypeOf((*MockOutdialTargetHandler)(nil).GetAvailable), ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, interval, limit)
}

// GetsByOutdialID mocks base method.
func (m *MockOutdialTargetHandler) GetsByOutdialID(ctx context.Context, outdialID uuid.UUID, token string, limit uint64) ([]*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByOutdialID", ctx, outdialID, token, limit)
	ret0, _ := ret[0].([]*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByOutdialID indicates an expected call of GetsByOutdialID.
func (mr *MockOutdialTargetHandlerMockRecorder) GetsByOutdialID(ctx, outdialID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByOutdialID", reflect.TypeOf((*MockOutdialTargetHandler)(nil).GetsByOutdialID), ctx, outdialID, token, limit)
}
