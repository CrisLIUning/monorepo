// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package channelhandler is a generated GoMock package.
package channelhandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ari "gitlab.com/voipbin/bin-manager/call-manager.git/models/ari"
	channel "gitlab.com/voipbin/bin-manager/call-manager.git/models/channel"
)

// MockChannelHandler is a mock of ChannelHandler interface.
type MockChannelHandler struct {
	ctrl     *gomock.Controller
	recorder *MockChannelHandlerMockRecorder
}

// MockChannelHandlerMockRecorder is the mock recorder for MockChannelHandler.
type MockChannelHandlerMockRecorder struct {
	mock *MockChannelHandler
}

// NewMockChannelHandler creates a new mock instance.
func NewMockChannelHandler(ctrl *gomock.Controller) *MockChannelHandler {
	mock := &MockChannelHandler{ctrl: ctrl}
	mock.recorder = &MockChannelHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelHandler) EXPECT() *MockChannelHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChannelHandler) Create(ctx context.Context, id, asteriskID, name string, channelType channel.Type, tech channel.Tech, sipCallID string, sipTransport channel.SIPTransport, sourceName, sourceNumber, destinationName, destinationNumber string, state ari.ChannelState, data map[string]interface{}, stasisName string, stasisData map[string]string, bridgeID, playbackID, dialResult string, hangupCause ari.ChannelCause, direction channel.Direction) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, id, asteriskID, name, channelType, tech, sipCallID, sipTransport, sourceName, sourceNumber, destinationName, destinationNumber, state, data, stasisName, stasisData, bridgeID, playbackID, dialResult, hangupCause, direction)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChannelHandlerMockRecorder) Create(ctx, id, asteriskID, name, channelType, tech, sipCallID, sipTransport, sourceName, sourceNumber, destinationName, destinationNumber, state, data, stasisName, stasisData, bridgeID, playbackID, dialResult, hangupCause, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChannelHandler)(nil).Create), ctx, id, asteriskID, name, channelType, tech, sipCallID, sipTransport, sourceName, sourceNumber, destinationName, destinationNumber, state, data, stasisName, stasisData, bridgeID, playbackID, dialResult, hangupCause, direction)
}

// Delete mocks base method.
func (m *MockChannelHandler) Delete(ctx context.Context, id string, cause ari.ChannelCause) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, cause)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockChannelHandlerMockRecorder) Delete(ctx, id, cause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChannelHandler)(nil).Delete), ctx, id, cause)
}

// Get mocks base method.
func (m *MockChannelHandler) Get(ctx context.Context, id string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChannelHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChannelHandler)(nil).Get), ctx, id)
}

// HealthCheck mocks base method.
func (m *MockChannelHandler) HealthCheck(ctx context.Context, channelID string, retryCount, retryCountMax, delay int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HealthCheck", ctx, channelID, retryCount, retryCountMax, delay)
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockChannelHandlerMockRecorder) HealthCheck(ctx, channelID, retryCount, retryCountMax, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockChannelHandler)(nil).HealthCheck), ctx, channelID, retryCount, retryCountMax, delay)
}

// SetDataItem mocks base method.
func (m *MockChannelHandler) SetDataItem(ctx context.Context, id, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDataItem", ctx, id, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDataItem indicates an expected call of SetDataItem.
func (mr *MockChannelHandlerMockRecorder) SetDataItem(ctx, id, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataItem", reflect.TypeOf((*MockChannelHandler)(nil).SetDataItem), ctx, id, key, value)
}

// SetDirection mocks base method.
func (m *MockChannelHandler) SetDirection(ctx context.Context, id string, direction channel.Direction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDirection", ctx, id, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDirection indicates an expected call of SetDirection.
func (mr *MockChannelHandlerMockRecorder) SetDirection(ctx, id, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDirection", reflect.TypeOf((*MockChannelHandler)(nil).SetDirection), ctx, id, direction)
}

// SetSIPCallID mocks base method.
func (m *MockChannelHandler) SetSIPCallID(ctx context.Context, id, sipCallID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSIPCallID", ctx, id, sipCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSIPCallID indicates an expected call of SetSIPCallID.
func (mr *MockChannelHandlerMockRecorder) SetSIPCallID(ctx, id, sipCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSIPCallID", reflect.TypeOf((*MockChannelHandler)(nil).SetSIPCallID), ctx, id, sipCallID)
}

// SetSIPTransport mocks base method.
func (m *MockChannelHandler) SetSIPTransport(ctx context.Context, id string, transport channel.SIPTransport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSIPTransport", ctx, id, transport)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSIPTransport indicates an expected call of SetSIPTransport.
func (mr *MockChannelHandlerMockRecorder) SetSIPTransport(ctx, id, transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSIPTransport", reflect.TypeOf((*MockChannelHandler)(nil).SetSIPTransport), ctx, id, transport)
}

// SetType mocks base method.
func (m *MockChannelHandler) SetType(ctx context.Context, id string, channelType channel.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetType", ctx, id, channelType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetType indicates an expected call of SetType.
func (mr *MockChannelHandlerMockRecorder) SetType(ctx, id, channelType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetType", reflect.TypeOf((*MockChannelHandler)(nil).SetType), ctx, id, channelType)
}

// UpdateBridgeID mocks base method.
func (m *MockChannelHandler) UpdateBridgeID(ctx context.Context, id, bridgeID string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBridgeID", ctx, id, bridgeID)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBridgeID indicates an expected call of UpdateBridgeID.
func (mr *MockChannelHandlerMockRecorder) UpdateBridgeID(ctx, id, bridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBridgeID", reflect.TypeOf((*MockChannelHandler)(nil).UpdateBridgeID), ctx, id, bridgeID)
}

// UpdateState mocks base method.
func (m *MockChannelHandler) UpdateState(ctx context.Context, id string, state ari.ChannelState) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", ctx, id, state)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockChannelHandlerMockRecorder) UpdateState(ctx, id, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockChannelHandler)(nil).UpdateState), ctx, id, state)
}
