// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	messagetarget "gitlab.com/voipbin/bin-manager/webhook-manager.git/models/messagetarget"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// MessageTargetGet mocks base method.
func (m *MockCacheHandler) MessageTargetGet(ctx context.Context, id uuid.UUID) (*messagetarget.MessageTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageTargetGet", ctx, id)
	ret0, _ := ret[0].(*messagetarget.MessageTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageTargetGet indicates an expected call of MessageTargetGet.
func (mr *MockCacheHandlerMockRecorder) MessageTargetGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageTargetGet", reflect.TypeOf((*MockCacheHandler)(nil).MessageTargetGet), ctx, id)
}

// MessageTargetSet mocks base method.
func (m *MockCacheHandler) MessageTargetSet(ctx context.Context, u *messagetarget.MessageTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageTargetSet", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageTargetSet indicates an expected call of MessageTargetSet.
func (mr *MockCacheHandlerMockRecorder) MessageTargetSet(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageTargetSet", reflect.TypeOf((*MockCacheHandler)(nil).MessageTargetSet), ctx, u)
}
