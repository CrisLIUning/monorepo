// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/cachehandler (interfaces: CacheHandler)

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	bridge "gitlab.com/voipbin/bin-manager/call-manager/pkg/arihandler/models/bridge"
	channel "gitlab.com/voipbin/bin-manager/call-manager/pkg/arihandler/models/channel"
	call "gitlab.com/voipbin/bin-manager/call-manager/pkg/callhandler/models/call"
	conference "gitlab.com/voipbin/bin-manager/call-manager/pkg/conferencehandler/models/conference"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// AsteriskAddressInternerGet mocks base method.
func (m *MockCacheHandler) AsteriskAddressInternerGet(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsteriskAddressInternerGet", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsteriskAddressInternerGet indicates an expected call of AsteriskAddressInternerGet.
func (mr *MockCacheHandlerMockRecorder) AsteriskAddressInternerGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsteriskAddressInternerGet", reflect.TypeOf((*MockCacheHandler)(nil).AsteriskAddressInternerGet), arg0, arg1)
}

// BridgeGet mocks base method.
func (m *MockCacheHandler) BridgeGet(arg0 context.Context, arg1 string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGet", arg0, arg1)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGet indicates an expected call of BridgeGet.
func (mr *MockCacheHandlerMockRecorder) BridgeGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGet", reflect.TypeOf((*MockCacheHandler)(nil).BridgeGet), arg0, arg1)
}

// BridgeSet mocks base method.
func (m *MockCacheHandler) BridgeSet(arg0 context.Context, arg1 *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeSet indicates an expected call of BridgeSet.
func (mr *MockCacheHandlerMockRecorder) BridgeSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeSet", reflect.TypeOf((*MockCacheHandler)(nil).BridgeSet), arg0, arg1)
}

// CallGet mocks base method.
func (m *MockCacheHandler) CallGet(arg0 context.Context, arg1 uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGet", arg0, arg1)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGet indicates an expected call of CallGet.
func (mr *MockCacheHandlerMockRecorder) CallGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGet", reflect.TypeOf((*MockCacheHandler)(nil).CallGet), arg0, arg1)
}

// CallSet mocks base method.
func (m *MockCacheHandler) CallSet(arg0 context.Context, arg1 *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSet indicates an expected call of CallSet.
func (mr *MockCacheHandlerMockRecorder) CallSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSet", reflect.TypeOf((*MockCacheHandler)(nil).CallSet), arg0, arg1)
}

// ChannelGet mocks base method.
func (m *MockCacheHandler) ChannelGet(arg0 context.Context, arg1 string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGet", arg0, arg1)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGet indicates an expected call of ChannelGet.
func (mr *MockCacheHandlerMockRecorder) ChannelGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGet", reflect.TypeOf((*MockCacheHandler)(nil).ChannelGet), arg0, arg1)
}

// ChannelSet mocks base method.
func (m *MockCacheHandler) ChannelSet(arg0 context.Context, arg1 *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSet indicates an expected call of ChannelSet.
func (mr *MockCacheHandlerMockRecorder) ChannelSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSet", reflect.TypeOf((*MockCacheHandler)(nil).ChannelSet), arg0, arg1)
}

// ConferenceGet mocks base method.
func (m *MockCacheHandler) ConferenceGet(arg0 context.Context, arg1 uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGet", arg0, arg1)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGet indicates an expected call of ConferenceGet.
func (mr *MockCacheHandlerMockRecorder) ConferenceGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGet", reflect.TypeOf((*MockCacheHandler)(nil).ConferenceGet), arg0, arg1)
}

// ConferenceSet mocks base method.
func (m *MockCacheHandler) ConferenceSet(arg0 context.Context, arg1 *conference.Conference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSet indicates an expected call of ConferenceSet.
func (mr *MockCacheHandlerMockRecorder) ConferenceSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSet", reflect.TypeOf((*MockCacheHandler)(nil).ConferenceSet), arg0, arg1)
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}
