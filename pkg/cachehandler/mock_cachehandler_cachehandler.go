// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	user "gitlab.com/voipbin/bin-manager/api-manager.git/models/user"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/pkg/callhandler/models/call"
	conference "gitlab.com/voipbin/bin-manager/call-manager.git/pkg/conferencehandler/models/conference"
	bridge "gitlab.com/voipbin/bin-manager/call-manager.git/pkg/eventhandler/models/bridge"
	channel "gitlab.com/voipbin/bin-manager/call-manager.git/pkg/eventhandler/models/channel"
	flow "gitlab.com/voipbin/bin-manager/flow-manager.git/pkg/flowhandler/models/flow"
)

// MockCacheHandler is a mock of CacheHandler interface.
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler.
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance.
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// AsteriskAddressInternerGet mocks base method.
func (m *MockCacheHandler) AsteriskAddressInternerGet(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsteriskAddressInternerGet", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsteriskAddressInternerGet indicates an expected call of AsteriskAddressInternerGet.
func (mr *MockCacheHandlerMockRecorder) AsteriskAddressInternerGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsteriskAddressInternerGet", reflect.TypeOf((*MockCacheHandler)(nil).AsteriskAddressInternerGet), ctx, id)
}

// BridgeGet mocks base method.
func (m *MockCacheHandler) BridgeGet(ctx context.Context, id string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGet", ctx, id)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGet indicates an expected call of BridgeGet.
func (mr *MockCacheHandlerMockRecorder) BridgeGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGet", reflect.TypeOf((*MockCacheHandler)(nil).BridgeGet), ctx, id)
}

// BridgeSet mocks base method.
func (m *MockCacheHandler) BridgeSet(ctx context.Context, bridge *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeSet", ctx, bridge)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeSet indicates an expected call of BridgeSet.
func (mr *MockCacheHandlerMockRecorder) BridgeSet(ctx, bridge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeSet", reflect.TypeOf((*MockCacheHandler)(nil).BridgeSet), ctx, bridge)
}

// CallGet mocks base method.
func (m *MockCacheHandler) CallGet(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGet", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGet indicates an expected call of CallGet.
func (mr *MockCacheHandlerMockRecorder) CallGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGet", reflect.TypeOf((*MockCacheHandler)(nil).CallGet), ctx, id)
}

// CallSet mocks base method.
func (m *MockCacheHandler) CallSet(ctx context.Context, call *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSet", ctx, call)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSet indicates an expected call of CallSet.
func (mr *MockCacheHandlerMockRecorder) CallSet(ctx, call interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSet", reflect.TypeOf((*MockCacheHandler)(nil).CallSet), ctx, call)
}

// ChannelGet mocks base method.
func (m *MockCacheHandler) ChannelGet(ctx context.Context, id string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGet", ctx, id)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGet indicates an expected call of ChannelGet.
func (mr *MockCacheHandlerMockRecorder) ChannelGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGet", reflect.TypeOf((*MockCacheHandler)(nil).ChannelGet), ctx, id)
}

// ChannelSet mocks base method.
func (m *MockCacheHandler) ChannelSet(ctx context.Context, channel *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSet", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSet indicates an expected call of ChannelSet.
func (mr *MockCacheHandlerMockRecorder) ChannelSet(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSet", reflect.TypeOf((*MockCacheHandler)(nil).ChannelSet), ctx, channel)
}

// ConferenceGet mocks base method.
func (m *MockCacheHandler) ConferenceGet(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGet", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGet indicates an expected call of ConferenceGet.
func (mr *MockCacheHandlerMockRecorder) ConferenceGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGet", reflect.TypeOf((*MockCacheHandler)(nil).ConferenceGet), ctx, id)
}

// ConferenceSet mocks base method.
func (m *MockCacheHandler) ConferenceSet(ctx context.Context, conference *conference.Conference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSet", ctx, conference)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSet indicates an expected call of ConferenceSet.
func (mr *MockCacheHandlerMockRecorder) ConferenceSet(ctx, conference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSet", reflect.TypeOf((*MockCacheHandler)(nil).ConferenceSet), ctx, conference)
}

// FlowGet mocks base method.
func (m *MockCacheHandler) FlowGet(ctx context.Context, id uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGet", ctx, id)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGet indicates an expected call of FlowGet.
func (mr *MockCacheHandlerMockRecorder) FlowGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGet", reflect.TypeOf((*MockCacheHandler)(nil).FlowGet), ctx, id)
}

// FlowSet mocks base method.
func (m *MockCacheHandler) FlowSet(ctx context.Context, flow *flow.Flow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowSet", ctx, flow)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowSet indicates an expected call of FlowSet.
func (mr *MockCacheHandlerMockRecorder) FlowSet(ctx, flow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowSet", reflect.TypeOf((*MockCacheHandler)(nil).FlowSet), ctx, flow)
}

// UserGet mocks base method.
func (m *MockCacheHandler) UserGet(ctx context.Context, id uint64) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockCacheHandlerMockRecorder) UserGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockCacheHandler)(nil).UserGet), ctx, id)
}

// UserSet mocks base method.
func (m *MockCacheHandler) UserSet(ctx context.Context, u *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSet", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSet indicates an expected call of UserSet.
func (mr *MockCacheHandlerMockRecorder) UserSet(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSet", reflect.TypeOf((*MockCacheHandler)(nil).UserSet), ctx, u)
}
