// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/flow-manager.git/pkg/cachehandler (interfaces: CacheHandler)

// Package cachehandler is a generated GoMock package.
package cachehandler

import (
	context "context"
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	activeflow "gitlab.com/voipbin/bin-manager/flow-manager.git/pkg/flowhandler/models/activeflow"
	flow "gitlab.com/voipbin/bin-manager/flow-manager.git/pkg/flowhandler/models/flow"
	reflect "reflect"
)

// MockCacheHandler is a mock of CacheHandler interface
type MockCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCacheHandlerMockRecorder
}

// MockCacheHandlerMockRecorder is the mock recorder for MockCacheHandler
type MockCacheHandlerMockRecorder struct {
	mock *MockCacheHandler
}

// NewMockCacheHandler creates a new mock instance
func NewMockCacheHandler(ctrl *gomock.Controller) *MockCacheHandler {
	mock := &MockCacheHandler{ctrl: ctrl}
	mock.recorder = &MockCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheHandler) EXPECT() *MockCacheHandlerMockRecorder {
	return m.recorder
}

// ActiveFlowGet mocks base method
func (m *MockCacheHandler) ActiveFlowGet(arg0 context.Context, arg1 uuid.UUID) (*activeflow.ActiveFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveFlowGet", arg0, arg1)
	ret0, _ := ret[0].(*activeflow.ActiveFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveFlowGet indicates an expected call of ActiveFlowGet
func (mr *MockCacheHandlerMockRecorder) ActiveFlowGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveFlowGet", reflect.TypeOf((*MockCacheHandler)(nil).ActiveFlowGet), arg0, arg1)
}

// ActiveFlowSet mocks base method
func (m *MockCacheHandler) ActiveFlowSet(arg0 context.Context, arg1 *activeflow.ActiveFlow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveFlowSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActiveFlowSet indicates an expected call of ActiveFlowSet
func (mr *MockCacheHandlerMockRecorder) ActiveFlowSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveFlowSet", reflect.TypeOf((*MockCacheHandler)(nil).ActiveFlowSet), arg0, arg1)
}

// Connect mocks base method
func (m *MockCacheHandler) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockCacheHandlerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCacheHandler)(nil).Connect))
}

// FlowGet mocks base method
func (m *MockCacheHandler) FlowGet(arg0 context.Context, arg1 uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGet", arg0, arg1)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGet indicates an expected call of FlowGet
func (mr *MockCacheHandlerMockRecorder) FlowGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGet", reflect.TypeOf((*MockCacheHandler)(nil).FlowGet), arg0, arg1)
}

// FlowSet mocks base method
func (m *MockCacheHandler) FlowSet(arg0 context.Context, arg1 *flow.Flow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowSet indicates an expected call of FlowSet
func (mr *MockCacheHandlerMockRecorder) FlowSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowSet", reflect.TypeOf((*MockCacheHandler)(nil).FlowSet), arg0, arg1)
}
