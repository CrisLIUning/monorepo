// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package numberhandler is a generated GoMock package.
package numberhandler

import (
	context "context"
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	availablenumber "gitlab.com/voipbin/bin-manager/number-manager.git/models/availablenumber"
	number "gitlab.com/voipbin/bin-manager/number-manager.git/models/number"
	reflect "reflect"
)

// MockNumberHandler is a mock of NumberHandler interface
type MockNumberHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNumberHandlerMockRecorder
}

// MockNumberHandlerMockRecorder is the mock recorder for MockNumberHandler
type MockNumberHandlerMockRecorder struct {
	mock *MockNumberHandler
}

// NewMockNumberHandler creates a new mock instance
func NewMockNumberHandler(ctrl *gomock.Controller) *MockNumberHandler {
	mock := &MockNumberHandler{ctrl: ctrl}
	mock.recorder = &MockNumberHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNumberHandler) EXPECT() *MockNumberHandlerMockRecorder {
	return m.recorder
}

// GetAvailableNumbers mocks base method
func (m *MockNumberHandler) GetAvailableNumbers(countyCode string, limit uint) ([]*availablenumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableNumbers", countyCode, limit)
	ret0, _ := ret[0].([]*availablenumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableNumbers indicates an expected call of GetAvailableNumbers
func (mr *MockNumberHandlerMockRecorder) GetAvailableNumbers(countyCode, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableNumbers", reflect.TypeOf((*MockNumberHandler)(nil).GetAvailableNumbers), countyCode, limit)
}

// CreateNumbers mocks base method
func (m *MockNumberHandler) CreateNumbers(userID uint64, numbs []string) ([]*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNumbers", userID, numbs)
	ret0, _ := ret[0].([]*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNumbers indicates an expected call of CreateNumbers
func (mr *MockNumberHandlerMockRecorder) CreateNumbers(userID, numbs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNumbers", reflect.TypeOf((*MockNumberHandler)(nil).CreateNumbers), userID, numbs)
}

// CreateNumber mocks base method
func (m *MockNumberHandler) CreateNumber(userID uint64, numb string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNumber", userID, numb)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNumber indicates an expected call of CreateNumber
func (mr *MockNumberHandlerMockRecorder) CreateNumber(userID, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNumber", reflect.TypeOf((*MockNumberHandler)(nil).CreateNumber), userID, numb)
}

// GetNumber mocks base method
func (m *MockNumberHandler) GetNumber(ctx context.Context, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumber", ctx, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumber indicates an expected call of GetNumber
func (mr *MockNumberHandlerMockRecorder) GetNumber(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumber", reflect.TypeOf((*MockNumberHandler)(nil).GetNumber), ctx, id)
}

// GetNumberByNumber mocks base method
func (m *MockNumberHandler) GetNumberByNumber(ctx context.Context, num string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberByNumber", ctx, num)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberByNumber indicates an expected call of GetNumberByNumber
func (mr *MockNumberHandlerMockRecorder) GetNumberByNumber(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberByNumber", reflect.TypeOf((*MockNumberHandler)(nil).GetNumberByNumber), ctx, num)
}

// GetNumbers mocks base method
func (m *MockNumberHandler) GetNumbers(ctx context.Context, userID, pageSize uint64, pageToken string) ([]*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumbers", ctx, userID, pageSize, pageToken)
	ret0, _ := ret[0].([]*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumbers indicates an expected call of GetNumbers
func (mr *MockNumberHandlerMockRecorder) GetNumbers(ctx, userID, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumbers", reflect.TypeOf((*MockNumberHandler)(nil).GetNumbers), ctx, userID, pageSize, pageToken)
}

// ReleaseNumber mocks base method
func (m *MockNumberHandler) ReleaseNumber(ctx context.Context, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseNumber", ctx, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseNumber indicates an expected call of ReleaseNumber
func (mr *MockNumberHandlerMockRecorder) ReleaseNumber(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseNumber", reflect.TypeOf((*MockNumberHandler)(nil).ReleaseNumber), ctx, id)
}

// RemoveNumbersFlowID mocks base method
func (m *MockNumberHandler) RemoveNumbersFlowID(ctx context.Context, flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNumbersFlowID", ctx, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNumbersFlowID indicates an expected call of RemoveNumbersFlowID
func (mr *MockNumberHandlerMockRecorder) RemoveNumbersFlowID(ctx, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNumbersFlowID", reflect.TypeOf((*MockNumberHandler)(nil).RemoveNumbersFlowID), ctx, flowID)
}

// UpdateNumber mocks base method
func (m *MockNumberHandler) UpdateNumber(ctx context.Context, numb *number.Number) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNumber", ctx, numb)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNumber indicates an expected call of UpdateNumber
func (mr *MockNumberHandlerMockRecorder) UpdateNumber(ctx, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNumber", reflect.TypeOf((*MockNumberHandler)(nil).UpdateNumber), ctx, numb)
}
