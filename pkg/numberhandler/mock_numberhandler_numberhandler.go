// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package numberhandler is a generated GoMock package.
package numberhandler

import (
	context "context"
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/voipbin/bin-manager/number-manager.git/models"
	reflect "reflect"
)

// MockNumberHandler is a mock of NumberHandler interface
type MockNumberHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNumberHandlerMockRecorder
}

// MockNumberHandlerMockRecorder is the mock recorder for MockNumberHandler
type MockNumberHandlerMockRecorder struct {
	mock *MockNumberHandler
}

// NewMockNumberHandler creates a new mock instance
func NewMockNumberHandler(ctrl *gomock.Controller) *MockNumberHandler {
	mock := &MockNumberHandler{ctrl: ctrl}
	mock.recorder = &MockNumberHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNumberHandler) EXPECT() *MockNumberHandlerMockRecorder {
	return m.recorder
}

// CreateOrderNumbers mocks base method
func (m *MockNumberHandler) CreateOrderNumbers(userID uint64, numbers []string) ([]*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderNumbers", userID, numbers)
	ret0, _ := ret[0].([]*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderNumbers indicates an expected call of CreateOrderNumbers
func (mr *MockNumberHandlerMockRecorder) CreateOrderNumbers(userID, numbers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderNumbers", reflect.TypeOf((*MockNumberHandler)(nil).CreateOrderNumbers), userID, numbers)
}

// GetAvailableNumbers mocks base method
func (m *MockNumberHandler) GetAvailableNumbers(countyCode string, limit uint) ([]*models.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableNumbers", countyCode, limit)
	ret0, _ := ret[0].([]*models.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableNumbers indicates an expected call of GetAvailableNumbers
func (mr *MockNumberHandlerMockRecorder) GetAvailableNumbers(countyCode, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableNumbers", reflect.TypeOf((*MockNumberHandler)(nil).GetAvailableNumbers), countyCode, limit)
}

// GetOrderNumber mocks base method
func (m *MockNumberHandler) GetOrderNumber(ctx context.Context, id uuid.UUID) (*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderNumber", ctx, id)
	ret0, _ := ret[0].(*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderNumber indicates an expected call of GetOrderNumber
func (mr *MockNumberHandlerMockRecorder) GetOrderNumber(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderNumber", reflect.TypeOf((*MockNumberHandler)(nil).GetOrderNumber), ctx, id)
}

// GetOrderNumbers mocks base method
func (m *MockNumberHandler) GetOrderNumbers(ctx context.Context, userID, pageSize uint64, pageToken string) ([]*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderNumbers", ctx, userID, pageSize, pageToken)
	ret0, _ := ret[0].([]*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderNumbers indicates an expected call of GetOrderNumbers
func (mr *MockNumberHandlerMockRecorder) GetOrderNumbers(ctx, userID, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderNumbers", reflect.TypeOf((*MockNumberHandler)(nil).GetOrderNumbers), ctx, userID, pageSize, pageToken)
}

// ReleaseOrderNumbers mocks base method
func (m *MockNumberHandler) ReleaseOrderNumbers(ctx context.Context, id uuid.UUID) (*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseOrderNumbers", ctx, id)
	ret0, _ := ret[0].(*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseOrderNumbers indicates an expected call of ReleaseOrderNumbers
func (mr *MockNumberHandlerMockRecorder) ReleaseOrderNumbers(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseOrderNumbers", reflect.TypeOf((*MockNumberHandler)(nil).ReleaseOrderNumbers), ctx, id)
}
