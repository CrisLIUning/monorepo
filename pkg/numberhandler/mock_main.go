// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package numberhandler is a generated GoMock package.
package numberhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	availablenumber "gitlab.com/voipbin/bin-manager/number-manager.git/models/availablenumber"
	number "gitlab.com/voipbin/bin-manager/number-manager.git/models/number"
)

// MockNumberHandler is a mock of NumberHandler interface.
type MockNumberHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNumberHandlerMockRecorder
}

// MockNumberHandlerMockRecorder is the mock recorder for MockNumberHandler.
type MockNumberHandlerMockRecorder struct {
	mock *MockNumberHandler
}

// NewMockNumberHandler creates a new mock instance.
func NewMockNumberHandler(ctrl *gomock.Controller) *MockNumberHandler {
	mock := &MockNumberHandler{ctrl: ctrl}
	mock.recorder = &MockNumberHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNumberHandler) EXPECT() *MockNumberHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNumberHandler) Create(ctx context.Context, customerID uuid.UUID, num string, callFlowID, messageFlowID uuid.UUID, name, detail string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, num, callFlowID, messageFlowID, name, detail)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNumberHandlerMockRecorder) Create(ctx, customerID, num, callFlowID, messageFlowID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNumberHandler)(nil).Create), ctx, customerID, num, callFlowID, messageFlowID, name, detail)
}

// Delete mocks base method.
func (m *MockNumberHandler) Delete(ctx context.Context, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockNumberHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNumberHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockNumberHandler) Get(ctx context.Context, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNumberHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNumberHandler)(nil).Get), ctx, id)
}

// GetAvailableNumbers mocks base method.
func (m *MockNumberHandler) GetAvailableNumbers(countyCode string, limit uint) ([]*availablenumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableNumbers", countyCode, limit)
	ret0, _ := ret[0].([]*availablenumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableNumbers indicates an expected call of GetAvailableNumbers.
func (mr *MockNumberHandlerMockRecorder) GetAvailableNumbers(countyCode, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableNumbers", reflect.TypeOf((*MockNumberHandler)(nil).GetAvailableNumbers), countyCode, limit)
}

// GetByNumber mocks base method.
func (m *MockNumberHandler) GetByNumber(ctx context.Context, num string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNumber", ctx, num)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNumber indicates an expected call of GetByNumber.
func (mr *MockNumberHandlerMockRecorder) GetByNumber(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNumber", reflect.TypeOf((*MockNumberHandler)(nil).GetByNumber), ctx, num)
}

// GetsByCustomerID mocks base method.
func (m *MockNumberHandler) GetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageSize uint64, pageToken string) ([]*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, customerID, pageSize, pageToken)
	ret0, _ := ret[0].([]*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockNumberHandlerMockRecorder) GetsByCustomerID(ctx, customerID, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockNumberHandler)(nil).GetsByCustomerID), ctx, customerID, pageSize, pageToken)
}

// RemoveNumbersFlowID mocks base method.
func (m *MockNumberHandler) RemoveNumbersFlowID(ctx context.Context, flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNumbersFlowID", ctx, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNumbersFlowID indicates an expected call of RemoveNumbersFlowID.
func (mr *MockNumberHandlerMockRecorder) RemoveNumbersFlowID(ctx, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNumbersFlowID", reflect.TypeOf((*MockNumberHandler)(nil).RemoveNumbersFlowID), ctx, flowID)
}

// RenewNumbers mocks base method.
func (m *MockNumberHandler) RenewNumbers(ctx context.Context, days, hours int, tmRenew string) ([]*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewNumbers", ctx, days, hours, tmRenew)
	ret0, _ := ret[0].([]*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewNumbers indicates an expected call of RenewNumbers.
func (mr *MockNumberHandlerMockRecorder) RenewNumbers(ctx, days, hours, tmRenew interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewNumbers", reflect.TypeOf((*MockNumberHandler)(nil).RenewNumbers), ctx, days, hours, tmRenew)
}

// UpdateFlowID mocks base method.
func (m *MockNumberHandler) UpdateFlowID(ctx context.Context, id, callFlowID, messageFlowID uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowID", ctx, id, callFlowID, messageFlowID)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowID indicates an expected call of UpdateFlowID.
func (mr *MockNumberHandlerMockRecorder) UpdateFlowID(ctx, id, callFlowID, messageFlowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowID", reflect.TypeOf((*MockNumberHandler)(nil).UpdateFlowID), ctx, id, callFlowID, messageFlowID)
}

// UpdateInfo mocks base method.
func (m *MockNumberHandler) UpdateInfo(ctx context.Context, id, callFlowID, messageFlowID uuid.UUID, name, detail string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfo", ctx, id, callFlowID, messageFlowID, name, detail)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInfo indicates an expected call of UpdateInfo.
func (mr *MockNumberHandlerMockRecorder) UpdateInfo(ctx, id, callFlowID, messageFlowID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfo", reflect.TypeOf((*MockNumberHandler)(nil).UpdateInfo), ctx, id, callFlowID, messageFlowID, name, detail)
}
