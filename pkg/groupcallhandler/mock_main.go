// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package groupcallhandler is a generated GoMock package.
package groupcallhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	groupcall "gitlab.com/voipbin/bin-manager/call-manager.git/models/groupcall"
	address "gitlab.com/voipbin/bin-manager/common-handler.git/models/address"
)

// MockGroupcallHandler is a mock of GroupcallHandler interface.
type MockGroupcallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGroupcallHandlerMockRecorder
}

// MockGroupcallHandlerMockRecorder is the mock recorder for MockGroupcallHandler.
type MockGroupcallHandlerMockRecorder struct {
	mock *MockGroupcallHandler
}

// NewMockGroupcallHandler creates a new mock instance.
func NewMockGroupcallHandler(ctrl *gomock.Controller) *MockGroupcallHandler {
	mock := &MockGroupcallHandler{ctrl: ctrl}
	mock.recorder = &MockGroupcallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupcallHandler) EXPECT() *MockGroupcallHandlerMockRecorder {
	return m.recorder
}

// Answer mocks base method.
func (m *MockGroupcallHandler) Answer(ctx context.Context, groupcallID, answerCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Answer", ctx, groupcallID, answerCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Answer indicates an expected call of Answer.
func (mr *MockGroupcallHandlerMockRecorder) Answer(ctx, groupcallID, answerCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Answer", reflect.TypeOf((*MockGroupcallHandler)(nil).Answer), ctx, groupcallID, answerCallID)
}

// Start mocks base method.
func (m *MockGroupcallHandler) Start(ctx context.Context, customerID uuid.UUID, source *address.Address, destinations []address.Address, flowID, masterCallID uuid.UUID, ringMethod groupcall.RingMethod, answerMethod groupcall.AnswerMethod) (*groupcall.Groupcall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, customerID, source, destinations, flowID, masterCallID, ringMethod, answerMethod)
	ret0, _ := ret[0].(*groupcall.Groupcall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockGroupcallHandlerMockRecorder) Start(ctx, customerID, source, destinations, flowID, masterCallID, ringMethod, answerMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGroupcallHandler)(nil).Start), ctx, customerID, source, destinations, flowID, masterCallID, ringMethod, answerMethod)
}
