// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package buckethandler is a generated GoMock package.
package buckethandler

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockBucketHandler is a mock of BucketHandler interface
type MockBucketHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBucketHandlerMockRecorder
}

// MockBucketHandlerMockRecorder is the mock recorder for MockBucketHandler
type MockBucketHandlerMockRecorder struct {
	mock *MockBucketHandler
}

// NewMockBucketHandler creates a new mock instance
func NewMockBucketHandler(ctrl *gomock.Controller) *MockBucketHandler {
	mock := &MockBucketHandler{ctrl: ctrl}
	mock.recorder = &MockBucketHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBucketHandler) EXPECT() *MockBucketHandlerMockRecorder {
	return m.recorder
}

// RecordingGetDownloadURL mocks base method
func (m *MockBucketHandler) RecordingGetDownloadURL(recordingID string, expire time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGetDownloadURL", recordingID, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGetDownloadURL indicates an expected call of RecordingGetDownloadURL
func (mr *MockBucketHandlerMockRecorder) RecordingGetDownloadURL(recordingID, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGetDownloadURL", reflect.TypeOf((*MockBucketHandler)(nil).RecordingGetDownloadURL), recordingID, expire)
}
