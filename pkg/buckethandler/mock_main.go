// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package buckethandler is a generated GoMock package.
package buckethandler

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBucketHandler is a mock of BucketHandler interface.
type MockBucketHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBucketHandlerMockRecorder
}

// MockBucketHandlerMockRecorder is the mock recorder for MockBucketHandler.
type MockBucketHandlerMockRecorder struct {
	mock *MockBucketHandler
}

// NewMockBucketHandler creates a new mock instance.
func NewMockBucketHandler(ctrl *gomock.Controller) *MockBucketHandler {
	mock := &MockBucketHandler{ctrl: ctrl}
	mock.recorder = &MockBucketHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketHandler) EXPECT() *MockBucketHandlerMockRecorder {
	return m.recorder
}

// GetDownloadURI mocks base method.
func (m *MockBucketHandler) GetDownloadURI(ctx context.Context, filepaths []string, expire time.Duration) (*string, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadURI", ctx, filepaths, expire)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDownloadURI indicates an expected call of GetDownloadURI.
func (mr *MockBucketHandlerMockRecorder) GetDownloadURI(ctx, filepaths, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadURI", reflect.TypeOf((*MockBucketHandler)(nil).GetDownloadURI), ctx, filepaths, expire)
}
