// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/db_handler (interfaces: DBHandler)

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
	call "gitlab.com/voipbin/bin-manager/call-manager/pkg/call"
	channel "gitlab.com/voipbin/bin-manager/call-manager/pkg/channel"
	reflect "reflect"
)

// MockDBHandler is a mock of DBHandler interface
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// CallCreate mocks base method
func (m *MockDBHandler) CallCreate(arg0 context.Context, arg1 *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallCreate indicates an expected call of CallCreate
func (mr *MockDBHandlerMockRecorder) CallCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCreate", reflect.TypeOf((*MockDBHandler)(nil).CallCreate), arg0, arg1)
}

// CallGet mocks base method
func (m *MockDBHandler) CallGet(arg0 context.Context, arg1 uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGet", arg0, arg1)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGet indicates an expected call of CallGet
func (mr *MockDBHandlerMockRecorder) CallGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGet", reflect.TypeOf((*MockDBHandler)(nil).CallGet), arg0, arg1)
}

// CallSetStatus mocks base method
func (m *MockDBHandler) CallSetStatus(arg0 context.Context, arg1 uuid.UUID, arg2 call.Status, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetStatus indicates an expected call of CallSetStatus
func (mr *MockDBHandlerMockRecorder) CallSetStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetStatus", reflect.TypeOf((*MockDBHandler)(nil).CallSetStatus), arg0, arg1, arg2, arg3)
}

// ChannelCreate mocks base method
func (m *MockDBHandler) ChannelCreate(arg0 context.Context, arg1 channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelCreate indicates an expected call of ChannelCreate
func (mr *MockDBHandlerMockRecorder) ChannelCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelCreate", reflect.TypeOf((*MockDBHandler)(nil).ChannelCreate), arg0, arg1)
}

// ChannelEnd mocks base method
func (m *MockDBHandler) ChannelEnd(arg0 context.Context, arg1, arg2, arg3 string, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelEnd", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelEnd indicates an expected call of ChannelEnd
func (mr *MockDBHandlerMockRecorder) ChannelEnd(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelEnd", reflect.TypeOf((*MockDBHandler)(nil).ChannelEnd), arg0, arg1, arg2, arg3, arg4)
}

// ChannelGet mocks base method
func (m *MockDBHandler) ChannelGet(arg0 context.Context, arg1, arg2 string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGet indicates an expected call of ChannelGet
func (mr *MockDBHandlerMockRecorder) ChannelGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGet", reflect.TypeOf((*MockDBHandler)(nil).ChannelGet), arg0, arg1, arg2)
}
