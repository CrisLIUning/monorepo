// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/arihandler (interfaces: RequestHandler)

// Package arihandler is a generated GoMock package.
package arihandler

import (
	gomock "github.com/golang/mock/gomock"
	rabbitmq "gitlab.com/voipbin/bin-manager/call-manager/pkg/rabbitmq"
	reflect "reflect"
)

// MockRequestHandler is a mock of RequestHandler interface
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// ChannelAnswer mocks base method
func (m *MockRequestHandler) ChannelAnswer(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelAnswer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelAnswer indicates an expected call of ChannelAnswer
func (mr *MockRequestHandlerMockRecorder) ChannelAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelAnswer", reflect.TypeOf((*MockRequestHandler)(nil).ChannelAnswer), arg0, arg1)
}

// ChannelContinue mocks base method
func (m *MockRequestHandler) ChannelContinue(arg0, arg1, arg2, arg3 string, arg4 int, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelContinue", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelContinue indicates an expected call of ChannelContinue
func (mr *MockRequestHandlerMockRecorder) ChannelContinue(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelContinue", reflect.TypeOf((*MockRequestHandler)(nil).ChannelContinue), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ChannelVariableSet mocks base method
func (m *MockRequestHandler) ChannelVariableSet(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelVariableSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelVariableSet indicates an expected call of ChannelVariableSet
func (mr *MockRequestHandlerMockRecorder) ChannelVariableSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelVariableSet", reflect.TypeOf((*MockRequestHandler)(nil).ChannelVariableSet), arg0, arg1, arg2, arg3)
}

// SetSock mocks base method
func (m *MockRequestHandler) SetSock(arg0 rabbitmq.Rabbit) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSock", arg0)
}

// SetSock indicates an expected call of SetSock
func (mr *MockRequestHandlerMockRecorder) SetSock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSock", reflect.TypeOf((*MockRequestHandler)(nil).SetSock), arg0)
}
