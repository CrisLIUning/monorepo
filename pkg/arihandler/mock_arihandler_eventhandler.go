// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/arihandler (interfaces: EventHandler)

// Package arihandler is a generated GoMock package.
package arihandler

import (
	gomock "github.com/golang/mock/gomock"
	ari "gitlab.com/voipbin/bin-manager/call-manager/pkg/ari"
	rabbitmq "gitlab.com/voipbin/bin-manager/call-manager/pkg/rabbitmq"
	reflect "reflect"
)

// MockEventHandler is a mock of EventHandler interface
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// HandleARIEvent mocks base method
func (m *MockEventHandler) HandleARIEvent(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleARIEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleARIEvent indicates an expected call of HandleARIEvent
func (mr *MockEventHandlerMockRecorder) HandleARIEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleARIEvent", reflect.TypeOf((*MockEventHandler)(nil).HandleARIEvent), arg0, arg1)
}

// SetSock mocks base method
func (m *MockEventHandler) SetSock(arg0 rabbitmq.Rabbit) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSock", arg0)
}

// SetSock indicates an expected call of SetSock
func (mr *MockEventHandlerMockRecorder) SetSock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSock", reflect.TypeOf((*MockEventHandler)(nil).SetSock), arg0)
}

// eventHandlerStasisStart mocks base method
func (m *MockEventHandler) eventHandlerStasisStart(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "eventHandlerStasisStart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// eventHandlerStasisStart indicates an expected call of eventHandlerStasisStart
func (mr *MockEventHandlerMockRecorder) eventHandlerStasisStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "eventHandlerStasisStart", reflect.TypeOf((*MockEventHandler)(nil).eventHandlerStasisStart), arg0)
}

// handleStasisStartIncoming mocks base method
func (m *MockEventHandler) handleStasisStartIncoming(arg0 *ari.StasisStart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleStasisStartIncoming", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleStasisStartIncoming indicates an expected call of handleStasisStartIncoming
func (mr *MockEventHandlerMockRecorder) handleStasisStartIncoming(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleStasisStartIncoming", reflect.TypeOf((*MockEventHandler)(nil).handleStasisStartIncoming), arg0)
}

// processEvent mocks base method
func (m *MockEventHandler) processEvent(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "processEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// processEvent indicates an expected call of processEvent
func (mr *MockEventHandlerMockRecorder) processEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processEvent", reflect.TypeOf((*MockEventHandler)(nil).processEvent), arg0)
}
