// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/arihandler (interfaces: ARIHandler)

// Package arihandler is a generated GoMock package.
package arihandler

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockARIHandler is a mock of ARIHandler interface
type MockARIHandler struct {
	ctrl     *gomock.Controller
	recorder *MockARIHandlerMockRecorder
}

// MockARIHandlerMockRecorder is the mock recorder for MockARIHandler
type MockARIHandlerMockRecorder struct {
	mock *MockARIHandler
}

// NewMockARIHandler creates a new mock instance
func NewMockARIHandler(ctrl *gomock.Controller) *MockARIHandler {
	mock := &MockARIHandler{ctrl: ctrl}
	mock.recorder = &MockARIHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockARIHandler) EXPECT() *MockARIHandlerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockARIHandler) Run(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockARIHandlerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockARIHandler)(nil).Run), arg0, arg1)
}
