// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/arihandler (interfaces: Requester)

// Package arihandler is a generated GoMock package.
package arihandler

import (
	gomock "github.com/golang/mock/gomock"
	rabbitmq "gitlab.com/voipbin/bin-manager/call-manager/pkg/rabbitmq"
	reflect "reflect"
)

// MockRequester is a mock of Requester interface
type MockRequester struct {
	ctrl     *gomock.Controller
	recorder *MockRequesterMockRecorder
}

// MockRequesterMockRecorder is the mock recorder for MockRequester
type MockRequesterMockRecorder struct {
	mock *MockRequester
}

// NewMockRequester creates a new mock instance
func NewMockRequester(ctrl *gomock.Controller) *MockRequester {
	mock := &MockRequester{ctrl: ctrl}
	mock.recorder = &MockRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequester) EXPECT() *MockRequesterMockRecorder {
	return m.recorder
}

// sendARIRequest mocks base method
func (m *MockRequester) sendARIRequest(arg0 rabbitmq.Rabbit, arg1, arg2, arg3 string, arg4 int64, arg5, arg6 string) (Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendARIRequest", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// sendARIRequest indicates an expected call of sendARIRequest
func (mr *MockRequesterMockRecorder) sendARIRequest(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendARIRequest", reflect.TypeOf((*MockRequester)(nil).sendARIRequest), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
