// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/callhandler (interfaces: CallHandler)

// Package callhandler is a generated GoMock package.
package callhandler

import (
	gomock "github.com/golang/mock/gomock"
	channel "gitlab.com/voipbin/bin-manager/call-manager/pkg/channel"
	reflect "reflect"
)

// MockCallHandler is a mock of CallHandler interface
type MockCallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCallHandlerMockRecorder
}

// MockCallHandlerMockRecorder is the mock recorder for MockCallHandler
type MockCallHandlerMockRecorder struct {
	mock *MockCallHandler
}

// NewMockCallHandler creates a new mock instance
func NewMockCallHandler(ctrl *gomock.Controller) *MockCallHandler {
	mock := &MockCallHandler{ctrl: ctrl}
	mock.recorder = &MockCallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCallHandler) EXPECT() *MockCallHandlerMockRecorder {
	return m.recorder
}

// Hangup mocks base method
func (m *MockCallHandler) Hangup(arg0 *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hangup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hangup indicates an expected call of Hangup
func (mr *MockCallHandlerMockRecorder) Hangup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hangup", reflect.TypeOf((*MockCallHandler)(nil).Hangup), arg0)
}

// Start mocks base method
func (m *MockCallHandler) Start(arg0 *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockCallHandlerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCallHandler)(nil).Start), arg0)
}

// UpdateStatus mocks base method
func (m *MockCallHandler) UpdateStatus(arg0 *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockCallHandlerMockRecorder) UpdateStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCallHandler)(nil).UpdateStatus), arg0)
}
