// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package callhandler is a generated GoMock package.
package callhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	address "gitlab.com/voipbin/bin-manager/call-manager.git/models/address"
	ari "gitlab.com/voipbin/bin-manager/call-manager.git/models/ari"
	bridge "gitlab.com/voipbin/bin-manager/call-manager.git/models/bridge"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/models/call"
	channel "gitlab.com/voipbin/bin-manager/call-manager.git/models/channel"
	recording "gitlab.com/voipbin/bin-manager/call-manager.git/models/recording"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
)

// MockCallHandler is a mock of CallHandler interface.
type MockCallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCallHandlerMockRecorder
}

// MockCallHandlerMockRecorder is the mock recorder for MockCallHandler.
type MockCallHandlerMockRecorder struct {
	mock *MockCallHandler
}

// NewMockCallHandler creates a new mock instance.
func NewMockCallHandler(ctrl *gomock.Controller) *MockCallHandler {
	mock := &MockCallHandler{ctrl: ctrl}
	mock.recorder = &MockCallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallHandler) EXPECT() *MockCallHandlerMockRecorder {
	return m.recorder
}

// ARIChannelDestroyed mocks base method.
func (m *MockCallHandler) ARIChannelDestroyed(ctx context.Context, cn *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelDestroyed", ctx, cn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelDestroyed indicates an expected call of ARIChannelDestroyed.
func (mr *MockCallHandlerMockRecorder) ARIChannelDestroyed(ctx, cn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelDestroyed", reflect.TypeOf((*MockCallHandler)(nil).ARIChannelDestroyed), ctx, cn)
}

// ARIChannelDtmfReceived mocks base method.
func (m *MockCallHandler) ARIChannelDtmfReceived(ctx context.Context, cn *channel.Channel, digit string, duration int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelDtmfReceived", ctx, cn, digit, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelDtmfReceived indicates an expected call of ARIChannelDtmfReceived.
func (mr *MockCallHandlerMockRecorder) ARIChannelDtmfReceived(ctx, cn, digit, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelDtmfReceived", reflect.TypeOf((*MockCallHandler)(nil).ARIChannelDtmfReceived), ctx, cn, digit, duration)
}

// ARIChannelLeftBridge mocks base method.
func (m *MockCallHandler) ARIChannelLeftBridge(ctx context.Context, cn *channel.Channel, br *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelLeftBridge", ctx, cn, br)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelLeftBridge indicates an expected call of ARIChannelLeftBridge.
func (mr *MockCallHandlerMockRecorder) ARIChannelLeftBridge(ctx, cn, br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelLeftBridge", reflect.TypeOf((*MockCallHandler)(nil).ARIChannelLeftBridge), ctx, cn, br)
}

// ARIChannelStateChange mocks base method.
func (m *MockCallHandler) ARIChannelStateChange(ctx context.Context, cn *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIChannelStateChange", ctx, cn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIChannelStateChange indicates an expected call of ARIChannelStateChange.
func (mr *MockCallHandlerMockRecorder) ARIChannelStateChange(ctx, cn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIChannelStateChange", reflect.TypeOf((*MockCallHandler)(nil).ARIChannelStateChange), ctx, cn)
}

// ARIPlaybackFinished mocks base method.
func (m *MockCallHandler) ARIPlaybackFinished(ctx context.Context, cn *channel.Channel, playbackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIPlaybackFinished", ctx, cn, playbackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIPlaybackFinished indicates an expected call of ARIPlaybackFinished.
func (mr *MockCallHandlerMockRecorder) ARIPlaybackFinished(ctx, cn, playbackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIPlaybackFinished", reflect.TypeOf((*MockCallHandler)(nil).ARIPlaybackFinished), ctx, cn, playbackID)
}

// ARIStasisStart mocks base method.
func (m *MockCallHandler) ARIStasisStart(ctx context.Context, cn *channel.Channel, data map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARIStasisStart", ctx, cn, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ARIStasisStart indicates an expected call of ARIStasisStart.
func (mr *MockCallHandlerMockRecorder) ARIStasisStart(ctx, cn, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARIStasisStart", reflect.TypeOf((*MockCallHandler)(nil).ARIStasisStart), ctx, cn, data)
}

// ActionNext mocks base method.
func (m *MockCallHandler) ActionNext(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionNext", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionNext indicates an expected call of ActionNext.
func (mr *MockCallHandlerMockRecorder) ActionNext(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionNext", reflect.TypeOf((*MockCallHandler)(nil).ActionNext), ctx, c)
}

// ActionNextForce mocks base method.
func (m *MockCallHandler) ActionNextForce(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionNextForce", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionNextForce indicates an expected call of ActionNextForce.
func (mr *MockCallHandlerMockRecorder) ActionNextForce(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionNextForce", reflect.TypeOf((*MockCallHandler)(nil).ActionNextForce), ctx, c)
}

// ActionTimeout mocks base method.
func (m *MockCallHandler) ActionTimeout(ctx context.Context, callID uuid.UUID, a *action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionTimeout", ctx, callID, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionTimeout indicates an expected call of ActionTimeout.
func (mr *MockCallHandlerMockRecorder) ActionTimeout(ctx, callID, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionTimeout", reflect.TypeOf((*MockCallHandler)(nil).ActionTimeout), ctx, callID, a)
}

// CallHealthCheck mocks base method.
func (m *MockCallHandler) CallHealthCheck(ctx context.Context, id uuid.UUID, retryCount, delay int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CallHealthCheck", ctx, id, retryCount, delay)
}

// CallHealthCheck indicates an expected call of CallHealthCheck.
func (mr *MockCallHandlerMockRecorder) CallHealthCheck(ctx, id, retryCount, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallHealthCheck", reflect.TypeOf((*MockCallHandler)(nil).CallHealthCheck), ctx, id, retryCount, delay)
}

// ChainedCallIDAdd mocks base method.
func (m *MockCallHandler) ChainedCallIDAdd(ctx context.Context, id, chainedCallID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainedCallIDAdd", ctx, id, chainedCallID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainedCallIDAdd indicates an expected call of ChainedCallIDAdd.
func (mr *MockCallHandlerMockRecorder) ChainedCallIDAdd(ctx, id, chainedCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainedCallIDAdd", reflect.TypeOf((*MockCallHandler)(nil).ChainedCallIDAdd), ctx, id, chainedCallID)
}

// ChainedCallIDRemove mocks base method.
func (m *MockCallHandler) ChainedCallIDRemove(ctx context.Context, id, chainedCallID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainedCallIDRemove", ctx, id, chainedCallID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainedCallIDRemove indicates an expected call of ChainedCallIDRemove.
func (mr *MockCallHandlerMockRecorder) ChainedCallIDRemove(ctx, id, chainedCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainedCallIDRemove", reflect.TypeOf((*MockCallHandler)(nil).ChainedCallIDRemove), ctx, id, chainedCallID)
}

// ChannelHealthCheck mocks base method.
func (m *MockCallHandler) ChannelHealthCheck(ctx context.Context, asteriskID, channelID string, retryCount, retryCountMax, delay int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChannelHealthCheck", ctx, asteriskID, channelID, retryCount, retryCountMax, delay)
}

// ChannelHealthCheck indicates an expected call of ChannelHealthCheck.
func (mr *MockCallHandlerMockRecorder) ChannelHealthCheck(ctx, asteriskID, channelID, retryCount, retryCountMax, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelHealthCheck", reflect.TypeOf((*MockCallHandler)(nil).ChannelHealthCheck), ctx, asteriskID, channelID, retryCount, retryCountMax, delay)
}

// CreateCallOutgoing mocks base method.
func (m *MockCallHandler) CreateCallOutgoing(ctx context.Context, id, customerID, flowID, activeflowID, masterCallID uuid.UUID, source, destination address.Address) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCallOutgoing", ctx, id, customerID, flowID, activeflowID, masterCallID, source, destination)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCallOutgoing indicates an expected call of CreateCallOutgoing.
func (mr *MockCallHandlerMockRecorder) CreateCallOutgoing(ctx, id, customerID, flowID, activeflowID, masterCallID, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallOutgoing", reflect.TypeOf((*MockCallHandler)(nil).CreateCallOutgoing), ctx, id, customerID, flowID, activeflowID, masterCallID, source, destination)
}

// CreateCallsOutgoing mocks base method.
func (m *MockCallHandler) CreateCallsOutgoing(ctx context.Context, customerID, flowID, masterCallID uuid.UUID, source address.Address, destinations []address.Address) ([]*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCallsOutgoing", ctx, customerID, flowID, masterCallID, source, destinations)
	ret0, _ := ret[0].([]*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCallsOutgoing indicates an expected call of CreateCallsOutgoing.
func (mr *MockCallHandlerMockRecorder) CreateCallsOutgoing(ctx, customerID, flowID, masterCallID, source, destinations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallsOutgoing", reflect.TypeOf((*MockCallHandler)(nil).CreateCallsOutgoing), ctx, customerID, flowID, masterCallID, source, destinations)
}

// DigitsGet mocks base method.
func (m *MockCallHandler) DigitsGet(ctx context.Context, id uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DigitsGet", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DigitsGet indicates an expected call of DigitsGet.
func (mr *MockCallHandlerMockRecorder) DigitsGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DigitsGet", reflect.TypeOf((*MockCallHandler)(nil).DigitsGet), ctx, id)
}

// DigitsSet mocks base method.
func (m *MockCallHandler) DigitsSet(ctx context.Context, id uuid.UUID, digits string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DigitsSet", ctx, id, digits)
	ret0, _ := ret[0].(error)
	return ret0
}

// DigitsSet indicates an expected call of DigitsSet.
func (mr *MockCallHandlerMockRecorder) DigitsSet(ctx, id, digits interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DigitsSet", reflect.TypeOf((*MockCallHandler)(nil).DigitsSet), ctx, id, digits)
}

// ExternalMediaStart mocks base method.
func (m *MockCallHandler) ExternalMediaStart(ctx context.Context, callID uuid.UUID, isCallMedia bool, externalHost, encapsulation, transport, connectionType, format, direction string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaStart", ctx, callID, isCallMedia, externalHost, encapsulation, transport, connectionType, format, direction)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalMediaStart indicates an expected call of ExternalMediaStart.
func (mr *MockCallHandlerMockRecorder) ExternalMediaStart(ctx, callID, isCallMedia, externalHost, encapsulation, transport, connectionType, format, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaStart", reflect.TypeOf((*MockCallHandler)(nil).ExternalMediaStart), ctx, callID, isCallMedia, externalHost, encapsulation, transport, connectionType, format, direction)
}

// ExternalMediaStop mocks base method.
func (m *MockCallHandler) ExternalMediaStop(ctx context.Context, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaStop", ctx, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalMediaStop indicates an expected call of ExternalMediaStop.
func (mr *MockCallHandlerMockRecorder) ExternalMediaStop(ctx, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaStop", reflect.TypeOf((*MockCallHandler)(nil).ExternalMediaStop), ctx, callID)
}

// Get mocks base method.
func (m *MockCallHandler) Get(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCallHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCallHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockCallHandler) Gets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockCallHandlerMockRecorder) Gets(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockCallHandler)(nil).Gets), ctx, customerID, size, token)
}

// HangingUp mocks base method.
func (m *MockCallHandler) HangingUp(ctx context.Context, id uuid.UUID, cause ari.ChannelCause) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HangingUp", ctx, id, cause)
	ret0, _ := ret[0].(error)
	return ret0
}

// HangingUp indicates an expected call of HangingUp.
func (mr *MockCallHandlerMockRecorder) HangingUp(ctx, id, cause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HangingUp", reflect.TypeOf((*MockCallHandler)(nil).HangingUp), ctx, id, cause)
}

// Hangup mocks base method.
func (m *MockCallHandler) Hangup(ctx context.Context, cn *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hangup", ctx, cn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hangup indicates an expected call of Hangup.
func (mr *MockCallHandlerMockRecorder) Hangup(ctx, cn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hangup", reflect.TypeOf((*MockCallHandler)(nil).Hangup), ctx, cn)
}

// HangupWithReason mocks base method.
func (m *MockCallHandler) HangupWithReason(ctx context.Context, c *call.Call, reason call.HangupReason, hangupBy call.HangupBy, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HangupWithReason", ctx, c, reason, hangupBy, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// HangupWithReason indicates an expected call of HangupWithReason.
func (mr *MockCallHandlerMockRecorder) HangupWithReason(ctx, c, reason, hangupBy, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HangupWithReason", reflect.TypeOf((*MockCallHandler)(nil).HangupWithReason), ctx, c, reason, hangupBy, timestamp)
}

// RecordingGet mocks base method.
func (m *MockCallHandler) RecordingGet(ctx context.Context, recordingID uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGet", ctx, recordingID)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGet indicates an expected call of RecordingGet.
func (mr *MockCallHandlerMockRecorder) RecordingGet(ctx, recordingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGet", reflect.TypeOf((*MockCallHandler)(nil).RecordingGet), ctx, recordingID)
}

// RecordingGets mocks base method.
func (m *MockCallHandler) RecordingGets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGets indicates an expected call of RecordingGets.
func (mr *MockCallHandlerMockRecorder) RecordingGets(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGets", reflect.TypeOf((*MockCallHandler)(nil).RecordingGets), ctx, customerID, size, token)
}

// StartCallHandle mocks base method.
func (m *MockCallHandler) StartCallHandle(ctx context.Context, cn *channel.Channel, data map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCallHandle", ctx, cn, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCallHandle indicates an expected call of StartCallHandle.
func (mr *MockCallHandlerMockRecorder) StartCallHandle(ctx, cn, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCallHandle", reflect.TypeOf((*MockCallHandler)(nil).StartCallHandle), ctx, cn, data)
}
