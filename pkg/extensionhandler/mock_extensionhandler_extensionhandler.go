// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package extensionhandler is a generated GoMock package.
package extensionhandler

import (
	context "context"
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/voipbin/bin-manager/registrar-manager.git/models"
	reflect "reflect"
)

// MockExtensionHandler is a mock of ExtensionHandler interface
type MockExtensionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionHandlerMockRecorder
}

// MockExtensionHandlerMockRecorder is the mock recorder for MockExtensionHandler
type MockExtensionHandlerMockRecorder struct {
	mock *MockExtensionHandler
}

// NewMockExtensionHandler creates a new mock instance
func NewMockExtensionHandler(ctrl *gomock.Controller) *MockExtensionHandler {
	mock := &MockExtensionHandler{ctrl: ctrl}
	mock.recorder = &MockExtensionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtensionHandler) EXPECT() *MockExtensionHandlerMockRecorder {
	return m.recorder
}

// CreateExtension mocks base method
func (m *MockExtensionHandler) CreateExtension(ctx context.Context, userID uint64, domainID uuid.UUID, ext, password string) (*models.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtension", ctx, userID, domainID, ext, password)
	ret0, _ := ret[0].(*models.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtension indicates an expected call of CreateExtension
func (mr *MockExtensionHandlerMockRecorder) CreateExtension(ctx, userID, domainID, ext, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtension", reflect.TypeOf((*MockExtensionHandler)(nil).CreateExtension), ctx, userID, domainID, ext, password)
}
