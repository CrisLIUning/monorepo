// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package extensionhandler is a generated GoMock package.
package extensionhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	extension "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/extension"
)

// MockExtensionHandler is a mock of ExtensionHandler interface.
type MockExtensionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionHandlerMockRecorder
}

// MockExtensionHandlerMockRecorder is the mock recorder for MockExtensionHandler.
type MockExtensionHandlerMockRecorder struct {
	mock *MockExtensionHandler
}

// NewMockExtensionHandler creates a new mock instance.
func NewMockExtensionHandler(ctrl *gomock.Controller) *MockExtensionHandler {
	mock := &MockExtensionHandler{ctrl: ctrl}
	mock.recorder = &MockExtensionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtensionHandler) EXPECT() *MockExtensionHandlerMockRecorder {
	return m.recorder
}

// ExtensionCreate mocks base method.
func (m *MockExtensionHandler) ExtensionCreate(ctx context.Context, e *extension.Extension) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionCreate", ctx, e)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionCreate indicates an expected call of ExtensionCreate.
func (mr *MockExtensionHandlerMockRecorder) ExtensionCreate(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionCreate", reflect.TypeOf((*MockExtensionHandler)(nil).ExtensionCreate), ctx, e)
}

// ExtensionDelete mocks base method.
func (m *MockExtensionHandler) ExtensionDelete(ctx context.Context, id uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionDelete", ctx, id)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionDelete indicates an expected call of ExtensionDelete.
func (mr *MockExtensionHandlerMockRecorder) ExtensionDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionDelete", reflect.TypeOf((*MockExtensionHandler)(nil).ExtensionDelete), ctx, id)
}

// ExtensionDeleteByDomainID mocks base method.
func (m *MockExtensionHandler) ExtensionDeleteByDomainID(ctx context.Context, domainID uuid.UUID) ([]*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionDeleteByDomainID", ctx, domainID)
	ret0, _ := ret[0].([]*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionDeleteByDomainID indicates an expected call of ExtensionDeleteByDomainID.
func (mr *MockExtensionHandlerMockRecorder) ExtensionDeleteByDomainID(ctx, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionDeleteByDomainID", reflect.TypeOf((*MockExtensionHandler)(nil).ExtensionDeleteByDomainID), ctx, domainID)
}

// ExtensionGet mocks base method.
func (m *MockExtensionHandler) ExtensionGet(ctx context.Context, id uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGet", ctx, id)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGet indicates an expected call of ExtensionGet.
func (mr *MockExtensionHandlerMockRecorder) ExtensionGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGet", reflect.TypeOf((*MockExtensionHandler)(nil).ExtensionGet), ctx, id)
}

// ExtensionGetsByDomainID mocks base method.
func (m *MockExtensionHandler) ExtensionGetsByDomainID(ctx context.Context, domainID uuid.UUID, token string, limit uint64) ([]*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGetsByDomainID", ctx, domainID, token, limit)
	ret0, _ := ret[0].([]*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGetsByDomainID indicates an expected call of ExtensionGetsByDomainID.
func (mr *MockExtensionHandlerMockRecorder) ExtensionGetsByDomainID(ctx, domainID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGetsByDomainID", reflect.TypeOf((*MockExtensionHandler)(nil).ExtensionGetsByDomainID), ctx, domainID, token, limit)
}

// ExtensionUpdate mocks base method.
func (m *MockExtensionHandler) ExtensionUpdate(ctx context.Context, e *extension.Extension) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionUpdate", ctx, e)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionUpdate indicates an expected call of ExtensionUpdate.
func (mr *MockExtensionHandlerMockRecorder) ExtensionUpdate(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionUpdate", reflect.TypeOf((*MockExtensionHandler)(nil).ExtensionUpdate), ctx, e)
}
