// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
	activeflow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/activeflow"
	flow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/flow"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// ActiveFlowCreate mocks base method.
func (m *MockDBHandler) ActiveFlowCreate(ctx context.Context, af *activeflow.ActiveFlow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveFlowCreate", ctx, af)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActiveFlowCreate indicates an expected call of ActiveFlowCreate.
func (mr *MockDBHandlerMockRecorder) ActiveFlowCreate(ctx, af interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveFlowCreate", reflect.TypeOf((*MockDBHandler)(nil).ActiveFlowCreate), ctx, af)
}

// ActiveFlowGet mocks base method.
func (m *MockDBHandler) ActiveFlowGet(ctx context.Context, id uuid.UUID) (*activeflow.ActiveFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveFlowGet", ctx, id)
	ret0, _ := ret[0].(*activeflow.ActiveFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveFlowGet indicates an expected call of ActiveFlowGet.
func (mr *MockDBHandlerMockRecorder) ActiveFlowGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveFlowGet", reflect.TypeOf((*MockDBHandler)(nil).ActiveFlowGet), ctx, id)
}

// ActiveFlowSet mocks base method.
func (m *MockDBHandler) ActiveFlowSet(ctx context.Context, af *activeflow.ActiveFlow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveFlowSet", ctx, af)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActiveFlowSet indicates an expected call of ActiveFlowSet.
func (mr *MockDBHandlerMockRecorder) ActiveFlowSet(ctx, af interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveFlowSet", reflect.TypeOf((*MockDBHandler)(nil).ActiveFlowSet), ctx, af)
}

// FlowCreate mocks base method.
func (m *MockDBHandler) FlowCreate(ctx context.Context, f *flow.Flow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowCreate", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowCreate indicates an expected call of FlowCreate.
func (mr *MockDBHandlerMockRecorder) FlowCreate(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowCreate", reflect.TypeOf((*MockDBHandler)(nil).FlowCreate), ctx, f)
}

// FlowDelete mocks base method.
func (m *MockDBHandler) FlowDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowDelete indicates an expected call of FlowDelete.
func (mr *MockDBHandlerMockRecorder) FlowDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowDelete", reflect.TypeOf((*MockDBHandler)(nil).FlowDelete), ctx, id)
}

// FlowGet mocks base method.
func (m *MockDBHandler) FlowGet(ctx context.Context, id uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGet", ctx, id)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGet indicates an expected call of FlowGet.
func (mr *MockDBHandlerMockRecorder) FlowGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGet", reflect.TypeOf((*MockDBHandler)(nil).FlowGet), ctx, id)
}

// FlowGets mocks base method.
func (m *MockDBHandler) FlowGets(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGets", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGets indicates an expected call of FlowGets.
func (mr *MockDBHandlerMockRecorder) FlowGets(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGets", reflect.TypeOf((*MockDBHandler)(nil).FlowGets), ctx, customerID, token, limit)
}

// FlowGetsByType mocks base method.
func (m *MockDBHandler) FlowGetsByType(ctx context.Context, customerID uuid.UUID, flowType flow.Type, token string, limit uint64) ([]*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGetsByType", ctx, customerID, flowType, token, limit)
	ret0, _ := ret[0].([]*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGetsByType indicates an expected call of FlowGetsByType.
func (mr *MockDBHandlerMockRecorder) FlowGetsByType(ctx, customerID, flowType, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGetsByType", reflect.TypeOf((*MockDBHandler)(nil).FlowGetsByType), ctx, customerID, flowType, token, limit)
}

// FlowSetToCache mocks base method.
func (m *MockDBHandler) FlowSetToCache(ctx context.Context, f *flow.Flow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowSetToCache", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowSetToCache indicates an expected call of FlowSetToCache.
func (mr *MockDBHandlerMockRecorder) FlowSetToCache(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowSetToCache", reflect.TypeOf((*MockDBHandler)(nil).FlowSetToCache), ctx, f)
}

// FlowUpdate mocks base method.
func (m *MockDBHandler) FlowUpdate(ctx context.Context, id uuid.UUID, name, detail string, actions []action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowUpdate", ctx, id, name, detail, actions)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlowUpdate indicates an expected call of FlowUpdate.
func (mr *MockDBHandlerMockRecorder) FlowUpdate(ctx, id, name, detail, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowUpdate", reflect.TypeOf((*MockDBHandler)(nil).FlowUpdate), ctx, id, name, detail, actions)
}
