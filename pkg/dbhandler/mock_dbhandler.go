// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	transcribe "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcribe"
	transcript "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcript"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// TranscribeAddTranscript mocks base method.
func (m *MockDBHandler) TranscribeAddTranscript(ctx context.Context, id uuid.UUID, t *transcript.Transcript) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeAddTranscript", ctx, id, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranscribeAddTranscript indicates an expected call of TranscribeAddTranscript.
func (mr *MockDBHandlerMockRecorder) TranscribeAddTranscript(ctx, id, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeAddTranscript", reflect.TypeOf((*MockDBHandler)(nil).TranscribeAddTranscript), ctx, id, t)
}

// TranscribeCreate mocks base method.
func (m *MockDBHandler) TranscribeCreate(ctx context.Context, t *transcribe.Transcribe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeCreate", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranscribeCreate indicates an expected call of TranscribeCreate.
func (mr *MockDBHandlerMockRecorder) TranscribeCreate(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeCreate", reflect.TypeOf((*MockDBHandler)(nil).TranscribeCreate), ctx, t)
}

// TranscribeDelete mocks base method.
func (m *MockDBHandler) TranscribeDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TranscribeDelete indicates an expected call of TranscribeDelete.
func (mr *MockDBHandlerMockRecorder) TranscribeDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeDelete", reflect.TypeOf((*MockDBHandler)(nil).TranscribeDelete), ctx, id)
}

// TranscribeGet mocks base method.
func (m *MockDBHandler) TranscribeGet(ctx context.Context, id uuid.UUID) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranscribeGet", ctx, id)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranscribeGet indicates an expected call of TranscribeGet.
func (mr *MockDBHandlerMockRecorder) TranscribeGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranscribeGet", reflect.TypeOf((*MockDBHandler)(nil).TranscribeGet), ctx, id)
}
