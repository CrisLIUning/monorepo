// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	chat "gitlab.com/voipbin/bin-manager/chat-manager.git/models/chat"
	chatroom "gitlab.com/voipbin/bin-manager/chat-manager.git/models/chatroom"
	messagechat "gitlab.com/voipbin/bin-manager/chat-manager.git/models/messagechat"
	messagechatroom "gitlab.com/voipbin/bin-manager/chat-manager.git/models/messagechatroom"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// ChatAddParticipantID mocks base method.
func (m *MockDBHandler) ChatAddParticipantID(ctx context.Context, id, participantID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatAddParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatAddParticipantID indicates an expected call of ChatAddParticipantID.
func (mr *MockDBHandlerMockRecorder) ChatAddParticipantID(ctx, id, participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatAddParticipantID", reflect.TypeOf((*MockDBHandler)(nil).ChatAddParticipantID), ctx, id, participantID)
}

// ChatCreate mocks base method.
func (m *MockDBHandler) ChatCreate(ctx context.Context, c *chat.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatCreate indicates an expected call of ChatCreate.
func (mr *MockDBHandlerMockRecorder) ChatCreate(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatCreate", reflect.TypeOf((*MockDBHandler)(nil).ChatCreate), ctx, c)
}

// ChatDelete mocks base method.
func (m *MockDBHandler) ChatDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatDelete indicates an expected call of ChatDelete.
func (mr *MockDBHandlerMockRecorder) ChatDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatDelete", reflect.TypeOf((*MockDBHandler)(nil).ChatDelete), ctx, id)
}

// ChatGet mocks base method.
func (m *MockDBHandler) ChatGet(ctx context.Context, id uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatGet", ctx, id)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatGet indicates an expected call of ChatGet.
func (mr *MockDBHandlerMockRecorder) ChatGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatGet", reflect.TypeOf((*MockDBHandler)(nil).ChatGet), ctx, id)
}

// ChatGetByTypeAndParticipantsID mocks base method.
func (m *MockDBHandler) ChatGetByTypeAndParticipantsID(ctx context.Context, customerID uuid.UUID, chatType chat.Type, participantIDs []uuid.UUID) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatGetByTypeAndParticipantsID", ctx, customerID, chatType, participantIDs)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatGetByTypeAndParticipantsID indicates an expected call of ChatGetByTypeAndParticipantsID.
func (mr *MockDBHandlerMockRecorder) ChatGetByTypeAndParticipantsID(ctx, customerID, chatType, participantIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatGetByTypeAndParticipantsID", reflect.TypeOf((*MockDBHandler)(nil).ChatGetByTypeAndParticipantsID), ctx, customerID, chatType, participantIDs)
}

// ChatGetsByCustomerID mocks base method.
func (m *MockDBHandler) ChatGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, size uint64) ([]*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatGetsByCustomerID", ctx, customerID, token, size)
	ret0, _ := ret[0].([]*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatGetsByCustomerID indicates an expected call of ChatGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) ChatGetsByCustomerID(ctx, customerID, token, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).ChatGetsByCustomerID), ctx, customerID, token, size)
}

// ChatGetsByType mocks base method.
func (m *MockDBHandler) ChatGetsByType(ctx context.Context, customerID uuid.UUID, chatType chat.Type, token string, size uint64) ([]*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatGetsByType", ctx, customerID, chatType, token, size)
	ret0, _ := ret[0].([]*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatGetsByType indicates an expected call of ChatGetsByType.
func (mr *MockDBHandlerMockRecorder) ChatGetsByType(ctx, customerID, chatType, token, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatGetsByType", reflect.TypeOf((*MockDBHandler)(nil).ChatGetsByType), ctx, customerID, chatType, token, size)
}

// ChatRemoveParticipantID mocks base method.
func (m *MockDBHandler) ChatRemoveParticipantID(ctx context.Context, id, participantID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatRemoveParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatRemoveParticipantID indicates an expected call of ChatRemoveParticipantID.
func (mr *MockDBHandlerMockRecorder) ChatRemoveParticipantID(ctx, id, participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatRemoveParticipantID", reflect.TypeOf((*MockDBHandler)(nil).ChatRemoveParticipantID), ctx, id, participantID)
}

// ChatUpdateBasicInfo mocks base method.
func (m *MockDBHandler) ChatUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatUpdateBasicInfo indicates an expected call of ChatUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) ChatUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).ChatUpdateBasicInfo), ctx, id, name, detail)
}

// ChatUpdateOwnerID mocks base method.
func (m *MockDBHandler) ChatUpdateOwnerID(ctx context.Context, id, ownerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatUpdateOwnerID", ctx, id, ownerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatUpdateOwnerID indicates an expected call of ChatUpdateOwnerID.
func (mr *MockDBHandlerMockRecorder) ChatUpdateOwnerID(ctx, id, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatUpdateOwnerID", reflect.TypeOf((*MockDBHandler)(nil).ChatUpdateOwnerID), ctx, id, ownerID)
}

// ChatroomAddParticipantID mocks base method.
func (m *MockDBHandler) ChatroomAddParticipantID(ctx context.Context, id, participantID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomAddParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomAddParticipantID indicates an expected call of ChatroomAddParticipantID.
func (mr *MockDBHandlerMockRecorder) ChatroomAddParticipantID(ctx, id, participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomAddParticipantID", reflect.TypeOf((*MockDBHandler)(nil).ChatroomAddParticipantID), ctx, id, participantID)
}

// ChatroomCreate mocks base method.
func (m *MockDBHandler) ChatroomCreate(ctx context.Context, c *chatroom.Chatroom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomCreate indicates an expected call of ChatroomCreate.
func (mr *MockDBHandlerMockRecorder) ChatroomCreate(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomCreate", reflect.TypeOf((*MockDBHandler)(nil).ChatroomCreate), ctx, c)
}

// ChatroomDelete mocks base method.
func (m *MockDBHandler) ChatroomDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomDelete indicates an expected call of ChatroomDelete.
func (mr *MockDBHandlerMockRecorder) ChatroomDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomDelete", reflect.TypeOf((*MockDBHandler)(nil).ChatroomDelete), ctx, id)
}

// ChatroomGet mocks base method.
func (m *MockDBHandler) ChatroomGet(ctx context.Context, id uuid.UUID) (*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomGet", ctx, id)
	ret0, _ := ret[0].(*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomGet indicates an expected call of ChatroomGet.
func (mr *MockDBHandlerMockRecorder) ChatroomGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomGet", reflect.TypeOf((*MockDBHandler)(nil).ChatroomGet), ctx, id)
}

// ChatroomGetsByChatID mocks base method.
func (m *MockDBHandler) ChatroomGetsByChatID(ctx context.Context, chatID uuid.UUID, token string, size uint64) ([]*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomGetsByChatID", ctx, chatID, token, size)
	ret0, _ := ret[0].([]*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomGetsByChatID indicates an expected call of ChatroomGetsByChatID.
func (mr *MockDBHandlerMockRecorder) ChatroomGetsByChatID(ctx, chatID, token, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomGetsByChatID", reflect.TypeOf((*MockDBHandler)(nil).ChatroomGetsByChatID), ctx, chatID, token, size)
}

// ChatroomGetsByCustomerID mocks base method.
func (m *MockDBHandler) ChatroomGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, size uint64, filters map[string]string) ([]*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomGetsByCustomerID", ctx, customerID, token, size, filters)
	ret0, _ := ret[0].([]*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomGetsByCustomerID indicates an expected call of ChatroomGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) ChatroomGetsByCustomerID(ctx, customerID, token, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).ChatroomGetsByCustomerID), ctx, customerID, token, size, filters)
}

// ChatroomGetsByOwnerID mocks base method.
func (m *MockDBHandler) ChatroomGetsByOwnerID(ctx context.Context, ownerID uuid.UUID, token string, size uint64, filters map[string]string) ([]*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomGetsByOwnerID", ctx, ownerID, token, size, filters)
	ret0, _ := ret[0].([]*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomGetsByOwnerID indicates an expected call of ChatroomGetsByOwnerID.
func (mr *MockDBHandlerMockRecorder) ChatroomGetsByOwnerID(ctx, ownerID, token, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomGetsByOwnerID", reflect.TypeOf((*MockDBHandler)(nil).ChatroomGetsByOwnerID), ctx, ownerID, token, size, filters)
}

// ChatroomGetsByType mocks base method.
func (m *MockDBHandler) ChatroomGetsByType(ctx context.Context, customerID uuid.UUID, chatType chatroom.Type, token string, size uint64) ([]*chatroom.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomGetsByType", ctx, customerID, chatType, token, size)
	ret0, _ := ret[0].([]*chatroom.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatroomGetsByType indicates an expected call of ChatroomGetsByType.
func (mr *MockDBHandlerMockRecorder) ChatroomGetsByType(ctx, customerID, chatType, token, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomGetsByType", reflect.TypeOf((*MockDBHandler)(nil).ChatroomGetsByType), ctx, customerID, chatType, token, size)
}

// ChatroomRemoveParticipantID mocks base method.
func (m *MockDBHandler) ChatroomRemoveParticipantID(ctx context.Context, id, participantID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomRemoveParticipantID", ctx, id, participantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomRemoveParticipantID indicates an expected call of ChatroomRemoveParticipantID.
func (mr *MockDBHandlerMockRecorder) ChatroomRemoveParticipantID(ctx, id, participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomRemoveParticipantID", reflect.TypeOf((*MockDBHandler)(nil).ChatroomRemoveParticipantID), ctx, id, participantID)
}

// ChatroomUpdateBasicInfo mocks base method.
func (m *MockDBHandler) ChatroomUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatroomUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatroomUpdateBasicInfo indicates an expected call of ChatroomUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) ChatroomUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatroomUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).ChatroomUpdateBasicInfo), ctx, id, name, detail)
}

// GetCurTime mocks base method.
func (m *MockDBHandler) GetCurTime() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurTime")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurTime indicates an expected call of GetCurTime.
func (mr *MockDBHandlerMockRecorder) GetCurTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurTime", reflect.TypeOf((*MockDBHandler)(nil).GetCurTime))
}

// MessagechatCreate mocks base method.
func (m_2 *MockDBHandler) MessagechatCreate(ctx context.Context, m *messagechat.Messagechat) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "MessagechatCreate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessagechatCreate indicates an expected call of MessagechatCreate.
func (mr *MockDBHandlerMockRecorder) MessagechatCreate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatCreate", reflect.TypeOf((*MockDBHandler)(nil).MessagechatCreate), ctx, m)
}

// MessagechatDelete mocks base method.
func (m *MockDBHandler) MessagechatDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessagechatDelete indicates an expected call of MessagechatDelete.
func (mr *MockDBHandlerMockRecorder) MessagechatDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatDelete", reflect.TypeOf((*MockDBHandler)(nil).MessagechatDelete), ctx, id)
}

// MessagechatGet mocks base method.
func (m *MockDBHandler) MessagechatGet(ctx context.Context, id uuid.UUID) (*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatGet", ctx, id)
	ret0, _ := ret[0].(*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatGet indicates an expected call of MessagechatGet.
func (mr *MockDBHandlerMockRecorder) MessagechatGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatGet", reflect.TypeOf((*MockDBHandler)(nil).MessagechatGet), ctx, id)
}

// MessagechatGetsByChatID mocks base method.
func (m *MockDBHandler) MessagechatGetsByChatID(ctx context.Context, chatID uuid.UUID, token string, size uint64) ([]*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatGetsByChatID", ctx, chatID, token, size)
	ret0, _ := ret[0].([]*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatGetsByChatID indicates an expected call of MessagechatGetsByChatID.
func (mr *MockDBHandlerMockRecorder) MessagechatGetsByChatID(ctx, chatID, token, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatGetsByChatID", reflect.TypeOf((*MockDBHandler)(nil).MessagechatGetsByChatID), ctx, chatID, token, size)
}

// MessagechatGetsByCustomerID mocks base method.
func (m *MockDBHandler) MessagechatGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, size uint64) ([]*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatGetsByCustomerID", ctx, customerID, token, size)
	ret0, _ := ret[0].([]*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatGetsByCustomerID indicates an expected call of MessagechatGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) MessagechatGetsByCustomerID(ctx, customerID, token, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).MessagechatGetsByCustomerID), ctx, customerID, token, size)
}

// MessagechatroomCreate mocks base method.
func (m_2 *MockDBHandler) MessagechatroomCreate(ctx context.Context, m *messagechatroom.Messagechatroom) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "MessagechatroomCreate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessagechatroomCreate indicates an expected call of MessagechatroomCreate.
func (mr *MockDBHandlerMockRecorder) MessagechatroomCreate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomCreate", reflect.TypeOf((*MockDBHandler)(nil).MessagechatroomCreate), ctx, m)
}

// MessagechatroomDelete mocks base method.
func (m *MockDBHandler) MessagechatroomDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatroomDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessagechatroomDelete indicates an expected call of MessagechatroomDelete.
func (mr *MockDBHandlerMockRecorder) MessagechatroomDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomDelete", reflect.TypeOf((*MockDBHandler)(nil).MessagechatroomDelete), ctx, id)
}

// MessagechatroomGet mocks base method.
func (m *MockDBHandler) MessagechatroomGet(ctx context.Context, id uuid.UUID) (*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatroomGet", ctx, id)
	ret0, _ := ret[0].(*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatroomGet indicates an expected call of MessagechatroomGet.
func (mr *MockDBHandlerMockRecorder) MessagechatroomGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomGet", reflect.TypeOf((*MockDBHandler)(nil).MessagechatroomGet), ctx, id)
}

// MessagechatroomGetsByChatroomID mocks base method.
func (m *MockDBHandler) MessagechatroomGetsByChatroomID(ctx context.Context, chatroomID uuid.UUID, token string, size uint64) ([]*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatroomGetsByChatroomID", ctx, chatroomID, token, size)
	ret0, _ := ret[0].([]*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatroomGetsByChatroomID indicates an expected call of MessagechatroomGetsByChatroomID.
func (mr *MockDBHandlerMockRecorder) MessagechatroomGetsByChatroomID(ctx, chatroomID, token, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomGetsByChatroomID", reflect.TypeOf((*MockDBHandler)(nil).MessagechatroomGetsByChatroomID), ctx, chatroomID, token, size)
}

// MessagechatroomGetsByCustomerID mocks base method.
func (m *MockDBHandler) MessagechatroomGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, size uint64) ([]*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatroomGetsByCustomerID", ctx, customerID, token, size)
	ret0, _ := ret[0].([]*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatroomGetsByCustomerID indicates an expected call of MessagechatroomGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) MessagechatroomGetsByCustomerID(ctx, customerID, token, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).MessagechatroomGetsByCustomerID), ctx, customerID, token, size)
}

// MessagechatroomGetsByMessagechatID mocks base method.
func (m *MockDBHandler) MessagechatroomGetsByMessagechatID(ctx context.Context, messagechatID uuid.UUID, token string, size uint64) ([]*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagechatroomGetsByMessagechatID", ctx, messagechatID, token, size)
	ret0, _ := ret[0].([]*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagechatroomGetsByMessagechatID indicates an expected call of MessagechatroomGetsByMessagechatID.
func (mr *MockDBHandlerMockRecorder) MessagechatroomGetsByMessagechatID(ctx, messagechatID, token, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagechatroomGetsByMessagechatID", reflect.TypeOf((*MockDBHandler)(nil).MessagechatroomGetsByMessagechatID), ctx, messagechatID, token, size)
}
