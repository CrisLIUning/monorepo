// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	number "gitlab.com/voipbin/bin-manager/number-manager.git/models/number"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// NumberCreate mocks base method.
func (m *MockDBHandler) NumberCreate(ctx context.Context, n *number.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberCreate", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberCreate indicates an expected call of NumberCreate.
func (mr *MockDBHandlerMockRecorder) NumberCreate(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberCreate", reflect.TypeOf((*MockDBHandler)(nil).NumberCreate), ctx, n)
}

// NumberDelete mocks base method.
func (m *MockDBHandler) NumberDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberDelete indicates an expected call of NumberDelete.
func (mr *MockDBHandlerMockRecorder) NumberDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberDelete", reflect.TypeOf((*MockDBHandler)(nil).NumberDelete), ctx, id)
}

// NumberGet mocks base method.
func (m *MockDBHandler) NumberGet(ctx context.Context, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGet", ctx, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGet indicates an expected call of NumberGet.
func (mr *MockDBHandlerMockRecorder) NumberGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGet", reflect.TypeOf((*MockDBHandler)(nil).NumberGet), ctx, id)
}

// NumberGetByNumber mocks base method.
func (m *MockDBHandler) NumberGetByNumber(ctx context.Context, numb string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGetByNumber", ctx, numb)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGetByNumber indicates an expected call of NumberGetByNumber.
func (mr *MockDBHandlerMockRecorder) NumberGetByNumber(ctx, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGetByNumber", reflect.TypeOf((*MockDBHandler)(nil).NumberGetByNumber), ctx, numb)
}

// NumberGets mocks base method.
func (m *MockDBHandler) NumberGets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGets indicates an expected call of NumberGets.
func (mr *MockDBHandlerMockRecorder) NumberGets(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGets", reflect.TypeOf((*MockDBHandler)(nil).NumberGets), ctx, customerID, size, token)
}

// NumberGetsByFlowID mocks base method.
func (m *MockDBHandler) NumberGetsByFlowID(ctx context.Context, flowID uuid.UUID, size uint64, token string) ([]*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGetsByFlowID", ctx, flowID, size, token)
	ret0, _ := ret[0].([]*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGetsByFlowID indicates an expected call of NumberGetsByFlowID.
func (mr *MockDBHandlerMockRecorder) NumberGetsByFlowID(ctx, flowID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGetsByFlowID", reflect.TypeOf((*MockDBHandler)(nil).NumberGetsByFlowID), ctx, flowID, size, token)
}

// NumberUpdateBasicInfo mocks base method.
func (m *MockDBHandler) NumberUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberUpdateBasicInfo indicates an expected call of NumberUpdateBasicInfo.
func (mr *MockDBHandlerMockRecorder) NumberUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdateBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).NumberUpdateBasicInfo), ctx, id, name, detail)
}

// NumberUpdateFlowID mocks base method.
func (m *MockDBHandler) NumberUpdateFlowID(ctx context.Context, id, flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdateFlowID", ctx, id, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberUpdateFlowID indicates an expected call of NumberUpdateFlowID.
func (mr *MockDBHandlerMockRecorder) NumberUpdateFlowID(ctx, id, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdateFlowID", reflect.TypeOf((*MockDBHandler)(nil).NumberUpdateFlowID), ctx, id, flowID)
}
