// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	agent "gitlab.com/voipbin/bin-manager/agent-manager.git/models/agent"
	agentcall "gitlab.com/voipbin/bin-manager/agent-manager.git/models/agentcall"
	agentdial "gitlab.com/voipbin/bin-manager/agent-manager.git/models/agentdial"
	tag "gitlab.com/voipbin/bin-manager/agent-manager.git/models/tag"
	address "gitlab.com/voipbin/bin-manager/common-handler.git/models/address"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// AgentCallCreate mocks base method.
func (m *MockDBHandler) AgentCallCreate(ctx context.Context, a *agentcall.AgentCall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCallCreate", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentCallCreate indicates an expected call of AgentCallCreate.
func (mr *MockDBHandlerMockRecorder) AgentCallCreate(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCallCreate", reflect.TypeOf((*MockDBHandler)(nil).AgentCallCreate), ctx, a)
}

// AgentCallGet mocks base method.
func (m *MockDBHandler) AgentCallGet(ctx context.Context, id uuid.UUID) (*agentcall.AgentCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCallGet", ctx, id)
	ret0, _ := ret[0].(*agentcall.AgentCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentCallGet indicates an expected call of AgentCallGet.
func (mr *MockDBHandlerMockRecorder) AgentCallGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCallGet", reflect.TypeOf((*MockDBHandler)(nil).AgentCallGet), ctx, id)
}

// AgentCallGetFromCache mocks base method.
func (m *MockDBHandler) AgentCallGetFromCache(ctx context.Context, id uuid.UUID) (*agentcall.AgentCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCallGetFromCache", ctx, id)
	ret0, _ := ret[0].(*agentcall.AgentCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentCallGetFromCache indicates an expected call of AgentCallGetFromCache.
func (mr *MockDBHandlerMockRecorder) AgentCallGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCallGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).AgentCallGetFromCache), ctx, id)
}

// AgentCallSetToCache mocks base method.
func (m *MockDBHandler) AgentCallSetToCache(ctx context.Context, u *agentcall.AgentCall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCallSetToCache", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentCallSetToCache indicates an expected call of AgentCallSetToCache.
func (mr *MockDBHandlerMockRecorder) AgentCallSetToCache(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCallSetToCache", reflect.TypeOf((*MockDBHandler)(nil).AgentCallSetToCache), ctx, u)
}

// AgentCreate mocks base method.
func (m *MockDBHandler) AgentCreate(ctx context.Context, a *agent.Agent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCreate", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentCreate indicates an expected call of AgentCreate.
func (mr *MockDBHandlerMockRecorder) AgentCreate(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCreate", reflect.TypeOf((*MockDBHandler)(nil).AgentCreate), ctx, a)
}

// AgentDelete mocks base method.
func (m *MockDBHandler) AgentDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentDelete indicates an expected call of AgentDelete.
func (mr *MockDBHandlerMockRecorder) AgentDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentDelete", reflect.TypeOf((*MockDBHandler)(nil).AgentDelete), ctx, id)
}

// AgentDialCreate mocks base method.
func (m *MockDBHandler) AgentDialCreate(ctx context.Context, a *agentdial.AgentDial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentDialCreate", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentDialCreate indicates an expected call of AgentDialCreate.
func (mr *MockDBHandlerMockRecorder) AgentDialCreate(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentDialCreate", reflect.TypeOf((*MockDBHandler)(nil).AgentDialCreate), ctx, a)
}

// AgentDialGet mocks base method.
func (m *MockDBHandler) AgentDialGet(ctx context.Context, id uuid.UUID) (*agentdial.AgentDial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentDialGet", ctx, id)
	ret0, _ := ret[0].(*agentdial.AgentDial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentDialGet indicates an expected call of AgentDialGet.
func (mr *MockDBHandlerMockRecorder) AgentDialGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentDialGet", reflect.TypeOf((*MockDBHandler)(nil).AgentDialGet), ctx, id)
}

// AgentGet mocks base method.
func (m *MockDBHandler) AgentGet(ctx context.Context, id uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGet", ctx, id)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGet indicates an expected call of AgentGet.
func (mr *MockDBHandlerMockRecorder) AgentGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGet", reflect.TypeOf((*MockDBHandler)(nil).AgentGet), ctx, id)
}

// AgentGetByUsername mocks base method.
func (m *MockDBHandler) AgentGetByUsername(ctx context.Context, customerID uuid.UUID, username string) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGetByUsername", ctx, customerID, username)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGetByUsername indicates an expected call of AgentGetByUsername.
func (mr *MockDBHandlerMockRecorder) AgentGetByUsername(ctx, customerID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGetByUsername", reflect.TypeOf((*MockDBHandler)(nil).AgentGetByUsername), ctx, customerID, username)
}

// AgentGetFromDB mocks base method.
func (m *MockDBHandler) AgentGetFromDB(ctx context.Context, id uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGetFromDB", ctx, id)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGetFromDB indicates an expected call of AgentGetFromDB.
func (mr *MockDBHandlerMockRecorder) AgentGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).AgentGetFromDB), ctx, id)
}

// AgentGets mocks base method.
func (m *MockDBHandler) AgentGets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGets indicates an expected call of AgentGets.
func (mr *MockDBHandlerMockRecorder) AgentGets(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGets", reflect.TypeOf((*MockDBHandler)(nil).AgentGets), ctx, customerID, size, token)
}

// AgentSetAddresses mocks base method.
func (m *MockDBHandler) AgentSetAddresses(ctx context.Context, id uuid.UUID, addresses []address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetAddresses", ctx, id, addresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetAddresses indicates an expected call of AgentSetAddresses.
func (mr *MockDBHandlerMockRecorder) AgentSetAddresses(ctx, id, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetAddresses", reflect.TypeOf((*MockDBHandler)(nil).AgentSetAddresses), ctx, id, addresses)
}

// AgentSetBasicInfo mocks base method.
func (m *MockDBHandler) AgentSetBasicInfo(ctx context.Context, id uuid.UUID, name, detail string, ringMethod agent.RingMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetBasicInfo", ctx, id, name, detail, ringMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetBasicInfo indicates an expected call of AgentSetBasicInfo.
func (mr *MockDBHandlerMockRecorder) AgentSetBasicInfo(ctx, id, name, detail, ringMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).AgentSetBasicInfo), ctx, id, name, detail, ringMethod)
}

// AgentSetPasswordHash mocks base method.
func (m *MockDBHandler) AgentSetPasswordHash(ctx context.Context, id uuid.UUID, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetPasswordHash", ctx, id, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetPasswordHash indicates an expected call of AgentSetPasswordHash.
func (mr *MockDBHandlerMockRecorder) AgentSetPasswordHash(ctx, id, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetPasswordHash", reflect.TypeOf((*MockDBHandler)(nil).AgentSetPasswordHash), ctx, id, passwordHash)
}

// AgentSetPermission mocks base method.
func (m *MockDBHandler) AgentSetPermission(ctx context.Context, id uuid.UUID, permission agent.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetPermission", ctx, id, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetPermission indicates an expected call of AgentSetPermission.
func (mr *MockDBHandlerMockRecorder) AgentSetPermission(ctx, id, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetPermission", reflect.TypeOf((*MockDBHandler)(nil).AgentSetPermission), ctx, id, permission)
}

// AgentSetStatus mocks base method.
func (m *MockDBHandler) AgentSetStatus(ctx context.Context, id uuid.UUID, status agent.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetStatus indicates an expected call of AgentSetStatus.
func (mr *MockDBHandlerMockRecorder) AgentSetStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetStatus", reflect.TypeOf((*MockDBHandler)(nil).AgentSetStatus), ctx, id, status)
}

// AgentSetTagIDs mocks base method.
func (m *MockDBHandler) AgentSetTagIDs(ctx context.Context, id uuid.UUID, tags []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetTagIDs", ctx, id, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetTagIDs indicates an expected call of AgentSetTagIDs.
func (mr *MockDBHandlerMockRecorder) AgentSetTagIDs(ctx, id, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetTagIDs", reflect.TypeOf((*MockDBHandler)(nil).AgentSetTagIDs), ctx, id, tags)
}

// AgentSetToCache mocks base method.
func (m *MockDBHandler) AgentSetToCache(ctx context.Context, u *agent.Agent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSetToCache", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentSetToCache indicates an expected call of AgentSetToCache.
func (mr *MockDBHandlerMockRecorder) AgentSetToCache(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSetToCache", reflect.TypeOf((*MockDBHandler)(nil).AgentSetToCache), ctx, u)
}

// AgentUpdateToCache mocks base method.
func (m *MockDBHandler) AgentUpdateToCache(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentUpdateToCache indicates an expected call of AgentUpdateToCache.
func (mr *MockDBHandlerMockRecorder) AgentUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).AgentUpdateToCache), ctx, id)
}

// TagCreate mocks base method.
func (m *MockDBHandler) TagCreate(ctx context.Context, a *tag.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagCreate", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagCreate indicates an expected call of TagCreate.
func (mr *MockDBHandlerMockRecorder) TagCreate(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagCreate", reflect.TypeOf((*MockDBHandler)(nil).TagCreate), ctx, a)
}

// TagDelete mocks base method.
func (m *MockDBHandler) TagDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagDelete indicates an expected call of TagDelete.
func (mr *MockDBHandlerMockRecorder) TagDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagDelete", reflect.TypeOf((*MockDBHandler)(nil).TagDelete), ctx, id)
}

// TagGet mocks base method.
func (m *MockDBHandler) TagGet(ctx context.Context, id uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGet", ctx, id)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGet indicates an expected call of TagGet.
func (mr *MockDBHandlerMockRecorder) TagGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGet", reflect.TypeOf((*MockDBHandler)(nil).TagGet), ctx, id)
}

// TagGetFromCache mocks base method.
func (m *MockDBHandler) TagGetFromCache(ctx context.Context, id uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGetFromCache", ctx, id)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGetFromCache indicates an expected call of TagGetFromCache.
func (mr *MockDBHandlerMockRecorder) TagGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).TagGetFromCache), ctx, id)
}

// TagGetFromDB mocks base method.
func (m *MockDBHandler) TagGetFromDB(ctx context.Context, id uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGetFromDB", ctx, id)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGetFromDB indicates an expected call of TagGetFromDB.
func (mr *MockDBHandlerMockRecorder) TagGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).TagGetFromDB), ctx, id)
}

// TagGets mocks base method.
func (m *MockDBHandler) TagGets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGets indicates an expected call of TagGets.
func (mr *MockDBHandlerMockRecorder) TagGets(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGets", reflect.TypeOf((*MockDBHandler)(nil).TagGets), ctx, customerID, size, token)
}

// TagSetBasicInfo mocks base method.
func (m *MockDBHandler) TagSetBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagSetBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagSetBasicInfo indicates an expected call of TagSetBasicInfo.
func (mr *MockDBHandlerMockRecorder) TagSetBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagSetBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).TagSetBasicInfo), ctx, id, name, detail)
}

// TagSetToCache mocks base method.
func (m *MockDBHandler) TagSetToCache(ctx context.Context, u *tag.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagSetToCache", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagSetToCache indicates an expected call of TagSetToCache.
func (mr *MockDBHandlerMockRecorder) TagSetToCache(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagSetToCache", reflect.TypeOf((*MockDBHandler)(nil).TagSetToCache), ctx, u)
}

// TagUpdateToCache mocks base method.
func (m *MockDBHandler) TagUpdateToCache(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagUpdateToCache indicates an expected call of TagUpdateToCache.
func (mr *MockDBHandlerMockRecorder) TagUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).TagUpdateToCache), ctx, id)
}
