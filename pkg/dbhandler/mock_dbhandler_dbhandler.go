// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/voipbin/bin-manager/registrar-manager.git/models"
	reflect "reflect"
)

// MockDBHandler is a mock of DBHandler interface
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// AstAORCreate mocks base method
func (m *MockDBHandler) AstAORCreate(ctx context.Context, b *models.AstAOR) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAORCreate indicates an expected call of AstAORCreate
func (mr *MockDBHandlerMockRecorder) AstAORCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORCreate", reflect.TypeOf((*MockDBHandler)(nil).AstAORCreate), ctx, b)
}

// AstAORDelete mocks base method
func (m *MockDBHandler) AstAORDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAORDelete indicates an expected call of AstAORDelete
func (mr *MockDBHandlerMockRecorder) AstAORDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORDelete", reflect.TypeOf((*MockDBHandler)(nil).AstAORDelete), ctx, id)
}

// AstAORGet mocks base method
func (m *MockDBHandler) AstAORGet(ctx context.Context, id string) (*models.AstAOR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORGet", ctx, id)
	ret0, _ := ret[0].(*models.AstAOR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstAORGet indicates an expected call of AstAORGet
func (mr *MockDBHandlerMockRecorder) AstAORGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORGet", reflect.TypeOf((*MockDBHandler)(nil).AstAORGet), ctx, id)
}

// AstAORGetFromCache mocks base method
func (m *MockDBHandler) AstAORGetFromCache(ctx context.Context, id string) (*models.AstAOR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORGetFromCache", ctx, id)
	ret0, _ := ret[0].(*models.AstAOR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstAORGetFromCache indicates an expected call of AstAORGetFromCache
func (mr *MockDBHandlerMockRecorder) AstAORGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).AstAORGetFromCache), ctx, id)
}

// AstAORGetFromDB mocks base method
func (m *MockDBHandler) AstAORGetFromDB(ctx context.Context, id string) (*models.AstAOR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORGetFromDB", ctx, id)
	ret0, _ := ret[0].(*models.AstAOR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstAORGetFromDB indicates an expected call of AstAORGetFromDB
func (mr *MockDBHandlerMockRecorder) AstAORGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).AstAORGetFromDB), ctx, id)
}

// AstAORSetToCache mocks base method
func (m *MockDBHandler) AstAORSetToCache(ctx context.Context, aor *models.AstAOR) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORSetToCache", ctx, aor)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAORSetToCache indicates an expected call of AstAORSetToCache
func (mr *MockDBHandlerMockRecorder) AstAORSetToCache(ctx, aor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORSetToCache", reflect.TypeOf((*MockDBHandler)(nil).AstAORSetToCache), ctx, aor)
}

// AstAORUpdateToCache mocks base method
func (m *MockDBHandler) AstAORUpdateToCache(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAORUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAORUpdateToCache indicates an expected call of AstAORUpdateToCache
func (mr *MockDBHandlerMockRecorder) AstAORUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAORUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).AstAORUpdateToCache), ctx, id)
}

// AstAuthCreate mocks base method
func (m *MockDBHandler) AstAuthCreate(ctx context.Context, b *models.AstAuth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAuthCreate indicates an expected call of AstAuthCreate
func (mr *MockDBHandlerMockRecorder) AstAuthCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthCreate", reflect.TypeOf((*MockDBHandler)(nil).AstAuthCreate), ctx, b)
}

// AstAuthDelete mocks base method
func (m *MockDBHandler) AstAuthDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAuthDelete indicates an expected call of AstAuthDelete
func (mr *MockDBHandlerMockRecorder) AstAuthDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthDelete", reflect.TypeOf((*MockDBHandler)(nil).AstAuthDelete), ctx, id)
}

// AstAuthGet mocks base method
func (m *MockDBHandler) AstAuthGet(ctx context.Context, id string) (*models.AstAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthGet", ctx, id)
	ret0, _ := ret[0].(*models.AstAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstAuthGet indicates an expected call of AstAuthGet
func (mr *MockDBHandlerMockRecorder) AstAuthGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthGet", reflect.TypeOf((*MockDBHandler)(nil).AstAuthGet), ctx, id)
}

// AstAuthGetFromCache mocks base method
func (m *MockDBHandler) AstAuthGetFromCache(ctx context.Context, id string) (*models.AstAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthGetFromCache", ctx, id)
	ret0, _ := ret[0].(*models.AstAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstAuthGetFromCache indicates an expected call of AstAuthGetFromCache
func (mr *MockDBHandlerMockRecorder) AstAuthGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).AstAuthGetFromCache), ctx, id)
}

// AstAuthGetFromDB mocks base method
func (m *MockDBHandler) AstAuthGetFromDB(ctx context.Context, id string) (*models.AstAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthGetFromDB", ctx, id)
	ret0, _ := ret[0].(*models.AstAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstAuthGetFromDB indicates an expected call of AstAuthGetFromDB
func (mr *MockDBHandlerMockRecorder) AstAuthGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).AstAuthGetFromDB), ctx, id)
}

// AstAuthSetToCache mocks base method
func (m *MockDBHandler) AstAuthSetToCache(ctx context.Context, auth *models.AstAuth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthSetToCache", ctx, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAuthSetToCache indicates an expected call of AstAuthSetToCache
func (mr *MockDBHandlerMockRecorder) AstAuthSetToCache(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthSetToCache", reflect.TypeOf((*MockDBHandler)(nil).AstAuthSetToCache), ctx, auth)
}

// AstAuthUpdateToCache mocks base method
func (m *MockDBHandler) AstAuthUpdateToCache(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAuthUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAuthUpdateToCache indicates an expected call of AstAuthUpdateToCache
func (mr *MockDBHandlerMockRecorder) AstAuthUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAuthUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).AstAuthUpdateToCache), ctx, id)
}

// AstEndpointCreate mocks base method
func (m *MockDBHandler) AstEndpointCreate(ctx context.Context, b *models.AstEndpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstEndpointCreate indicates an expected call of AstEndpointCreate
func (mr *MockDBHandlerMockRecorder) AstEndpointCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointCreate", reflect.TypeOf((*MockDBHandler)(nil).AstEndpointCreate), ctx, b)
}

// AstEndpointDelete mocks base method
func (m *MockDBHandler) AstEndpointDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstEndpointDelete indicates an expected call of AstEndpointDelete
func (mr *MockDBHandlerMockRecorder) AstEndpointDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointDelete", reflect.TypeOf((*MockDBHandler)(nil).AstEndpointDelete), ctx, id)
}

// AstEndpointGet mocks base method
func (m *MockDBHandler) AstEndpointGet(ctx context.Context, id string) (*models.AstEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointGet", ctx, id)
	ret0, _ := ret[0].(*models.AstEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstEndpointGet indicates an expected call of AstEndpointGet
func (mr *MockDBHandlerMockRecorder) AstEndpointGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointGet", reflect.TypeOf((*MockDBHandler)(nil).AstEndpointGet), ctx, id)
}

// AstEndpointGetFromCache mocks base method
func (m *MockDBHandler) AstEndpointGetFromCache(ctx context.Context, id string) (*models.AstEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointGetFromCache", ctx, id)
	ret0, _ := ret[0].(*models.AstEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstEndpointGetFromCache indicates an expected call of AstEndpointGetFromCache
func (mr *MockDBHandlerMockRecorder) AstEndpointGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).AstEndpointGetFromCache), ctx, id)
}

// AstEndpointGetFromDB mocks base method
func (m *MockDBHandler) AstEndpointGetFromDB(ctx context.Context, id string) (*models.AstEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointGetFromDB", ctx, id)
	ret0, _ := ret[0].(*models.AstEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstEndpointGetFromDB indicates an expected call of AstEndpointGetFromDB
func (mr *MockDBHandlerMockRecorder) AstEndpointGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).AstEndpointGetFromDB), ctx, id)
}

// AstEndpointSetToCache mocks base method
func (m *MockDBHandler) AstEndpointSetToCache(ctx context.Context, ednpoint *models.AstEndpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointSetToCache", ctx, ednpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstEndpointSetToCache indicates an expected call of AstEndpointSetToCache
func (mr *MockDBHandlerMockRecorder) AstEndpointSetToCache(ctx, ednpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointSetToCache", reflect.TypeOf((*MockDBHandler)(nil).AstEndpointSetToCache), ctx, ednpoint)
}

// AstEndpointUpdateToCache mocks base method
func (m *MockDBHandler) AstEndpointUpdateToCache(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstEndpointUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstEndpointUpdateToCache indicates an expected call of AstEndpointUpdateToCache
func (mr *MockDBHandlerMockRecorder) AstEndpointUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstEndpointUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).AstEndpointUpdateToCache), ctx, id)
}

// DomainCreate mocks base method
func (m *MockDBHandler) DomainCreate(ctx context.Context, b *models.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// DomainCreate indicates an expected call of DomainCreate
func (mr *MockDBHandlerMockRecorder) DomainCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainCreate", reflect.TypeOf((*MockDBHandler)(nil).DomainCreate), ctx, b)
}

// DomainDelete mocks base method
func (m *MockDBHandler) DomainDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DomainDelete indicates an expected call of DomainDelete
func (mr *MockDBHandlerMockRecorder) DomainDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainDelete", reflect.TypeOf((*MockDBHandler)(nil).DomainDelete), ctx, id)
}

// DomainGet mocks base method
func (m *MockDBHandler) DomainGet(ctx context.Context, id uuid.UUID) (*models.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGet", ctx, id)
	ret0, _ := ret[0].(*models.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGet indicates an expected call of DomainGet
func (mr *MockDBHandlerMockRecorder) DomainGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGet", reflect.TypeOf((*MockDBHandler)(nil).DomainGet), ctx, id)
}

// DomainGetByDomainName mocks base method
func (m *MockDBHandler) DomainGetByDomainName(ctx context.Context, domainName string) (*models.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGetByDomainName", ctx, domainName)
	ret0, _ := ret[0].(*models.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGetByDomainName indicates an expected call of DomainGetByDomainName
func (mr *MockDBHandlerMockRecorder) DomainGetByDomainName(ctx, domainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGetByDomainName", reflect.TypeOf((*MockDBHandler)(nil).DomainGetByDomainName), ctx, domainName)
}

// DomainGetFromCache mocks base method
func (m *MockDBHandler) DomainGetFromCache(ctx context.Context, id uuid.UUID) (*models.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGetFromCache", ctx, id)
	ret0, _ := ret[0].(*models.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGetFromCache indicates an expected call of DomainGetFromCache
func (mr *MockDBHandlerMockRecorder) DomainGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).DomainGetFromCache), ctx, id)
}

// DomainGetFromDB mocks base method
func (m *MockDBHandler) DomainGetFromDB(ctx context.Context, id uuid.UUID) (*models.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGetFromDB", ctx, id)
	ret0, _ := ret[0].(*models.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGetFromDB indicates an expected call of DomainGetFromDB
func (mr *MockDBHandlerMockRecorder) DomainGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).DomainGetFromDB), ctx, id)
}

// DomainGetsByUserID mocks base method
func (m *MockDBHandler) DomainGetsByUserID(ctx context.Context, userID uint64, token string, limit uint64) ([]*models.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainGetsByUserID", ctx, userID, token, limit)
	ret0, _ := ret[0].([]*models.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGetsByUserID indicates an expected call of DomainGetsByUserID
func (mr *MockDBHandlerMockRecorder) DomainGetsByUserID(ctx, userID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGetsByUserID", reflect.TypeOf((*MockDBHandler)(nil).DomainGetsByUserID), ctx, userID, token, limit)
}

// DomainSetToCache mocks base method
func (m *MockDBHandler) DomainSetToCache(ctx context.Context, e *models.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainSetToCache", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// DomainSetToCache indicates an expected call of DomainSetToCache
func (mr *MockDBHandlerMockRecorder) DomainSetToCache(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainSetToCache", reflect.TypeOf((*MockDBHandler)(nil).DomainSetToCache), ctx, e)
}

// DomainUpdateToCache mocks base method
func (m *MockDBHandler) DomainUpdateToCache(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DomainUpdateToCache indicates an expected call of DomainUpdateToCache
func (mr *MockDBHandlerMockRecorder) DomainUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).DomainUpdateToCache), ctx, id)
}

// ExtensionCreate mocks base method
func (m *MockDBHandler) ExtensionCreate(ctx context.Context, b *models.Extension) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtensionCreate indicates an expected call of ExtensionCreate
func (mr *MockDBHandlerMockRecorder) ExtensionCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionCreate", reflect.TypeOf((*MockDBHandler)(nil).ExtensionCreate), ctx, b)
}

// ExtensionDelete mocks base method
func (m *MockDBHandler) ExtensionDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtensionDelete indicates an expected call of ExtensionDelete
func (mr *MockDBHandlerMockRecorder) ExtensionDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionDelete", reflect.TypeOf((*MockDBHandler)(nil).ExtensionDelete), ctx, id)
}

// ExtensionGet mocks base method
func (m *MockDBHandler) ExtensionGet(ctx context.Context, id uuid.UUID) (*models.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGet", ctx, id)
	ret0, _ := ret[0].(*models.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGet indicates an expected call of ExtensionGet
func (mr *MockDBHandlerMockRecorder) ExtensionGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGet", reflect.TypeOf((*MockDBHandler)(nil).ExtensionGet), ctx, id)
}

// ExtensionGetFromCache mocks base method
func (m *MockDBHandler) ExtensionGetFromCache(ctx context.Context, id uuid.UUID) (*models.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGetFromCache", ctx, id)
	ret0, _ := ret[0].(*models.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGetFromCache indicates an expected call of ExtensionGetFromCache
func (mr *MockDBHandlerMockRecorder) ExtensionGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).ExtensionGetFromCache), ctx, id)
}

// ExtensionGetFromDB mocks base method
func (m *MockDBHandler) ExtensionGetFromDB(ctx context.Context, id uuid.UUID) (*models.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionGetFromDB", ctx, id)
	ret0, _ := ret[0].(*models.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtensionGetFromDB indicates an expected call of ExtensionGetFromDB
func (mr *MockDBHandlerMockRecorder) ExtensionGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).ExtensionGetFromDB), ctx, id)
}

// ExtensionSetToCache mocks base method
func (m *MockDBHandler) ExtensionSetToCache(ctx context.Context, e *models.Extension) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionSetToCache", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtensionSetToCache indicates an expected call of ExtensionSetToCache
func (mr *MockDBHandlerMockRecorder) ExtensionSetToCache(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionSetToCache", reflect.TypeOf((*MockDBHandler)(nil).ExtensionSetToCache), ctx, e)
}

// ExtensionUpdateToCache mocks base method
func (m *MockDBHandler) ExtensionUpdateToCache(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtensionUpdateToCache indicates an expected call of ExtensionUpdateToCache
func (mr *MockDBHandlerMockRecorder) ExtensionUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).ExtensionUpdateToCache), ctx, id)
}
