// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	ari "gitlab.com/voipbin/bin-manager/call-manager.git/models/ari"
	bridge "gitlab.com/voipbin/bin-manager/call-manager.git/models/bridge"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/models/call"
	callapplication "gitlab.com/voipbin/bin-manager/call-manager.git/models/callapplication"
	channel "gitlab.com/voipbin/bin-manager/call-manager.git/models/channel"
	confbridge "gitlab.com/voipbin/bin-manager/call-manager.git/models/confbridge"
	externalmedia "gitlab.com/voipbin/bin-manager/call-manager.git/models/externalmedia"
	recording "gitlab.com/voipbin/bin-manager/call-manager.git/models/recording"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// BridgeAddChannelID mocks base method.
func (m *MockDBHandler) BridgeAddChannelID(ctx context.Context, id, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeAddChannelID", ctx, id, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeAddChannelID indicates an expected call of BridgeAddChannelID.
func (mr *MockDBHandlerMockRecorder) BridgeAddChannelID(ctx, id, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeAddChannelID", reflect.TypeOf((*MockDBHandler)(nil).BridgeAddChannelID), ctx, id, channelID)
}

// BridgeCreate mocks base method.
func (m *MockDBHandler) BridgeCreate(ctx context.Context, b *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeCreate", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeCreate indicates an expected call of BridgeCreate.
func (mr *MockDBHandlerMockRecorder) BridgeCreate(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeCreate", reflect.TypeOf((*MockDBHandler)(nil).BridgeCreate), ctx, b)
}

// BridgeEnd mocks base method.
func (m *MockDBHandler) BridgeEnd(ctx context.Context, id, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeEnd", ctx, id, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeEnd indicates an expected call of BridgeEnd.
func (mr *MockDBHandlerMockRecorder) BridgeEnd(ctx, id, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeEnd", reflect.TypeOf((*MockDBHandler)(nil).BridgeEnd), ctx, id, timestamp)
}

// BridgeGet mocks base method.
func (m *MockDBHandler) BridgeGet(ctx context.Context, id string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGet", ctx, id)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGet indicates an expected call of BridgeGet.
func (mr *MockDBHandlerMockRecorder) BridgeGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGet", reflect.TypeOf((*MockDBHandler)(nil).BridgeGet), ctx, id)
}

// BridgeGetFromCache mocks base method.
func (m *MockDBHandler) BridgeGetFromCache(ctx context.Context, id string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGetFromCache", ctx, id)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGetFromCache indicates an expected call of BridgeGetFromCache.
func (mr *MockDBHandlerMockRecorder) BridgeGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).BridgeGetFromCache), ctx, id)
}

// BridgeGetFromDB mocks base method.
func (m *MockDBHandler) BridgeGetFromDB(ctx context.Context, id string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGetFromDB", ctx, id)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGetFromDB indicates an expected call of BridgeGetFromDB.
func (mr *MockDBHandlerMockRecorder) BridgeGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).BridgeGetFromDB), ctx, id)
}

// BridgeGetUntilTimeout mocks base method.
func (m *MockDBHandler) BridgeGetUntilTimeout(ctx context.Context, id string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGetUntilTimeout", ctx, id)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGetUntilTimeout indicates an expected call of BridgeGetUntilTimeout.
func (mr *MockDBHandlerMockRecorder) BridgeGetUntilTimeout(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGetUntilTimeout", reflect.TypeOf((*MockDBHandler)(nil).BridgeGetUntilTimeout), ctx, id)
}

// BridgeIsExist mocks base method.
func (m *MockDBHandler) BridgeIsExist(id string, timeout time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeIsExist", id, timeout)
	ret0, _ := ret[0].(bool)
	return ret0
}

// BridgeIsExist indicates an expected call of BridgeIsExist.
func (mr *MockDBHandlerMockRecorder) BridgeIsExist(id, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeIsExist", reflect.TypeOf((*MockDBHandler)(nil).BridgeIsExist), id, timeout)
}

// BridgeRemoveChannelID mocks base method.
func (m *MockDBHandler) BridgeRemoveChannelID(ctx context.Context, id, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeRemoveChannelID", ctx, id, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeRemoveChannelID indicates an expected call of BridgeRemoveChannelID.
func (mr *MockDBHandlerMockRecorder) BridgeRemoveChannelID(ctx, id, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeRemoveChannelID", reflect.TypeOf((*MockDBHandler)(nil).BridgeRemoveChannelID), ctx, id, channelID)
}

// BridgeSetToCache mocks base method.
func (m *MockDBHandler) BridgeSetToCache(ctx context.Context, bridge *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeSetToCache", ctx, bridge)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeSetToCache indicates an expected call of BridgeSetToCache.
func (mr *MockDBHandlerMockRecorder) BridgeSetToCache(ctx, bridge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeSetToCache", reflect.TypeOf((*MockDBHandler)(nil).BridgeSetToCache), ctx, bridge)
}

// BridgeUpdateToCache mocks base method.
func (m *MockDBHandler) BridgeUpdateToCache(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeUpdateToCache indicates an expected call of BridgeUpdateToCache.
func (mr *MockDBHandlerMockRecorder) BridgeUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).BridgeUpdateToCache), ctx, id)
}

// CallAddChainedCallID mocks base method.
func (m *MockDBHandler) CallAddChainedCallID(ctx context.Context, id, chainedCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallAddChainedCallID", ctx, id, chainedCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallAddChainedCallID indicates an expected call of CallAddChainedCallID.
func (mr *MockDBHandlerMockRecorder) CallAddChainedCallID(ctx, id, chainedCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallAddChainedCallID", reflect.TypeOf((*MockDBHandler)(nil).CallAddChainedCallID), ctx, id, chainedCallID)
}

// CallAddRecordIDs mocks base method.
func (m *MockDBHandler) CallAddRecordIDs(ctx context.Context, id, recordID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallAddRecordIDs", ctx, id, recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallAddRecordIDs indicates an expected call of CallAddRecordIDs.
func (mr *MockDBHandlerMockRecorder) CallAddRecordIDs(ctx, id, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallAddRecordIDs", reflect.TypeOf((*MockDBHandler)(nil).CallAddRecordIDs), ctx, id, recordID)
}

// CallApplicationAMDGet mocks base method.
func (m *MockDBHandler) CallApplicationAMDGet(ctx context.Context, channelID string) (*callapplication.AMD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallApplicationAMDGet", ctx, channelID)
	ret0, _ := ret[0].(*callapplication.AMD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallApplicationAMDGet indicates an expected call of CallApplicationAMDGet.
func (mr *MockDBHandlerMockRecorder) CallApplicationAMDGet(ctx, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallApplicationAMDGet", reflect.TypeOf((*MockDBHandler)(nil).CallApplicationAMDGet), ctx, channelID)
}

// CallApplicationAMDSet mocks base method.
func (m *MockDBHandler) CallApplicationAMDSet(ctx context.Context, channelID string, app *callapplication.AMD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallApplicationAMDSet", ctx, channelID, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallApplicationAMDSet indicates an expected call of CallApplicationAMDSet.
func (mr *MockDBHandlerMockRecorder) CallApplicationAMDSet(ctx, channelID, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallApplicationAMDSet", reflect.TypeOf((*MockDBHandler)(nil).CallApplicationAMDSet), ctx, channelID, app)
}

// CallCreate mocks base method.
func (m *MockDBHandler) CallCreate(ctx context.Context, call *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallCreate", ctx, call)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallCreate indicates an expected call of CallCreate.
func (mr *MockDBHandlerMockRecorder) CallCreate(ctx, call interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCreate", reflect.TypeOf((*MockDBHandler)(nil).CallCreate), ctx, call)
}

// CallDTMFGet mocks base method.
func (m *MockDBHandler) CallDTMFGet(ctx context.Context, id uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallDTMFGet", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallDTMFGet indicates an expected call of CallDTMFGet.
func (mr *MockDBHandlerMockRecorder) CallDTMFGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallDTMFGet", reflect.TypeOf((*MockDBHandler)(nil).CallDTMFGet), ctx, id)
}

// CallDTMFReset mocks base method.
func (m *MockDBHandler) CallDTMFReset(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallDTMFReset", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallDTMFReset indicates an expected call of CallDTMFReset.
func (mr *MockDBHandlerMockRecorder) CallDTMFReset(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallDTMFReset", reflect.TypeOf((*MockDBHandler)(nil).CallDTMFReset), ctx, id)
}

// CallDTMFSet mocks base method.
func (m *MockDBHandler) CallDTMFSet(ctx context.Context, id uuid.UUID, dtmf string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallDTMFSet", ctx, id, dtmf)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallDTMFSet indicates an expected call of CallDTMFSet.
func (mr *MockDBHandlerMockRecorder) CallDTMFSet(ctx, id, dtmf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallDTMFSet", reflect.TypeOf((*MockDBHandler)(nil).CallDTMFSet), ctx, id, dtmf)
}

// CallGet mocks base method.
func (m *MockDBHandler) CallGet(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGet", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGet indicates an expected call of CallGet.
func (mr *MockDBHandlerMockRecorder) CallGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGet", reflect.TypeOf((*MockDBHandler)(nil).CallGet), ctx, id)
}

// CallGetByChannelID mocks base method.
func (m *MockDBHandler) CallGetByChannelID(ctx context.Context, channelID string) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGetByChannelID", ctx, channelID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGetByChannelID indicates an expected call of CallGetByChannelID.
func (mr *MockDBHandlerMockRecorder) CallGetByChannelID(ctx, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGetByChannelID", reflect.TypeOf((*MockDBHandler)(nil).CallGetByChannelID), ctx, channelID)
}

// CallGetFromCache mocks base method.
func (m *MockDBHandler) CallGetFromCache(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGetFromCache", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGetFromCache indicates an expected call of CallGetFromCache.
func (mr *MockDBHandlerMockRecorder) CallGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).CallGetFromCache), ctx, id)
}

// CallGetFromDB mocks base method.
func (m *MockDBHandler) CallGetFromDB(ctx context.Context, id uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGetFromDB", ctx, id)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGetFromDB indicates an expected call of CallGetFromDB.
func (mr *MockDBHandlerMockRecorder) CallGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).CallGetFromDB), ctx, id)
}

// CallGets mocks base method.
func (m *MockDBHandler) CallGets(ctx context.Context, userID, size uint64, token string) ([]*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGets", ctx, userID, size, token)
	ret0, _ := ret[0].([]*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGets indicates an expected call of CallGets.
func (mr *MockDBHandlerMockRecorder) CallGets(ctx, userID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGets", reflect.TypeOf((*MockDBHandler)(nil).CallGets), ctx, userID, size, token)
}

// CallRemoveChainedCallID mocks base method.
func (m *MockDBHandler) CallRemoveChainedCallID(ctx context.Context, id, chainedCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallRemoveChainedCallID", ctx, id, chainedCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallRemoveChainedCallID indicates an expected call of CallRemoveChainedCallID.
func (mr *MockDBHandlerMockRecorder) CallRemoveChainedCallID(ctx, id, chainedCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallRemoveChainedCallID", reflect.TypeOf((*MockDBHandler)(nil).CallRemoveChainedCallID), ctx, id, chainedCallID)
}

// CallSetAction mocks base method.
func (m *MockDBHandler) CallSetAction(ctx context.Context, id uuid.UUID, action *action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetAction", ctx, id, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetAction indicates an expected call of CallSetAction.
func (mr *MockDBHandlerMockRecorder) CallSetAction(ctx, id, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetAction", reflect.TypeOf((*MockDBHandler)(nil).CallSetAction), ctx, id, action)
}

// CallSetAsteriskID mocks base method.
func (m *MockDBHandler) CallSetAsteriskID(ctx context.Context, id uuid.UUID, asteriskID, tmUpdate string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetAsteriskID", ctx, id, asteriskID, tmUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetAsteriskID indicates an expected call of CallSetAsteriskID.
func (mr *MockDBHandlerMockRecorder) CallSetAsteriskID(ctx, id, asteriskID, tmUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetAsteriskID", reflect.TypeOf((*MockDBHandler)(nil).CallSetAsteriskID), ctx, id, asteriskID, tmUpdate)
}

// CallSetBridgeID mocks base method.
func (m *MockDBHandler) CallSetBridgeID(ctx context.Context, id uuid.UUID, bridgeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetBridgeID", ctx, id, bridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetBridgeID indicates an expected call of CallSetBridgeID.
func (mr *MockDBHandlerMockRecorder) CallSetBridgeID(ctx, id, bridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetBridgeID", reflect.TypeOf((*MockDBHandler)(nil).CallSetBridgeID), ctx, id, bridgeID)
}

// CallSetConferenceID mocks base method.
func (m *MockDBHandler) CallSetConferenceID(ctx context.Context, id, conferenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetConferenceID", ctx, id, conferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetConferenceID indicates an expected call of CallSetConferenceID.
func (mr *MockDBHandlerMockRecorder) CallSetConferenceID(ctx, id, conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetConferenceID", reflect.TypeOf((*MockDBHandler)(nil).CallSetConferenceID), ctx, id, conferenceID)
}

// CallSetFlowID mocks base method.
func (m *MockDBHandler) CallSetFlowID(ctx context.Context, id, flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetFlowID", ctx, id, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetFlowID indicates an expected call of CallSetFlowID.
func (mr *MockDBHandlerMockRecorder) CallSetFlowID(ctx, id, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetFlowID", reflect.TypeOf((*MockDBHandler)(nil).CallSetFlowID), ctx, id, flowID)
}

// CallSetHangup mocks base method.
func (m *MockDBHandler) CallSetHangup(ctx context.Context, id uuid.UUID, reason call.HangupReason, hangupBy call.HangupBy, tmUpdate string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetHangup", ctx, id, reason, hangupBy, tmUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetHangup indicates an expected call of CallSetHangup.
func (mr *MockDBHandlerMockRecorder) CallSetHangup(ctx, id, reason, hangupBy, tmUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetHangup", reflect.TypeOf((*MockDBHandler)(nil).CallSetHangup), ctx, id, reason, hangupBy, tmUpdate)
}

// CallSetMasterCallID mocks base method.
func (m *MockDBHandler) CallSetMasterCallID(ctx context.Context, id, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetMasterCallID", ctx, id, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetMasterCallID indicates an expected call of CallSetMasterCallID.
func (mr *MockDBHandlerMockRecorder) CallSetMasterCallID(ctx, id, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetMasterCallID", reflect.TypeOf((*MockDBHandler)(nil).CallSetMasterCallID), ctx, id, callID)
}

// CallSetRecordID mocks base method.
func (m *MockDBHandler) CallSetRecordID(ctx context.Context, id, recordID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetRecordID", ctx, id, recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetRecordID indicates an expected call of CallSetRecordID.
func (mr *MockDBHandlerMockRecorder) CallSetRecordID(ctx, id, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetRecordID", reflect.TypeOf((*MockDBHandler)(nil).CallSetRecordID), ctx, id, recordID)
}

// CallSetStatus mocks base method.
func (m *MockDBHandler) CallSetStatus(ctx context.Context, id uuid.UUID, status call.Status, tmUpdate string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetStatus", ctx, id, status, tmUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetStatus indicates an expected call of CallSetStatus.
func (mr *MockDBHandlerMockRecorder) CallSetStatus(ctx, id, status, tmUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetStatus", reflect.TypeOf((*MockDBHandler)(nil).CallSetStatus), ctx, id, status, tmUpdate)
}

// CallSetToCache mocks base method.
func (m *MockDBHandler) CallSetToCache(ctx context.Context, call *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetToCache", ctx, call)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetToCache indicates an expected call of CallSetToCache.
func (mr *MockDBHandlerMockRecorder) CallSetToCache(ctx, call interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetToCache", reflect.TypeOf((*MockDBHandler)(nil).CallSetToCache), ctx, call)
}

// CallTXAddChainedCallID mocks base method.
func (m *MockDBHandler) CallTXAddChainedCallID(tx *sql.Tx, id, chainedCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTXAddChainedCallID", tx, id, chainedCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallTXAddChainedCallID indicates an expected call of CallTXAddChainedCallID.
func (mr *MockDBHandlerMockRecorder) CallTXAddChainedCallID(tx, id, chainedCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTXAddChainedCallID", reflect.TypeOf((*MockDBHandler)(nil).CallTXAddChainedCallID), tx, id, chainedCallID)
}

// CallTXFinish mocks base method.
func (m *MockDBHandler) CallTXFinish(tx *sql.Tx, commit bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CallTXFinish", tx, commit)
}

// CallTXFinish indicates an expected call of CallTXFinish.
func (mr *MockDBHandlerMockRecorder) CallTXFinish(tx, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTXFinish", reflect.TypeOf((*MockDBHandler)(nil).CallTXFinish), tx, commit)
}

// CallTXRemoveChainedCallID mocks base method.
func (m *MockDBHandler) CallTXRemoveChainedCallID(tx *sql.Tx, id, chainedCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTXRemoveChainedCallID", tx, id, chainedCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallTXRemoveChainedCallID indicates an expected call of CallTXRemoveChainedCallID.
func (mr *MockDBHandlerMockRecorder) CallTXRemoveChainedCallID(tx, id, chainedCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTXRemoveChainedCallID", reflect.TypeOf((*MockDBHandler)(nil).CallTXRemoveChainedCallID), tx, id, chainedCallID)
}

// CallTXStart mocks base method.
func (m *MockDBHandler) CallTXStart(id uuid.UUID) (*sql.Tx, *call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTXStart", id)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(*call.Call)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CallTXStart indicates an expected call of CallTXStart.
func (mr *MockDBHandlerMockRecorder) CallTXStart(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTXStart", reflect.TypeOf((*MockDBHandler)(nil).CallTXStart), id)
}

// CallUpdateToCache mocks base method.
func (m *MockDBHandler) CallUpdateToCache(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallUpdateToCache indicates an expected call of CallUpdateToCache.
func (mr *MockDBHandlerMockRecorder) CallUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).CallUpdateToCache), ctx, id)
}

// ChannelCreate mocks base method.
func (m *MockDBHandler) ChannelCreate(ctx context.Context, channel *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelCreate", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelCreate indicates an expected call of ChannelCreate.
func (mr *MockDBHandlerMockRecorder) ChannelCreate(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelCreate", reflect.TypeOf((*MockDBHandler)(nil).ChannelCreate), ctx, channel)
}

// ChannelEnd mocks base method.
func (m *MockDBHandler) ChannelEnd(ctx context.Context, id, timestamp string, hangup ari.ChannelCause) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelEnd", ctx, id, timestamp, hangup)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelEnd indicates an expected call of ChannelEnd.
func (mr *MockDBHandlerMockRecorder) ChannelEnd(ctx, id, timestamp, hangup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelEnd", reflect.TypeOf((*MockDBHandler)(nil).ChannelEnd), ctx, id, timestamp, hangup)
}

// ChannelGet mocks base method.
func (m *MockDBHandler) ChannelGet(ctx context.Context, id string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGet", ctx, id)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGet indicates an expected call of ChannelGet.
func (mr *MockDBHandlerMockRecorder) ChannelGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGet", reflect.TypeOf((*MockDBHandler)(nil).ChannelGet), ctx, id)
}

// ChannelGetFromCache mocks base method.
func (m *MockDBHandler) ChannelGetFromCache(ctx context.Context, id string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGetFromCache", ctx, id)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGetFromCache indicates an expected call of ChannelGetFromCache.
func (mr *MockDBHandlerMockRecorder) ChannelGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).ChannelGetFromCache), ctx, id)
}

// ChannelGetFromDB mocks base method.
func (m *MockDBHandler) ChannelGetFromDB(ctx context.Context, id string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGetFromDB", ctx, id)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGetFromDB indicates an expected call of ChannelGetFromDB.
func (mr *MockDBHandlerMockRecorder) ChannelGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).ChannelGetFromDB), ctx, id)
}

// ChannelGetUntilTimeout mocks base method.
func (m *MockDBHandler) ChannelGetUntilTimeout(ctx context.Context, id string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGetUntilTimeout", ctx, id)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGetUntilTimeout indicates an expected call of ChannelGetUntilTimeout.
func (mr *MockDBHandlerMockRecorder) ChannelGetUntilTimeout(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGetUntilTimeout", reflect.TypeOf((*MockDBHandler)(nil).ChannelGetUntilTimeout), ctx, id)
}

// ChannelGetUntilTimeoutWithStasis mocks base method.
func (m *MockDBHandler) ChannelGetUntilTimeoutWithStasis(ctx context.Context, id string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGetUntilTimeoutWithStasis", ctx, id)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGetUntilTimeoutWithStasis indicates an expected call of ChannelGetUntilTimeoutWithStasis.
func (mr *MockDBHandlerMockRecorder) ChannelGetUntilTimeoutWithStasis(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGetUntilTimeoutWithStasis", reflect.TypeOf((*MockDBHandler)(nil).ChannelGetUntilTimeoutWithStasis), ctx, id)
}

// ChannelIsExist mocks base method.
func (m *MockDBHandler) ChannelIsExist(id string, timeout time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelIsExist", id, timeout)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ChannelIsExist indicates an expected call of ChannelIsExist.
func (mr *MockDBHandlerMockRecorder) ChannelIsExist(id, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelIsExist", reflect.TypeOf((*MockDBHandler)(nil).ChannelIsExist), id, timeout)
}

// ChannelSetBridgeID mocks base method.
func (m *MockDBHandler) ChannelSetBridgeID(ctx context.Context, id, bridgeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetBridgeID", ctx, id, bridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetBridgeID indicates an expected call of ChannelSetBridgeID.
func (mr *MockDBHandlerMockRecorder) ChannelSetBridgeID(ctx, id, bridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetBridgeID", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetBridgeID), ctx, id, bridgeID)
}

// ChannelSetData mocks base method.
func (m *MockDBHandler) ChannelSetData(ctx context.Context, id string, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetData", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetData indicates an expected call of ChannelSetData.
func (mr *MockDBHandlerMockRecorder) ChannelSetData(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetData", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetData), ctx, id, data)
}

// ChannelSetDataItem mocks base method.
func (m *MockDBHandler) ChannelSetDataItem(ctx context.Context, id, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetDataItem", ctx, id, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetDataItem indicates an expected call of ChannelSetDataItem.
func (mr *MockDBHandlerMockRecorder) ChannelSetDataItem(ctx, id, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetDataItem", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetDataItem), ctx, id, key, value)
}

// ChannelSetDirection mocks base method.
func (m *MockDBHandler) ChannelSetDirection(ctx context.Context, id string, direction channel.Direction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetDirection", ctx, id, direction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetDirection indicates an expected call of ChannelSetDirection.
func (mr *MockDBHandlerMockRecorder) ChannelSetDirection(ctx, id, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetDirection", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetDirection), ctx, id, direction)
}

// ChannelSetPlaybackID mocks base method.
func (m *MockDBHandler) ChannelSetPlaybackID(ctx context.Context, id, playbackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetPlaybackID", ctx, id, playbackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetPlaybackID indicates an expected call of ChannelSetPlaybackID.
func (mr *MockDBHandlerMockRecorder) ChannelSetPlaybackID(ctx, id, playbackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetPlaybackID", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetPlaybackID), ctx, id, playbackID)
}

// ChannelSetSIPCallID mocks base method.
func (m *MockDBHandler) ChannelSetSIPCallID(ctx context.Context, id, sipID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetSIPCallID", ctx, id, sipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetSIPCallID indicates an expected call of ChannelSetSIPCallID.
func (mr *MockDBHandlerMockRecorder) ChannelSetSIPCallID(ctx, id, sipID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetSIPCallID", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetSIPCallID), ctx, id, sipID)
}

// ChannelSetSIPTransport mocks base method.
func (m *MockDBHandler) ChannelSetSIPTransport(ctx context.Context, id string, transport channel.SIPTransport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetSIPTransport", ctx, id, transport)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetSIPTransport indicates an expected call of ChannelSetSIPTransport.
func (mr *MockDBHandlerMockRecorder) ChannelSetSIPTransport(ctx, id, transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetSIPTransport", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetSIPTransport), ctx, id, transport)
}

// ChannelSetStasis mocks base method.
func (m *MockDBHandler) ChannelSetStasis(ctx context.Context, id, stasis string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetStasis", ctx, id, stasis)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetStasis indicates an expected call of ChannelSetStasis.
func (mr *MockDBHandlerMockRecorder) ChannelSetStasis(ctx, id, stasis interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetStasis", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetStasis), ctx, id, stasis)
}

// ChannelSetStasisNameAndStasisData mocks base method.
func (m *MockDBHandler) ChannelSetStasisNameAndStasisData(ctx context.Context, id, stasisName string, stasisData map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetStasisNameAndStasisData", ctx, id, stasisName, stasisData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetStasisNameAndStasisData indicates an expected call of ChannelSetStasisNameAndStasisData.
func (mr *MockDBHandlerMockRecorder) ChannelSetStasisNameAndStasisData(ctx, id, stasisName, stasisData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetStasisNameAndStasisData", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetStasisNameAndStasisData), ctx, id, stasisName, stasisData)
}

// ChannelSetState mocks base method.
func (m *MockDBHandler) ChannelSetState(ctx context.Context, id, timestamp string, state ari.ChannelState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetState", ctx, id, timestamp, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetState indicates an expected call of ChannelSetState.
func (mr *MockDBHandlerMockRecorder) ChannelSetState(ctx, id, timestamp, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetState", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetState), ctx, id, timestamp, state)
}

// ChannelSetToCache mocks base method.
func (m *MockDBHandler) ChannelSetToCache(ctx context.Context, channel *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetToCache", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetToCache indicates an expected call of ChannelSetToCache.
func (mr *MockDBHandlerMockRecorder) ChannelSetToCache(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetToCache", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetToCache), ctx, channel)
}

// ChannelSetType mocks base method.
func (m *MockDBHandler) ChannelSetType(ctx context.Context, id string, cType channel.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetType", ctx, id, cType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetType indicates an expected call of ChannelSetType.
func (mr *MockDBHandlerMockRecorder) ChannelSetType(ctx, id, cType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetType", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetType), ctx, id, cType)
}

// ChannelUpdateToCache mocks base method.
func (m *MockDBHandler) ChannelUpdateToCache(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelUpdateToCache indicates an expected call of ChannelUpdateToCache.
func (mr *MockDBHandlerMockRecorder) ChannelUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).ChannelUpdateToCache), ctx, id)
}

// ConfbridgeAddChannelCallID mocks base method.
func (m *MockDBHandler) ConfbridgeAddChannelCallID(ctx context.Context, id uuid.UUID, channelID string, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeAddChannelCallID", ctx, id, channelID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeAddChannelCallID indicates an expected call of ConfbridgeAddChannelCallID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeAddChannelCallID(ctx, id, channelID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeAddChannelCallID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeAddChannelCallID), ctx, id, channelID, callID)
}

// ConfbridgeAddRecordIDs mocks base method.
func (m *MockDBHandler) ConfbridgeAddRecordIDs(ctx context.Context, id, recordID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeAddRecordIDs", ctx, id, recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeAddRecordIDs indicates an expected call of ConfbridgeAddRecordIDs.
func (mr *MockDBHandlerMockRecorder) ConfbridgeAddRecordIDs(ctx, id, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeAddRecordIDs", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeAddRecordIDs), ctx, id, recordID)
}

// ConfbridgeCreate mocks base method.
func (m *MockDBHandler) ConfbridgeCreate(ctx context.Context, cb *confbridge.Confbridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeCreate", ctx, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeCreate indicates an expected call of ConfbridgeCreate.
func (mr *MockDBHandlerMockRecorder) ConfbridgeCreate(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeCreate", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeCreate), ctx, cb)
}

// ConfbridgeDelete mocks base method.
func (m *MockDBHandler) ConfbridgeDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeDelete indicates an expected call of ConfbridgeDelete.
func (mr *MockDBHandlerMockRecorder) ConfbridgeDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeDelete", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeDelete), ctx, id)
}

// ConfbridgeGet mocks base method.
func (m *MockDBHandler) ConfbridgeGet(ctx context.Context, id uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeGet", ctx, id)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfbridgeGet indicates an expected call of ConfbridgeGet.
func (mr *MockDBHandlerMockRecorder) ConfbridgeGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeGet", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeGet), ctx, id)
}

// ConfbridgeGetByBridgeID mocks base method.
func (m *MockDBHandler) ConfbridgeGetByBridgeID(ctx context.Context, bridgeID string) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeGetByBridgeID", ctx, bridgeID)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfbridgeGetByBridgeID indicates an expected call of ConfbridgeGetByBridgeID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeGetByBridgeID(ctx, bridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeGetByBridgeID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeGetByBridgeID), ctx, bridgeID)
}

// ConfbridgeGetFromCache mocks base method.
func (m *MockDBHandler) ConfbridgeGetFromCache(ctx context.Context, id uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeGetFromCache", ctx, id)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfbridgeGetFromCache indicates an expected call of ConfbridgeGetFromCache.
func (mr *MockDBHandlerMockRecorder) ConfbridgeGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeGetFromCache), ctx, id)
}

// ConfbridgeGetFromDB mocks base method.
func (m *MockDBHandler) ConfbridgeGetFromDB(ctx context.Context, id uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeGetFromDB", ctx, id)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfbridgeGetFromDB indicates an expected call of ConfbridgeGetFromDB.
func (mr *MockDBHandlerMockRecorder) ConfbridgeGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeGetFromDB), ctx, id)
}

// ConfbridgeRemoveChannelCallID mocks base method.
func (m *MockDBHandler) ConfbridgeRemoveChannelCallID(ctx context.Context, id uuid.UUID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeRemoveChannelCallID", ctx, id, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeRemoveChannelCallID indicates an expected call of ConfbridgeRemoveChannelCallID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeRemoveChannelCallID(ctx, id, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeRemoveChannelCallID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeRemoveChannelCallID), ctx, id, channelID)
}

// ConfbridgeSetBridgeID mocks base method.
func (m *MockDBHandler) ConfbridgeSetBridgeID(ctx context.Context, id uuid.UUID, bridgeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeSetBridgeID", ctx, id, bridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeSetBridgeID indicates an expected call of ConfbridgeSetBridgeID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeSetBridgeID(ctx, id, bridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeSetBridgeID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeSetBridgeID), ctx, id, bridgeID)
}

// ConfbridgeSetRecordID mocks base method.
func (m *MockDBHandler) ConfbridgeSetRecordID(ctx context.Context, id, recordID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeSetRecordID", ctx, id, recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeSetRecordID indicates an expected call of ConfbridgeSetRecordID.
func (mr *MockDBHandlerMockRecorder) ConfbridgeSetRecordID(ctx, id, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeSetRecordID", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeSetRecordID), ctx, id, recordID)
}

// ConfbridgeSetToCache mocks base method.
func (m *MockDBHandler) ConfbridgeSetToCache(ctx context.Context, data *confbridge.Confbridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeSetToCache", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeSetToCache indicates an expected call of ConfbridgeSetToCache.
func (mr *MockDBHandlerMockRecorder) ConfbridgeSetToCache(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeSetToCache", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeSetToCache), ctx, data)
}

// ConfbridgeUpdateToCache mocks base method.
func (m *MockDBHandler) ConfbridgeUpdateToCache(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfbridgeUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfbridgeUpdateToCache indicates an expected call of ConfbridgeUpdateToCache.
func (mr *MockDBHandlerMockRecorder) ConfbridgeUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfbridgeUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).ConfbridgeUpdateToCache), ctx, id)
}

// ExternalMediaDelete mocks base method.
func (m *MockDBHandler) ExternalMediaDelete(ctx context.Context, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaDelete", ctx, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalMediaDelete indicates an expected call of ExternalMediaDelete.
func (mr *MockDBHandlerMockRecorder) ExternalMediaDelete(ctx, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaDelete", reflect.TypeOf((*MockDBHandler)(nil).ExternalMediaDelete), ctx, callID)
}

// ExternalMediaGet mocks base method.
func (m *MockDBHandler) ExternalMediaGet(ctx context.Context, callID uuid.UUID) (*externalmedia.ExternalMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaGet", ctx, callID)
	ret0, _ := ret[0].(*externalmedia.ExternalMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalMediaGet indicates an expected call of ExternalMediaGet.
func (mr *MockDBHandlerMockRecorder) ExternalMediaGet(ctx, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaGet", reflect.TypeOf((*MockDBHandler)(nil).ExternalMediaGet), ctx, callID)
}

// ExternalMediaSet mocks base method.
func (m *MockDBHandler) ExternalMediaSet(ctx context.Context, callID uuid.UUID, data *externalmedia.ExternalMedia) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalMediaSet", ctx, callID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalMediaSet indicates an expected call of ExternalMediaSet.
func (mr *MockDBHandlerMockRecorder) ExternalMediaSet(ctx, callID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalMediaSet", reflect.TypeOf((*MockDBHandler)(nil).ExternalMediaSet), ctx, callID, data)
}

// RecordingCreate mocks base method.
func (m *MockDBHandler) RecordingCreate(ctx context.Context, c *recording.Recording) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingCreate", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordingCreate indicates an expected call of RecordingCreate.
func (mr *MockDBHandlerMockRecorder) RecordingCreate(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingCreate", reflect.TypeOf((*MockDBHandler)(nil).RecordingCreate), ctx, c)
}

// RecordingGet mocks base method.
func (m *MockDBHandler) RecordingGet(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGet", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGet indicates an expected call of RecordingGet.
func (mr *MockDBHandlerMockRecorder) RecordingGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGet", reflect.TypeOf((*MockDBHandler)(nil).RecordingGet), ctx, id)
}

// RecordingGetByFilename mocks base method.
func (m *MockDBHandler) RecordingGetByFilename(ctx context.Context, filename string) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGetByFilename", ctx, filename)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGetByFilename indicates an expected call of RecordingGetByFilename.
func (mr *MockDBHandlerMockRecorder) RecordingGetByFilename(ctx, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGetByFilename", reflect.TypeOf((*MockDBHandler)(nil).RecordingGetByFilename), ctx, filename)
}

// RecordingGetFromCache mocks base method.
func (m *MockDBHandler) RecordingGetFromCache(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGetFromCache", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGetFromCache indicates an expected call of RecordingGetFromCache.
func (mr *MockDBHandlerMockRecorder) RecordingGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).RecordingGetFromCache), ctx, id)
}

// RecordingGetFromDB mocks base method.
func (m *MockDBHandler) RecordingGetFromDB(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGetFromDB", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGetFromDB indicates an expected call of RecordingGetFromDB.
func (mr *MockDBHandlerMockRecorder) RecordingGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).RecordingGetFromDB), ctx, id)
}

// RecordingGets mocks base method.
func (m *MockDBHandler) RecordingGets(ctx context.Context, userID, size uint64, token string) ([]*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingGets", ctx, userID, size, token)
	ret0, _ := ret[0].([]*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordingGets indicates an expected call of RecordingGets.
func (mr *MockDBHandlerMockRecorder) RecordingGets(ctx, userID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingGets", reflect.TypeOf((*MockDBHandler)(nil).RecordingGets), ctx, userID, size, token)
}

// RecordingSetStatus mocks base method.
func (m *MockDBHandler) RecordingSetStatus(ctx context.Context, id uuid.UUID, status recording.Status, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingSetStatus", ctx, id, status, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordingSetStatus indicates an expected call of RecordingSetStatus.
func (mr *MockDBHandlerMockRecorder) RecordingSetStatus(ctx, id, status, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingSetStatus", reflect.TypeOf((*MockDBHandler)(nil).RecordingSetStatus), ctx, id, status, timestamp)
}

// RecordingSetToCache mocks base method.
func (m *MockDBHandler) RecordingSetToCache(ctx context.Context, r *recording.Recording) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingSetToCache", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordingSetToCache indicates an expected call of RecordingSetToCache.
func (mr *MockDBHandlerMockRecorder) RecordingSetToCache(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingSetToCache", reflect.TypeOf((*MockDBHandler)(nil).RecordingSetToCache), ctx, r)
}

// RecordingUpdateToCache mocks base method.
func (m *MockDBHandler) RecordingUpdateToCache(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordingUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordingUpdateToCache indicates an expected call of RecordingUpdateToCache.
func (mr *MockDBHandlerMockRecorder) RecordingUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordingUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).RecordingUpdateToCache), ctx, id)
}
