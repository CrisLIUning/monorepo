// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/voipbin/bin-manager/number-manager.git/models"
	reflect "reflect"
)

// MockDBHandler is a mock of DBHandler interface
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// NumberCreate mocks base method
func (m *MockDBHandler) NumberCreate(ctx context.Context, n *models.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberCreate", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberCreate indicates an expected call of NumberCreate
func (mr *MockDBHandlerMockRecorder) NumberCreate(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberCreate", reflect.TypeOf((*MockDBHandler)(nil).NumberCreate), ctx, n)
}

// NumberDelete mocks base method
func (m *MockDBHandler) NumberDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberDelete indicates an expected call of NumberDelete
func (mr *MockDBHandlerMockRecorder) NumberDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberDelete", reflect.TypeOf((*MockDBHandler)(nil).NumberDelete), ctx, id)
}

// NumberGet mocks base method
func (m *MockDBHandler) NumberGet(ctx context.Context, id uuid.UUID) (*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGet", ctx, id)
	ret0, _ := ret[0].(*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGet indicates an expected call of NumberGet
func (mr *MockDBHandlerMockRecorder) NumberGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGet", reflect.TypeOf((*MockDBHandler)(nil).NumberGet), ctx, id)
}

// NumberGetByNumber mocks base method
func (m *MockDBHandler) NumberGetByNumber(ctx context.Context, numb string) (*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGetByNumber", ctx, numb)
	ret0, _ := ret[0].(*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGetByNumber indicates an expected call of NumberGetByNumber
func (mr *MockDBHandlerMockRecorder) NumberGetByNumber(ctx, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGetByNumber", reflect.TypeOf((*MockDBHandler)(nil).NumberGetByNumber), ctx, numb)
}

// NumberGetFromCache mocks base method
func (m *MockDBHandler) NumberGetFromCache(ctx context.Context, id uuid.UUID) (*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGetFromCache", ctx, id)
	ret0, _ := ret[0].(*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGetFromCache indicates an expected call of NumberGetFromCache
func (mr *MockDBHandlerMockRecorder) NumberGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).NumberGetFromCache), ctx, id)
}

// NumberGetFromCacheByNumber mocks base method
func (m *MockDBHandler) NumberGetFromCacheByNumber(ctx context.Context, numb string) (*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGetFromCacheByNumber", ctx, numb)
	ret0, _ := ret[0].(*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGetFromCacheByNumber indicates an expected call of NumberGetFromCacheByNumber
func (mr *MockDBHandlerMockRecorder) NumberGetFromCacheByNumber(ctx, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGetFromCacheByNumber", reflect.TypeOf((*MockDBHandler)(nil).NumberGetFromCacheByNumber), ctx, numb)
}

// NumberGetFromDB mocks base method
func (m *MockDBHandler) NumberGetFromDB(ctx context.Context, id uuid.UUID) (*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGetFromDB", ctx, id)
	ret0, _ := ret[0].(*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGetFromDB indicates an expected call of NumberGetFromDB
func (mr *MockDBHandlerMockRecorder) NumberGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).NumberGetFromDB), ctx, id)
}

// NumberGetFromDBByNumber mocks base method
func (m *MockDBHandler) NumberGetFromDBByNumber(ctx context.Context, numb string) (*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGetFromDBByNumber", ctx, numb)
	ret0, _ := ret[0].(*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGetFromDBByNumber indicates an expected call of NumberGetFromDBByNumber
func (mr *MockDBHandlerMockRecorder) NumberGetFromDBByNumber(ctx, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGetFromDBByNumber", reflect.TypeOf((*MockDBHandler)(nil).NumberGetFromDBByNumber), ctx, numb)
}

// NumberGets mocks base method
func (m *MockDBHandler) NumberGets(ctx context.Context, userID, size uint64, token string) ([]*models.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberGets", ctx, userID, size, token)
	ret0, _ := ret[0].([]*models.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberGets indicates an expected call of NumberGets
func (mr *MockDBHandlerMockRecorder) NumberGets(ctx, userID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberGets", reflect.TypeOf((*MockDBHandler)(nil).NumberGets), ctx, userID, size, token)
}

// NumberSetToCache mocks base method
func (m *MockDBHandler) NumberSetToCache(ctx context.Context, num *models.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberSetToCache", ctx, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberSetToCache indicates an expected call of NumberSetToCache
func (mr *MockDBHandlerMockRecorder) NumberSetToCache(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberSetToCache", reflect.TypeOf((*MockDBHandler)(nil).NumberSetToCache), ctx, num)
}

// NumberSetToCacheByNumber mocks base method
func (m *MockDBHandler) NumberSetToCacheByNumber(ctx context.Context, num *models.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberSetToCacheByNumber", ctx, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberSetToCacheByNumber indicates an expected call of NumberSetToCacheByNumber
func (mr *MockDBHandlerMockRecorder) NumberSetToCacheByNumber(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberSetToCacheByNumber", reflect.TypeOf((*MockDBHandler)(nil).NumberSetToCacheByNumber), ctx, num)
}

// NumberUpdateToCache mocks base method
func (m *MockDBHandler) NumberUpdateToCache(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberUpdateToCache indicates an expected call of NumberUpdateToCache
func (mr *MockDBHandlerMockRecorder) NumberUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).NumberUpdateToCache), ctx, id)
}

// NumberUpdateToCacheByNumber mocks base method
func (m *MockDBHandler) NumberUpdateToCacheByNumber(ctx context.Context, num string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberUpdateToCacheByNumber", ctx, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberUpdateToCacheByNumber indicates an expected call of NumberUpdateToCacheByNumber
func (mr *MockDBHandlerMockRecorder) NumberUpdateToCacheByNumber(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberUpdateToCacheByNumber", reflect.TypeOf((*MockDBHandler)(nil).NumberUpdateToCacheByNumber), ctx, num)
}
