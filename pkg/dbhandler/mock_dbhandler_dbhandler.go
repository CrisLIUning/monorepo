// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	conference "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conference"
	conferenceconfbridge "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conferenceconfbridge"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// ConferenceAddCallID mocks base method.
func (m *MockDBHandler) ConferenceAddCallID(ctx context.Context, id, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceAddCallID", ctx, id, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceAddCallID indicates an expected call of ConferenceAddCallID.
func (mr *MockDBHandlerMockRecorder) ConferenceAddCallID(ctx, id, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceAddCallID", reflect.TypeOf((*MockDBHandler)(nil).ConferenceAddCallID), ctx, id, callID)
}

// ConferenceAddRecordIDs mocks base method.
func (m *MockDBHandler) ConferenceAddRecordIDs(ctx context.Context, id, recordID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceAddRecordIDs", ctx, id, recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceAddRecordIDs indicates an expected call of ConferenceAddRecordIDs.
func (mr *MockDBHandlerMockRecorder) ConferenceAddRecordIDs(ctx, id, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceAddRecordIDs", reflect.TypeOf((*MockDBHandler)(nil).ConferenceAddRecordIDs), ctx, id, recordID)
}

// ConferenceConfbridgeGet mocks base method.
func (m *MockDBHandler) ConferenceConfbridgeGet(ctx context.Context, confbridgeID uuid.UUID) (*conferenceconfbridge.ConferenceConfbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceConfbridgeGet", ctx, confbridgeID)
	ret0, _ := ret[0].(*conferenceconfbridge.ConferenceConfbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceConfbridgeGet indicates an expected call of ConferenceConfbridgeGet.
func (mr *MockDBHandlerMockRecorder) ConferenceConfbridgeGet(ctx, confbridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceConfbridgeGet", reflect.TypeOf((*MockDBHandler)(nil).ConferenceConfbridgeGet), ctx, confbridgeID)
}

// ConferenceConfbridgeSet mocks base method.
func (m *MockDBHandler) ConferenceConfbridgeSet(ctx context.Context, data *conferenceconfbridge.ConferenceConfbridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceConfbridgeSet", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceConfbridgeSet indicates an expected call of ConferenceConfbridgeSet.
func (mr *MockDBHandlerMockRecorder) ConferenceConfbridgeSet(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceConfbridgeSet", reflect.TypeOf((*MockDBHandler)(nil).ConferenceConfbridgeSet), ctx, data)
}

// ConferenceCreate mocks base method.
func (m *MockDBHandler) ConferenceCreate(ctx context.Context, cf *conference.Conference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceCreate", ctx, cf)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceCreate indicates an expected call of ConferenceCreate.
func (mr *MockDBHandlerMockRecorder) ConferenceCreate(ctx, cf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceCreate", reflect.TypeOf((*MockDBHandler)(nil).ConferenceCreate), ctx, cf)
}

// ConferenceEnd mocks base method.
func (m *MockDBHandler) ConferenceEnd(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceEnd", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceEnd indicates an expected call of ConferenceEnd.
func (mr *MockDBHandlerMockRecorder) ConferenceEnd(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceEnd", reflect.TypeOf((*MockDBHandler)(nil).ConferenceEnd), ctx, id)
}

// ConferenceGet mocks base method.
func (m *MockDBHandler) ConferenceGet(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGet", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGet indicates an expected call of ConferenceGet.
func (mr *MockDBHandlerMockRecorder) ConferenceGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGet", reflect.TypeOf((*MockDBHandler)(nil).ConferenceGet), ctx, id)
}

// ConferenceGetFromCache mocks base method.
func (m *MockDBHandler) ConferenceGetFromCache(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGetFromCache", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGetFromCache indicates an expected call of ConferenceGetFromCache.
func (mr *MockDBHandlerMockRecorder) ConferenceGetFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).ConferenceGetFromCache), ctx, id)
}

// ConferenceGetFromDB mocks base method.
func (m *MockDBHandler) ConferenceGetFromDB(ctx context.Context, id uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGetFromDB", ctx, id)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGetFromDB indicates an expected call of ConferenceGetFromDB.
func (mr *MockDBHandlerMockRecorder) ConferenceGetFromDB(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).ConferenceGetFromDB), ctx, id)
}

// ConferenceGets mocks base method.
func (m *MockDBHandler) ConferenceGets(ctx context.Context, userID, size uint64, token string) ([]*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGets", ctx, userID, size, token)
	ret0, _ := ret[0].([]*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGets indicates an expected call of ConferenceGets.
func (mr *MockDBHandlerMockRecorder) ConferenceGets(ctx, userID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGets", reflect.TypeOf((*MockDBHandler)(nil).ConferenceGets), ctx, userID, size, token)
}

// ConferenceGetsWithType mocks base method.
func (m *MockDBHandler) ConferenceGetsWithType(ctx context.Context, userID uint64, confType conference.Type, size uint64, token string) ([]*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGetsWithType", ctx, userID, confType, size, token)
	ret0, _ := ret[0].([]*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGetsWithType indicates an expected call of ConferenceGetsWithType.
func (mr *MockDBHandlerMockRecorder) ConferenceGetsWithType(ctx, userID, confType, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGetsWithType", reflect.TypeOf((*MockDBHandler)(nil).ConferenceGetsWithType), ctx, userID, confType, size, token)
}

// ConferenceRemoveCallID mocks base method.
func (m *MockDBHandler) ConferenceRemoveCallID(ctx context.Context, id, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceRemoveCallID", ctx, id, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceRemoveCallID indicates an expected call of ConferenceRemoveCallID.
func (mr *MockDBHandlerMockRecorder) ConferenceRemoveCallID(ctx, id, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceRemoveCallID", reflect.TypeOf((*MockDBHandler)(nil).ConferenceRemoveCallID), ctx, id, callID)
}

// ConferenceSet mocks base method.
func (m *MockDBHandler) ConferenceSet(ctx context.Context, id uuid.UUID, name, detail string, timeout int, webhookURI string, preActions, postActions []action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSet", ctx, id, name, detail, timeout, webhookURI, preActions, postActions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSet indicates an expected call of ConferenceSet.
func (mr *MockDBHandlerMockRecorder) ConferenceSet(ctx, id, name, detail, timeout, webhookURI, preActions, postActions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSet", reflect.TypeOf((*MockDBHandler)(nil).ConferenceSet), ctx, id, name, detail, timeout, webhookURI, preActions, postActions)
}

// ConferenceSetData mocks base method.
func (m *MockDBHandler) ConferenceSetData(ctx context.Context, id uuid.UUID, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSetData", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSetData indicates an expected call of ConferenceSetData.
func (mr *MockDBHandlerMockRecorder) ConferenceSetData(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSetData", reflect.TypeOf((*MockDBHandler)(nil).ConferenceSetData), ctx, id, data)
}

// ConferenceSetRecordID mocks base method.
func (m *MockDBHandler) ConferenceSetRecordID(ctx context.Context, id, recordID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSetRecordID", ctx, id, recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSetRecordID indicates an expected call of ConferenceSetRecordID.
func (mr *MockDBHandlerMockRecorder) ConferenceSetRecordID(ctx, id, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSetRecordID", reflect.TypeOf((*MockDBHandler)(nil).ConferenceSetRecordID), ctx, id, recordID)
}

// ConferenceSetStatus mocks base method.
func (m *MockDBHandler) ConferenceSetStatus(ctx context.Context, id uuid.UUID, status conference.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSetStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSetStatus indicates an expected call of ConferenceSetStatus.
func (mr *MockDBHandlerMockRecorder) ConferenceSetStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSetStatus", reflect.TypeOf((*MockDBHandler)(nil).ConferenceSetStatus), ctx, id, status)
}

// ConferenceSetToCache mocks base method.
func (m *MockDBHandler) ConferenceSetToCache(ctx context.Context, conference *conference.Conference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSetToCache", ctx, conference)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSetToCache indicates an expected call of ConferenceSetToCache.
func (mr *MockDBHandlerMockRecorder) ConferenceSetToCache(ctx, conference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSetToCache", reflect.TypeOf((*MockDBHandler)(nil).ConferenceSetToCache), ctx, conference)
}

// ConferenceUpdateToCache mocks base method.
func (m *MockDBHandler) ConferenceUpdateToCache(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceUpdateToCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceUpdateToCache indicates an expected call of ConferenceUpdateToCache.
func (mr *MockDBHandlerMockRecorder) ConferenceUpdateToCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).ConferenceUpdateToCache), ctx, id)
}
