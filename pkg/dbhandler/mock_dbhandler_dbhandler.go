// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
	queue "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queue"
	queuecall "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecall"
	queuecallreference "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecallreference"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// QueueAddQueueCallID mocks base method.
func (m *MockDBHandler) QueueAddQueueCallID(ctx context.Context, id, queueCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueAddQueueCallID", ctx, id, queueCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueAddQueueCallID indicates an expected call of QueueAddQueueCallID.
func (mr *MockDBHandlerMockRecorder) QueueAddQueueCallID(ctx, id, queueCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueAddQueueCallID", reflect.TypeOf((*MockDBHandler)(nil).QueueAddQueueCallID), ctx, id, queueCallID)
}

// QueueCreate mocks base method.
func (m *MockDBHandler) QueueCreate(ctx context.Context, a *queue.Queue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCreate", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueCreate indicates an expected call of QueueCreate.
func (mr *MockDBHandlerMockRecorder) QueueCreate(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCreate", reflect.TypeOf((*MockDBHandler)(nil).QueueCreate), ctx, a)
}

// QueueDelete mocks base method.
func (m *MockDBHandler) QueueDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueDelete indicates an expected call of QueueDelete.
func (mr *MockDBHandlerMockRecorder) QueueDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDelete", reflect.TypeOf((*MockDBHandler)(nil).QueueDelete), ctx, id)
}

// QueueGet mocks base method.
func (m *MockDBHandler) QueueGet(ctx context.Context, id uuid.UUID) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueGet", ctx, id)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueGet indicates an expected call of QueueGet.
func (mr *MockDBHandlerMockRecorder) QueueGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueGet", reflect.TypeOf((*MockDBHandler)(nil).QueueGet), ctx, id)
}

// QueueGets mocks base method.
func (m *MockDBHandler) QueueGets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueGets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueGets indicates an expected call of QueueGets.
func (mr *MockDBHandlerMockRecorder) QueueGets(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueGets", reflect.TypeOf((*MockDBHandler)(nil).QueueGets), ctx, customerID, size, token)
}

// QueueIncreaseTotalAbandonedCount mocks base method.
func (m *MockDBHandler) QueueIncreaseTotalAbandonedCount(ctx context.Context, id, queueCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueIncreaseTotalAbandonedCount", ctx, id, queueCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueIncreaseTotalAbandonedCount indicates an expected call of QueueIncreaseTotalAbandonedCount.
func (mr *MockDBHandlerMockRecorder) QueueIncreaseTotalAbandonedCount(ctx, id, queueCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueIncreaseTotalAbandonedCount", reflect.TypeOf((*MockDBHandler)(nil).QueueIncreaseTotalAbandonedCount), ctx, id, queueCallID)
}

// QueueIncreaseTotalServicedCount mocks base method.
func (m *MockDBHandler) QueueIncreaseTotalServicedCount(ctx context.Context, id, queueCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueIncreaseTotalServicedCount", ctx, id, queueCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueIncreaseTotalServicedCount indicates an expected call of QueueIncreaseTotalServicedCount.
func (mr *MockDBHandlerMockRecorder) QueueIncreaseTotalServicedCount(ctx, id, queueCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueIncreaseTotalServicedCount", reflect.TypeOf((*MockDBHandler)(nil).QueueIncreaseTotalServicedCount), ctx, id, queueCallID)
}

// QueueRemoveServiceQueueCall mocks base method.
func (m *MockDBHandler) QueueRemoveServiceQueueCall(ctx context.Context, id, queueCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueRemoveServiceQueueCall", ctx, id, queueCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueRemoveServiceQueueCall indicates an expected call of QueueRemoveServiceQueueCall.
func (mr *MockDBHandlerMockRecorder) QueueRemoveServiceQueueCall(ctx, id, queueCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueRemoveServiceQueueCall", reflect.TypeOf((*MockDBHandler)(nil).QueueRemoveServiceQueueCall), ctx, id, queueCallID)
}

// QueueSetBasicInfo mocks base method.
func (m *MockDBHandler) QueueSetBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSetBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSetBasicInfo indicates an expected call of QueueSetBasicInfo.
func (mr *MockDBHandlerMockRecorder) QueueSetBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSetBasicInfo", reflect.TypeOf((*MockDBHandler)(nil).QueueSetBasicInfo), ctx, id, name, detail)
}

// QueueSetExecute mocks base method.
func (m *MockDBHandler) QueueSetExecute(ctx context.Context, id uuid.UUID, execute queue.Execute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSetExecute", ctx, id, execute)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSetExecute indicates an expected call of QueueSetExecute.
func (mr *MockDBHandlerMockRecorder) QueueSetExecute(ctx, id, execute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSetExecute", reflect.TypeOf((*MockDBHandler)(nil).QueueSetExecute), ctx, id, execute)
}

// QueueSetRoutingMethod mocks base method.
func (m *MockDBHandler) QueueSetRoutingMethod(ctx context.Context, id uuid.UUID, routingMethod queue.RoutingMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSetRoutingMethod", ctx, id, routingMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSetRoutingMethod indicates an expected call of QueueSetRoutingMethod.
func (mr *MockDBHandlerMockRecorder) QueueSetRoutingMethod(ctx, id, routingMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSetRoutingMethod", reflect.TypeOf((*MockDBHandler)(nil).QueueSetRoutingMethod), ctx, id, routingMethod)
}

// QueueSetTagIDs mocks base method.
func (m *MockDBHandler) QueueSetTagIDs(ctx context.Context, id uuid.UUID, tagIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSetTagIDs", ctx, id, tagIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSetTagIDs indicates an expected call of QueueSetTagIDs.
func (mr *MockDBHandlerMockRecorder) QueueSetTagIDs(ctx, id, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSetTagIDs", reflect.TypeOf((*MockDBHandler)(nil).QueueSetTagIDs), ctx, id, tagIDs)
}

// QueueSetWaitActionsAndTimeouts mocks base method.
func (m *MockDBHandler) QueueSetWaitActionsAndTimeouts(ctx context.Context, id uuid.UUID, waitActions []action.Action, waitTimeout, serviceTimeout int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSetWaitActionsAndTimeouts", ctx, id, waitActions, waitTimeout, serviceTimeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSetWaitActionsAndTimeouts indicates an expected call of QueueSetWaitActionsAndTimeouts.
func (mr *MockDBHandlerMockRecorder) QueueSetWaitActionsAndTimeouts(ctx, id, waitActions, waitTimeout, serviceTimeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSetWaitActionsAndTimeouts", reflect.TypeOf((*MockDBHandler)(nil).QueueSetWaitActionsAndTimeouts), ctx, id, waitActions, waitTimeout, serviceTimeout)
}

// QueuecallCreate mocks base method.
func (m *MockDBHandler) QueuecallCreate(ctx context.Context, a *queuecall.Queuecall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallCreate", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallCreate indicates an expected call of QueuecallCreate.
func (mr *MockDBHandlerMockRecorder) QueuecallCreate(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallCreate", reflect.TypeOf((*MockDBHandler)(nil).QueuecallCreate), ctx, a)
}

// QueuecallDelete mocks base method.
func (m *MockDBHandler) QueuecallDelete(ctx context.Context, id uuid.UUID, status queuecall.Status, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallDelete", ctx, id, status, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallDelete indicates an expected call of QueuecallDelete.
func (mr *MockDBHandlerMockRecorder) QueuecallDelete(ctx, id, status, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallDelete", reflect.TypeOf((*MockDBHandler)(nil).QueuecallDelete), ctx, id, status, timestamp)
}

// QueuecallGet mocks base method.
func (m *MockDBHandler) QueuecallGet(ctx context.Context, id uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallGet", ctx, id)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueuecallGet indicates an expected call of QueuecallGet.
func (mr *MockDBHandlerMockRecorder) QueuecallGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallGet", reflect.TypeOf((*MockDBHandler)(nil).QueuecallGet), ctx, id)
}

// QueuecallGetsByCustomerID mocks base method.
func (m *MockDBHandler) QueuecallGetsByCustomerID(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallGetsByCustomerID", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueuecallGetsByCustomerID indicates an expected call of QueuecallGetsByCustomerID.
func (mr *MockDBHandlerMockRecorder) QueuecallGetsByCustomerID(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallGetsByCustomerID", reflect.TypeOf((*MockDBHandler)(nil).QueuecallGetsByCustomerID), ctx, customerID, size, token)
}

// QueuecallGetsByQueueIDAndStatus mocks base method.
func (m *MockDBHandler) QueuecallGetsByQueueIDAndStatus(ctx context.Context, queueID uuid.UUID, status queuecall.Status, size uint64, token string) ([]*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallGetsByQueueIDAndStatus", ctx, queueID, status, size, token)
	ret0, _ := ret[0].([]*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueuecallGetsByQueueIDAndStatus indicates an expected call of QueuecallGetsByQueueIDAndStatus.
func (mr *MockDBHandlerMockRecorder) QueuecallGetsByQueueIDAndStatus(ctx, queueID, status, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallGetsByQueueIDAndStatus", reflect.TypeOf((*MockDBHandler)(nil).QueuecallGetsByQueueIDAndStatus), ctx, queueID, status, size, token)
}

// QueuecallGetsByReferenceID mocks base method.
func (m *MockDBHandler) QueuecallGetsByReferenceID(ctx context.Context, referenceID uuid.UUID) ([]*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallGetsByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].([]*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueuecallGetsByReferenceID indicates an expected call of QueuecallGetsByReferenceID.
func (mr *MockDBHandlerMockRecorder) QueuecallGetsByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallGetsByReferenceID", reflect.TypeOf((*MockDBHandler)(nil).QueuecallGetsByReferenceID), ctx, referenceID)
}

// QueuecallReferenceCreate mocks base method.
func (m *MockDBHandler) QueuecallReferenceCreate(ctx context.Context, a *queuecallreference.QueuecallReference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallReferenceCreate", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallReferenceCreate indicates an expected call of QueuecallReferenceCreate.
func (mr *MockDBHandlerMockRecorder) QueuecallReferenceCreate(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallReferenceCreate", reflect.TypeOf((*MockDBHandler)(nil).QueuecallReferenceCreate), ctx, a)
}

// QueuecallReferenceDelete mocks base method.
func (m *MockDBHandler) QueuecallReferenceDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallReferenceDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallReferenceDelete indicates an expected call of QueuecallReferenceDelete.
func (mr *MockDBHandlerMockRecorder) QueuecallReferenceDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallReferenceDelete", reflect.TypeOf((*MockDBHandler)(nil).QueuecallReferenceDelete), ctx, id)
}

// QueuecallReferenceGet mocks base method.
func (m *MockDBHandler) QueuecallReferenceGet(ctx context.Context, id uuid.UUID) (*queuecallreference.QueuecallReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallReferenceGet", ctx, id)
	ret0, _ := ret[0].(*queuecallreference.QueuecallReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueuecallReferenceGet indicates an expected call of QueuecallReferenceGet.
func (mr *MockDBHandlerMockRecorder) QueuecallReferenceGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallReferenceGet", reflect.TypeOf((*MockDBHandler)(nil).QueuecallReferenceGet), ctx, id)
}

// QueuecallReferenceSetCurrentQueuecallID mocks base method.
func (m *MockDBHandler) QueuecallReferenceSetCurrentQueuecallID(ctx context.Context, id, queuecallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallReferenceSetCurrentQueuecallID", ctx, id, queuecallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallReferenceSetCurrentQueuecallID indicates an expected call of QueuecallReferenceSetCurrentQueuecallID.
func (mr *MockDBHandlerMockRecorder) QueuecallReferenceSetCurrentQueuecallID(ctx, id, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallReferenceSetCurrentQueuecallID", reflect.TypeOf((*MockDBHandler)(nil).QueuecallReferenceSetCurrentQueuecallID), ctx, id, queuecallID)
}

// QueuecallSetDurationService mocks base method.
func (m *MockDBHandler) QueuecallSetDurationService(ctx context.Context, id uuid.UUID, duration int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallSetDurationService", ctx, id, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallSetDurationService indicates an expected call of QueuecallSetDurationService.
func (mr *MockDBHandlerMockRecorder) QueuecallSetDurationService(ctx, id, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallSetDurationService", reflect.TypeOf((*MockDBHandler)(nil).QueuecallSetDurationService), ctx, id, duration)
}

// QueuecallSetDurationWaiting mocks base method.
func (m *MockDBHandler) QueuecallSetDurationWaiting(ctx context.Context, id uuid.UUID, duration int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallSetDurationWaiting", ctx, id, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallSetDurationWaiting indicates an expected call of QueuecallSetDurationWaiting.
func (mr *MockDBHandlerMockRecorder) QueuecallSetDurationWaiting(ctx, id, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallSetDurationWaiting", reflect.TypeOf((*MockDBHandler)(nil).QueuecallSetDurationWaiting), ctx, id, duration)
}

// QueuecallSetStatusConnecting mocks base method.
func (m *MockDBHandler) QueuecallSetStatusConnecting(ctx context.Context, id, serviceAgentID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallSetStatusConnecting", ctx, id, serviceAgentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallSetStatusConnecting indicates an expected call of QueuecallSetStatusConnecting.
func (mr *MockDBHandlerMockRecorder) QueuecallSetStatusConnecting(ctx, id, serviceAgentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallSetStatusConnecting", reflect.TypeOf((*MockDBHandler)(nil).QueuecallSetStatusConnecting), ctx, id, serviceAgentID)
}

// QueuecallSetStatusKicking mocks base method.
func (m *MockDBHandler) QueuecallSetStatusKicking(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallSetStatusKicking", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallSetStatusKicking indicates an expected call of QueuecallSetStatusKicking.
func (mr *MockDBHandlerMockRecorder) QueuecallSetStatusKicking(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallSetStatusKicking", reflect.TypeOf((*MockDBHandler)(nil).QueuecallSetStatusKicking), ctx, id)
}

// QueuecallSetStatusService mocks base method.
func (m *MockDBHandler) QueuecallSetStatusService(ctx context.Context, id uuid.UUID, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallSetStatusService", ctx, id, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallSetStatusService indicates an expected call of QueuecallSetStatusService.
func (mr *MockDBHandlerMockRecorder) QueuecallSetStatusService(ctx, id, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallSetStatusService", reflect.TypeOf((*MockDBHandler)(nil).QueuecallSetStatusService), ctx, id, timestamp)
}

// QueuecallSetStatusWaiting mocks base method.
func (m *MockDBHandler) QueuecallSetStatusWaiting(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueuecallSetStatusWaiting", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueuecallSetStatusWaiting indicates an expected call of QueuecallSetStatusWaiting.
func (mr *MockDBHandlerMockRecorder) QueuecallSetStatusWaiting(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueuecallSetStatusWaiting", reflect.TypeOf((*MockDBHandler)(nil).QueuecallSetStatusWaiting), ctx, id)
}
