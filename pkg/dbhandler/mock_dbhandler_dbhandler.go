// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/api-manager/pkg/dbhandler (interfaces: DBHandler)

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "gitlab.com/voipbin/bin-manager/api-manager/models/user"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// UserCreate mocks base method.
func (m *MockDBHandler) UserCreate(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockDBHandlerMockRecorder) UserCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockDBHandler)(nil).UserCreate), arg0, arg1)
}

// UserGet mocks base method.
func (m *MockDBHandler) UserGet(arg0 context.Context, arg1 uint64) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockDBHandlerMockRecorder) UserGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockDBHandler)(nil).UserGet), arg0, arg1)
}

// UserGetByUsername mocks base method.
func (m *MockDBHandler) UserGetByUsername(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetByUsername", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetByUsername indicates an expected call of UserGetByUsername.
func (mr *MockDBHandlerMockRecorder) UserGetByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetByUsername", reflect.TypeOf((*MockDBHandler)(nil).UserGetByUsername), arg0, arg1)
}

// UserGetFromDB mocks base method.
func (m *MockDBHandler) UserGetFromDB(arg0 context.Context, arg1 uint64) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetFromDB", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetFromDB indicates an expected call of UserGetFromDB.
func (mr *MockDBHandlerMockRecorder) UserGetFromDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).UserGetFromDB), arg0, arg1)
}

// UserGets mocks base method.
func (m *MockDBHandler) UserGets(arg0 context.Context) ([]*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGets", arg0)
	ret0, _ := ret[0].([]*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGets indicates an expected call of UserGets.
func (mr *MockDBHandlerMockRecorder) UserGets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGets", reflect.TypeOf((*MockDBHandler)(nil).UserGets), arg0)
}

// UserSetToCache mocks base method.
func (m *MockDBHandler) UserSetToCache(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSetToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSetToCache indicates an expected call of UserSetToCache.
func (mr *MockDBHandlerMockRecorder) UserSetToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSetToCache", reflect.TypeOf((*MockDBHandler)(nil).UserSetToCache), arg0, arg1)
}

// UserUpdateToCache mocks base method.
func (m *MockDBHandler) UserUpdateToCache(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdateToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdateToCache indicates an expected call of UserUpdateToCache.
func (mr *MockDBHandlerMockRecorder) UserUpdateToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).UserUpdateToCache), arg0, arg1)
}
