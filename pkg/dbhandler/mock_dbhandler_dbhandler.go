// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/dbhandler (interfaces: DBHandler)

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "gitlab.com/voipbin/bin-manager/call-manager/pkg/action"
	call "gitlab.com/voipbin/bin-manager/call-manager/pkg/callhandler/models/call"
	conference "gitlab.com/voipbin/bin-manager/call-manager/pkg/conferencehandler/models/conference"
	ari "gitlab.com/voipbin/bin-manager/call-manager/pkg/eventhandler/models/ari"
	bridge "gitlab.com/voipbin/bin-manager/call-manager/pkg/eventhandler/models/bridge"
	channel "gitlab.com/voipbin/bin-manager/call-manager/pkg/eventhandler/models/channel"
)

// MockDBHandler is a mock of DBHandler interface.
type MockDBHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerMockRecorder
}

// MockDBHandlerMockRecorder is the mock recorder for MockDBHandler.
type MockDBHandlerMockRecorder struct {
	mock *MockDBHandler
}

// NewMockDBHandler creates a new mock instance.
func NewMockDBHandler(ctrl *gomock.Controller) *MockDBHandler {
	mock := &MockDBHandler{ctrl: ctrl}
	mock.recorder = &MockDBHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandler) EXPECT() *MockDBHandlerMockRecorder {
	return m.recorder
}

// BridgeAddChannelID mocks base method.
func (m *MockDBHandler) BridgeAddChannelID(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeAddChannelID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeAddChannelID indicates an expected call of BridgeAddChannelID.
func (mr *MockDBHandlerMockRecorder) BridgeAddChannelID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeAddChannelID", reflect.TypeOf((*MockDBHandler)(nil).BridgeAddChannelID), arg0, arg1, arg2)
}

// BridgeCreate mocks base method.
func (m *MockDBHandler) BridgeCreate(arg0 context.Context, arg1 *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeCreate indicates an expected call of BridgeCreate.
func (mr *MockDBHandlerMockRecorder) BridgeCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeCreate", reflect.TypeOf((*MockDBHandler)(nil).BridgeCreate), arg0, arg1)
}

// BridgeEnd mocks base method.
func (m *MockDBHandler) BridgeEnd(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeEnd", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeEnd indicates an expected call of BridgeEnd.
func (mr *MockDBHandlerMockRecorder) BridgeEnd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeEnd", reflect.TypeOf((*MockDBHandler)(nil).BridgeEnd), arg0, arg1, arg2)
}

// BridgeGet mocks base method.
func (m *MockDBHandler) BridgeGet(arg0 context.Context, arg1 string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGet", arg0, arg1)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGet indicates an expected call of BridgeGet.
func (mr *MockDBHandlerMockRecorder) BridgeGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGet", reflect.TypeOf((*MockDBHandler)(nil).BridgeGet), arg0, arg1)
}

// BridgeGetFromCache mocks base method.
func (m *MockDBHandler) BridgeGetFromCache(arg0 context.Context, arg1 string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGetFromCache", arg0, arg1)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGetFromCache indicates an expected call of BridgeGetFromCache.
func (mr *MockDBHandlerMockRecorder) BridgeGetFromCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).BridgeGetFromCache), arg0, arg1)
}

// BridgeGetFromDB mocks base method.
func (m *MockDBHandler) BridgeGetFromDB(arg0 context.Context, arg1 string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGetFromDB", arg0, arg1)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGetFromDB indicates an expected call of BridgeGetFromDB.
func (mr *MockDBHandlerMockRecorder) BridgeGetFromDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).BridgeGetFromDB), arg0, arg1)
}

// BridgeGetUntilTimeout mocks base method.
func (m *MockDBHandler) BridgeGetUntilTimeout(arg0 context.Context, arg1 string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeGetUntilTimeout", arg0, arg1)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BridgeGetUntilTimeout indicates an expected call of BridgeGetUntilTimeout.
func (mr *MockDBHandlerMockRecorder) BridgeGetUntilTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeGetUntilTimeout", reflect.TypeOf((*MockDBHandler)(nil).BridgeGetUntilTimeout), arg0, arg1)
}

// BridgeIsExist mocks base method.
func (m *MockDBHandler) BridgeIsExist(arg0 string, arg1 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeIsExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// BridgeIsExist indicates an expected call of BridgeIsExist.
func (mr *MockDBHandlerMockRecorder) BridgeIsExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeIsExist", reflect.TypeOf((*MockDBHandler)(nil).BridgeIsExist), arg0, arg1)
}

// BridgeRemoveChannelID mocks base method.
func (m *MockDBHandler) BridgeRemoveChannelID(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeRemoveChannelID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeRemoveChannelID indicates an expected call of BridgeRemoveChannelID.
func (mr *MockDBHandlerMockRecorder) BridgeRemoveChannelID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeRemoveChannelID", reflect.TypeOf((*MockDBHandler)(nil).BridgeRemoveChannelID), arg0, arg1, arg2)
}

// BridgeSetToCache mocks base method.
func (m *MockDBHandler) BridgeSetToCache(arg0 context.Context, arg1 *bridge.Bridge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeSetToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeSetToCache indicates an expected call of BridgeSetToCache.
func (mr *MockDBHandlerMockRecorder) BridgeSetToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeSetToCache", reflect.TypeOf((*MockDBHandler)(nil).BridgeSetToCache), arg0, arg1)
}

// BridgeUpdateToCache mocks base method.
func (m *MockDBHandler) BridgeUpdateToCache(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BridgeUpdateToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BridgeUpdateToCache indicates an expected call of BridgeUpdateToCache.
func (mr *MockDBHandlerMockRecorder) BridgeUpdateToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BridgeUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).BridgeUpdateToCache), arg0, arg1)
}

// CallCreate mocks base method.
func (m *MockDBHandler) CallCreate(arg0 context.Context, arg1 *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallCreate indicates an expected call of CallCreate.
func (mr *MockDBHandlerMockRecorder) CallCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCreate", reflect.TypeOf((*MockDBHandler)(nil).CallCreate), arg0, arg1)
}

// CallGet mocks base method.
func (m *MockDBHandler) CallGet(arg0 context.Context, arg1 uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGet", arg0, arg1)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGet indicates an expected call of CallGet.
func (mr *MockDBHandlerMockRecorder) CallGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGet", reflect.TypeOf((*MockDBHandler)(nil).CallGet), arg0, arg1)
}

// CallGetByChannelID mocks base method.
func (m *MockDBHandler) CallGetByChannelID(arg0 context.Context, arg1 string) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGetByChannelID", arg0, arg1)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGetByChannelID indicates an expected call of CallGetByChannelID.
func (mr *MockDBHandlerMockRecorder) CallGetByChannelID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGetByChannelID", reflect.TypeOf((*MockDBHandler)(nil).CallGetByChannelID), arg0, arg1)
}

// CallGetFromCache mocks base method.
func (m *MockDBHandler) CallGetFromCache(arg0 context.Context, arg1 uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGetFromCache", arg0, arg1)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGetFromCache indicates an expected call of CallGetFromCache.
func (mr *MockDBHandlerMockRecorder) CallGetFromCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).CallGetFromCache), arg0, arg1)
}

// CallGetFromDB mocks base method.
func (m *MockDBHandler) CallGetFromDB(arg0 context.Context, arg1 uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallGetFromDB", arg0, arg1)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallGetFromDB indicates an expected call of CallGetFromDB.
func (mr *MockDBHandlerMockRecorder) CallGetFromDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).CallGetFromDB), arg0, arg1)
}

// CallSetAction mocks base method.
func (m *MockDBHandler) CallSetAction(arg0 context.Context, arg1 uuid.UUID, arg2 *action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetAction", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetAction indicates an expected call of CallSetAction.
func (mr *MockDBHandlerMockRecorder) CallSetAction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetAction", reflect.TypeOf((*MockDBHandler)(nil).CallSetAction), arg0, arg1, arg2)
}

// CallSetConferenceID mocks base method.
func (m *MockDBHandler) CallSetConferenceID(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetConferenceID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetConferenceID indicates an expected call of CallSetConferenceID.
func (mr *MockDBHandlerMockRecorder) CallSetConferenceID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetConferenceID", reflect.TypeOf((*MockDBHandler)(nil).CallSetConferenceID), arg0, arg1, arg2)
}

// CallSetFlowID mocks base method.
func (m *MockDBHandler) CallSetFlowID(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetFlowID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetFlowID indicates an expected call of CallSetFlowID.
func (mr *MockDBHandlerMockRecorder) CallSetFlowID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetFlowID", reflect.TypeOf((*MockDBHandler)(nil).CallSetFlowID), arg0, arg1, arg2)
}

// CallSetHangup mocks base method.
func (m *MockDBHandler) CallSetHangup(arg0 context.Context, arg1 uuid.UUID, arg2 call.HangupReason, arg3 call.HangupBy, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetHangup", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetHangup indicates an expected call of CallSetHangup.
func (mr *MockDBHandlerMockRecorder) CallSetHangup(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetHangup", reflect.TypeOf((*MockDBHandler)(nil).CallSetHangup), arg0, arg1, arg2, arg3, arg4)
}

// CallSetStatus mocks base method.
func (m *MockDBHandler) CallSetStatus(arg0 context.Context, arg1 uuid.UUID, arg2 call.Status, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetStatus indicates an expected call of CallSetStatus.
func (mr *MockDBHandlerMockRecorder) CallSetStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetStatus", reflect.TypeOf((*MockDBHandler)(nil).CallSetStatus), arg0, arg1, arg2, arg3)
}

// CallSetToCache mocks base method.
func (m *MockDBHandler) CallSetToCache(arg0 context.Context, arg1 *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallSetToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallSetToCache indicates an expected call of CallSetToCache.
func (mr *MockDBHandlerMockRecorder) CallSetToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallSetToCache", reflect.TypeOf((*MockDBHandler)(nil).CallSetToCache), arg0, arg1)
}

// CallUpdateToCache mocks base method.
func (m *MockDBHandler) CallUpdateToCache(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallUpdateToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallUpdateToCache indicates an expected call of CallUpdateToCache.
func (mr *MockDBHandlerMockRecorder) CallUpdateToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).CallUpdateToCache), arg0, arg1)
}

// ChannelCreate mocks base method.
func (m *MockDBHandler) ChannelCreate(arg0 context.Context, arg1 *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelCreate indicates an expected call of ChannelCreate.
func (mr *MockDBHandlerMockRecorder) ChannelCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelCreate", reflect.TypeOf((*MockDBHandler)(nil).ChannelCreate), arg0, arg1)
}

// ChannelEnd mocks base method.
func (m *MockDBHandler) ChannelEnd(arg0 context.Context, arg1, arg2 string, arg3 ari.ChannelCause) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelEnd", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelEnd indicates an expected call of ChannelEnd.
func (mr *MockDBHandlerMockRecorder) ChannelEnd(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelEnd", reflect.TypeOf((*MockDBHandler)(nil).ChannelEnd), arg0, arg1, arg2, arg3)
}

// ChannelGet mocks base method.
func (m *MockDBHandler) ChannelGet(arg0 context.Context, arg1 string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGet", arg0, arg1)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGet indicates an expected call of ChannelGet.
func (mr *MockDBHandlerMockRecorder) ChannelGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGet", reflect.TypeOf((*MockDBHandler)(nil).ChannelGet), arg0, arg1)
}

// ChannelGetFromCache mocks base method.
func (m *MockDBHandler) ChannelGetFromCache(arg0 context.Context, arg1 string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGetFromCache", arg0, arg1)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGetFromCache indicates an expected call of ChannelGetFromCache.
func (mr *MockDBHandlerMockRecorder) ChannelGetFromCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).ChannelGetFromCache), arg0, arg1)
}

// ChannelGetFromDB mocks base method.
func (m *MockDBHandler) ChannelGetFromDB(arg0 context.Context, arg1 string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGetFromDB", arg0, arg1)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGetFromDB indicates an expected call of ChannelGetFromDB.
func (mr *MockDBHandlerMockRecorder) ChannelGetFromDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).ChannelGetFromDB), arg0, arg1)
}

// ChannelGetUntilTimeout mocks base method.
func (m *MockDBHandler) ChannelGetUntilTimeout(arg0 context.Context, arg1 string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGetUntilTimeout", arg0, arg1)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGetUntilTimeout indicates an expected call of ChannelGetUntilTimeout.
func (mr *MockDBHandlerMockRecorder) ChannelGetUntilTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGetUntilTimeout", reflect.TypeOf((*MockDBHandler)(nil).ChannelGetUntilTimeout), arg0, arg1)
}

// ChannelGetUntilTimeoutWithStasis mocks base method.
func (m *MockDBHandler) ChannelGetUntilTimeoutWithStasis(arg0 context.Context, arg1 string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGetUntilTimeoutWithStasis", arg0, arg1)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGetUntilTimeoutWithStasis indicates an expected call of ChannelGetUntilTimeoutWithStasis.
func (mr *MockDBHandlerMockRecorder) ChannelGetUntilTimeoutWithStasis(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGetUntilTimeoutWithStasis", reflect.TypeOf((*MockDBHandler)(nil).ChannelGetUntilTimeoutWithStasis), arg0, arg1)
}

// ChannelIsExist mocks base method.
func (m *MockDBHandler) ChannelIsExist(arg0 string, arg1 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelIsExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ChannelIsExist indicates an expected call of ChannelIsExist.
func (mr *MockDBHandlerMockRecorder) ChannelIsExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelIsExist", reflect.TypeOf((*MockDBHandler)(nil).ChannelIsExist), arg0, arg1)
}

// ChannelSetBridgeID mocks base method.
func (m *MockDBHandler) ChannelSetBridgeID(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetBridgeID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetBridgeID indicates an expected call of ChannelSetBridgeID.
func (mr *MockDBHandlerMockRecorder) ChannelSetBridgeID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetBridgeID", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetBridgeID), arg0, arg1, arg2)
}

// ChannelSetData mocks base method.
func (m *MockDBHandler) ChannelSetData(arg0 context.Context, arg1 string, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetData indicates an expected call of ChannelSetData.
func (mr *MockDBHandlerMockRecorder) ChannelSetData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetData", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetData), arg0, arg1, arg2)
}

// ChannelSetDataAndStasis mocks base method.
func (m *MockDBHandler) ChannelSetDataAndStasis(arg0 context.Context, arg1 string, arg2 map[string]interface{}, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetDataAndStasis", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetDataAndStasis indicates an expected call of ChannelSetDataAndStasis.
func (mr *MockDBHandlerMockRecorder) ChannelSetDataAndStasis(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetDataAndStasis", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetDataAndStasis), arg0, arg1, arg2, arg3)
}

// ChannelSetDataItem mocks base method.
func (m *MockDBHandler) ChannelSetDataItem(arg0 context.Context, arg1, arg2 string, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetDataItem", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetDataItem indicates an expected call of ChannelSetDataItem.
func (mr *MockDBHandlerMockRecorder) ChannelSetDataItem(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetDataItem", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetDataItem), arg0, arg1, arg2, arg3)
}

// ChannelSetDirection mocks base method.
func (m *MockDBHandler) ChannelSetDirection(arg0 context.Context, arg1 string, arg2 channel.Direction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetDirection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetDirection indicates an expected call of ChannelSetDirection.
func (mr *MockDBHandlerMockRecorder) ChannelSetDirection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetDirection", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetDirection), arg0, arg1, arg2)
}

// ChannelSetSIPCallID mocks base method.
func (m *MockDBHandler) ChannelSetSIPCallID(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetSIPCallID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetSIPCallID indicates an expected call of ChannelSetSIPCallID.
func (mr *MockDBHandlerMockRecorder) ChannelSetSIPCallID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetSIPCallID", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetSIPCallID), arg0, arg1, arg2)
}

// ChannelSetSIPTransport mocks base method.
func (m *MockDBHandler) ChannelSetSIPTransport(arg0 context.Context, arg1 string, arg2 channel.SIPTransport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetSIPTransport", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetSIPTransport indicates an expected call of ChannelSetSIPTransport.
func (mr *MockDBHandlerMockRecorder) ChannelSetSIPTransport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetSIPTransport", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetSIPTransport), arg0, arg1, arg2)
}

// ChannelSetStasis mocks base method.
func (m *MockDBHandler) ChannelSetStasis(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetStasis", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetStasis indicates an expected call of ChannelSetStasis.
func (mr *MockDBHandlerMockRecorder) ChannelSetStasis(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetStasis", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetStasis), arg0, arg1, arg2)
}

// ChannelSetState mocks base method.
func (m *MockDBHandler) ChannelSetState(arg0 context.Context, arg1, arg2 string, arg3 ari.ChannelState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetState indicates an expected call of ChannelSetState.
func (mr *MockDBHandlerMockRecorder) ChannelSetState(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetState", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetState), arg0, arg1, arg2, arg3)
}

// ChannelSetToCache mocks base method.
func (m *MockDBHandler) ChannelSetToCache(arg0 context.Context, arg1 *channel.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSetToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSetToCache indicates an expected call of ChannelSetToCache.
func (mr *MockDBHandlerMockRecorder) ChannelSetToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSetToCache", reflect.TypeOf((*MockDBHandler)(nil).ChannelSetToCache), arg0, arg1)
}

// ChannelUpdateToCache mocks base method.
func (m *MockDBHandler) ChannelUpdateToCache(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelUpdateToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelUpdateToCache indicates an expected call of ChannelUpdateToCache.
func (mr *MockDBHandlerMockRecorder) ChannelUpdateToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).ChannelUpdateToCache), arg0, arg1)
}

// ConferenceAddCallID mocks base method.
func (m *MockDBHandler) ConferenceAddCallID(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceAddCallID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceAddCallID indicates an expected call of ConferenceAddCallID.
func (mr *MockDBHandlerMockRecorder) ConferenceAddCallID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceAddCallID", reflect.TypeOf((*MockDBHandler)(nil).ConferenceAddCallID), arg0, arg1, arg2)
}

// ConferenceCreate mocks base method.
func (m *MockDBHandler) ConferenceCreate(arg0 context.Context, arg1 *conference.Conference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceCreate indicates an expected call of ConferenceCreate.
func (mr *MockDBHandlerMockRecorder) ConferenceCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceCreate", reflect.TypeOf((*MockDBHandler)(nil).ConferenceCreate), arg0, arg1)
}

// ConferenceEnd mocks base method.
func (m *MockDBHandler) ConferenceEnd(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceEnd", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceEnd indicates an expected call of ConferenceEnd.
func (mr *MockDBHandlerMockRecorder) ConferenceEnd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceEnd", reflect.TypeOf((*MockDBHandler)(nil).ConferenceEnd), arg0, arg1)
}

// ConferenceGet mocks base method.
func (m *MockDBHandler) ConferenceGet(arg0 context.Context, arg1 uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGet", arg0, arg1)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGet indicates an expected call of ConferenceGet.
func (mr *MockDBHandlerMockRecorder) ConferenceGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGet", reflect.TypeOf((*MockDBHandler)(nil).ConferenceGet), arg0, arg1)
}

// ConferenceGetFromCache mocks base method.
func (m *MockDBHandler) ConferenceGetFromCache(arg0 context.Context, arg1 uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGetFromCache", arg0, arg1)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGetFromCache indicates an expected call of ConferenceGetFromCache.
func (mr *MockDBHandlerMockRecorder) ConferenceGetFromCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGetFromCache", reflect.TypeOf((*MockDBHandler)(nil).ConferenceGetFromCache), arg0, arg1)
}

// ConferenceGetFromDB mocks base method.
func (m *MockDBHandler) ConferenceGetFromDB(arg0 context.Context, arg1 uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceGetFromDB", arg0, arg1)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConferenceGetFromDB indicates an expected call of ConferenceGetFromDB.
func (mr *MockDBHandlerMockRecorder) ConferenceGetFromDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceGetFromDB", reflect.TypeOf((*MockDBHandler)(nil).ConferenceGetFromDB), arg0, arg1)
}

// ConferenceRemoveCallID mocks base method.
func (m *MockDBHandler) ConferenceRemoveCallID(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceRemoveCallID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceRemoveCallID indicates an expected call of ConferenceRemoveCallID.
func (mr *MockDBHandlerMockRecorder) ConferenceRemoveCallID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceRemoveCallID", reflect.TypeOf((*MockDBHandler)(nil).ConferenceRemoveCallID), arg0, arg1, arg2)
}

// ConferenceSetBridgeID mocks base method.
func (m *MockDBHandler) ConferenceSetBridgeID(arg0 context.Context, arg1 uuid.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSetBridgeID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSetBridgeID indicates an expected call of ConferenceSetBridgeID.
func (mr *MockDBHandlerMockRecorder) ConferenceSetBridgeID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSetBridgeID", reflect.TypeOf((*MockDBHandler)(nil).ConferenceSetBridgeID), arg0, arg1, arg2)
}

// ConferenceSetData mocks base method.
func (m *MockDBHandler) ConferenceSetData(arg0 context.Context, arg1 uuid.UUID, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSetData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSetData indicates an expected call of ConferenceSetData.
func (mr *MockDBHandlerMockRecorder) ConferenceSetData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSetData", reflect.TypeOf((*MockDBHandler)(nil).ConferenceSetData), arg0, arg1, arg2)
}

// ConferenceSetStatus mocks base method.
func (m *MockDBHandler) ConferenceSetStatus(arg0 context.Context, arg1 uuid.UUID, arg2 conference.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSetStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSetStatus indicates an expected call of ConferenceSetStatus.
func (mr *MockDBHandlerMockRecorder) ConferenceSetStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSetStatus", reflect.TypeOf((*MockDBHandler)(nil).ConferenceSetStatus), arg0, arg1, arg2)
}

// ConferenceSetToCache mocks base method.
func (m *MockDBHandler) ConferenceSetToCache(arg0 context.Context, arg1 *conference.Conference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceSetToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceSetToCache indicates an expected call of ConferenceSetToCache.
func (mr *MockDBHandlerMockRecorder) ConferenceSetToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceSetToCache", reflect.TypeOf((*MockDBHandler)(nil).ConferenceSetToCache), arg0, arg1)
}

// ConferenceUpdateToCache mocks base method.
func (m *MockDBHandler) ConferenceUpdateToCache(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConferenceUpdateToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConferenceUpdateToCache indicates an expected call of ConferenceUpdateToCache.
func (mr *MockDBHandlerMockRecorder) ConferenceUpdateToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConferenceUpdateToCache", reflect.TypeOf((*MockDBHandler)(nil).ConferenceUpdateToCache), arg0, arg1)
}
