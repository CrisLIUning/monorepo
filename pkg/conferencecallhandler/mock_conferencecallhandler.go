// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package conferencecallhandler is a generated GoMock package.
package conferencecallhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	conferencecall "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conferencecall"
)

// MockConferencecallHandler is a mock of ConferencecallHandler interface.
type MockConferencecallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConferencecallHandlerMockRecorder
}

// MockConferencecallHandlerMockRecorder is the mock recorder for MockConferencecallHandler.
type MockConferencecallHandlerMockRecorder struct {
	mock *MockConferencecallHandler
}

// NewMockConferencecallHandler creates a new mock instance.
func NewMockConferencecallHandler(ctrl *gomock.Controller) *MockConferencecallHandler {
	mock := &MockConferencecallHandler{ctrl: ctrl}
	mock.recorder = &MockConferencecallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConferencecallHandler) EXPECT() *MockConferencecallHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockConferencecallHandler) Create(ctx context.Context, customerID, conferenceID uuid.UUID, referenceType conferencecall.ReferenceType, referenceID uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, conferenceID, referenceType, referenceID)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConferencecallHandlerMockRecorder) Create(ctx, customerID, conferenceID, referenceType, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConferencecallHandler)(nil).Create), ctx, customerID, conferenceID, referenceType, referenceID)
}

// Get mocks base method.
func (m *MockConferencecallHandler) Get(ctx context.Context, id uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConferencecallHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConferencecallHandler)(nil).Get), ctx, id)
}

// GetByReferenceID mocks base method.
func (m *MockConferencecallHandler) GetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferenceID indicates an expected call of GetByReferenceID.
func (mr *MockConferencecallHandlerMockRecorder) GetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferenceID", reflect.TypeOf((*MockConferencecallHandler)(nil).GetByReferenceID), ctx, referenceID)
}

// UpdateStatusJoinedByReferenceID mocks base method.
func (m *MockConferencecallHandler) UpdateStatusJoinedByReferenceID(ctx context.Context, referenceID uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusJoinedByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusJoinedByReferenceID indicates an expected call of UpdateStatusJoinedByReferenceID.
func (mr *MockConferencecallHandlerMockRecorder) UpdateStatusJoinedByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusJoinedByReferenceID", reflect.TypeOf((*MockConferencecallHandler)(nil).UpdateStatusJoinedByReferenceID), ctx, referenceID)
}

// UpdateStatusLeaved mocks base method.
func (m *MockConferencecallHandler) UpdateStatusLeaved(ctx context.Context, id uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusLeaved", ctx, id)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusLeaved indicates an expected call of UpdateStatusLeaved.
func (mr *MockConferencecallHandlerMockRecorder) UpdateStatusLeaved(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusLeaved", reflect.TypeOf((*MockConferencecallHandler)(nil).UpdateStatusLeaved), ctx, id)
}

// UpdateStatusLeaving mocks base method.
func (m *MockConferencecallHandler) UpdateStatusLeaving(ctx context.Context, id uuid.UUID) (*conferencecall.Conferencecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusLeaving", ctx, id)
	ret0, _ := ret[0].(*conferencecall.Conferencecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusLeaving indicates an expected call of UpdateStatusLeaving.
func (mr *MockConferencecallHandlerMockRecorder) UpdateStatusLeaving(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusLeaving", reflect.TypeOf((*MockConferencecallHandler)(nil).UpdateStatusLeaving), ctx, id)
}
