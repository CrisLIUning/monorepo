// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package storagehandler is a generated GoMock package.
package storagehandler

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	bucketrecording "gitlab.com/voipbin/bin-manager/storage-manager.git/models/bucketrecording"
)

// MockStorageHandler is a mock of StorageHandler interface.
type MockStorageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStorageHandlerMockRecorder
}

// MockStorageHandlerMockRecorder is the mock recorder for MockStorageHandler.
type MockStorageHandlerMockRecorder struct {
	mock *MockStorageHandler
}

// NewMockStorageHandler creates a new mock instance.
func NewMockStorageHandler(ctrl *gomock.Controller) *MockStorageHandler {
	mock := &MockStorageHandler{ctrl: ctrl}
	mock.recorder = &MockStorageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageHandler) EXPECT() *MockStorageHandlerMockRecorder {
	return m.recorder
}

// GetRecording mocks base method.
func (m *MockStorageHandler) GetRecording(id uuid.UUID) (*bucketrecording.BucketRecording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecording", id)
	ret0, _ := ret[0].(*bucketrecording.BucketRecording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecording indicates an expected call of GetRecording.
func (mr *MockStorageHandlerMockRecorder) GetRecording(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecording", reflect.TypeOf((*MockStorageHandler)(nil).GetRecording), id)
}
