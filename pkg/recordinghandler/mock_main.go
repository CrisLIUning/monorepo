// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package recordinghandler is a generated GoMock package.
package recordinghandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	recording "gitlab.com/voipbin/bin-manager/call-manager.git/models/recording"
)

// MockRecordingHandler is a mock of RecordingHandler interface.
type MockRecordingHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRecordingHandlerMockRecorder
}

// MockRecordingHandlerMockRecorder is the mock recorder for MockRecordingHandler.
type MockRecordingHandlerMockRecorder struct {
	mock *MockRecordingHandler
}

// NewMockRecordingHandler creates a new mock instance.
func NewMockRecordingHandler(ctrl *gomock.Controller) *MockRecordingHandler {
	mock := &MockRecordingHandler{ctrl: ctrl}
	mock.recorder = &MockRecordingHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordingHandler) EXPECT() *MockRecordingHandlerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRecordingHandler) Delete(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordingHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordingHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockRecordingHandler) Get(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRecordingHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRecordingHandler)(nil).Get), ctx, id)
}

// GetsByCustomerID mocks base method.
func (m *MockRecordingHandler) GetsByCustomerID(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockRecordingHandlerMockRecorder) GetsByCustomerID(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockRecordingHandler)(nil).GetsByCustomerID), ctx, customerID, size, token)
}

// Start mocks base method.
func (m *MockRecordingHandler) Start(ctx context.Context, referenceType recording.ReferenceType, referenceID uuid.UUID, format string, endOfSilence int, endOfKey string, duration int) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, referenceType, referenceID, format, endOfSilence, endOfKey, duration)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockRecordingHandlerMockRecorder) Start(ctx, referenceType, referenceID, format, endOfSilence, endOfKey, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRecordingHandler)(nil).Start), ctx, referenceType, referenceID, format, endOfSilence, endOfKey, duration)
}

// Stop mocks base method.
func (m *MockRecordingHandler) Stop(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockRecordingHandlerMockRecorder) Stop(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRecordingHandler)(nil).Stop), ctx, id)
}

// Stopped mocks base method.
func (m *MockRecordingHandler) Stopped(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stopped", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stopped indicates an expected call of Stopped.
func (mr *MockRecordingHandlerMockRecorder) Stopped(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stopped", reflect.TypeOf((*MockRecordingHandler)(nil).Stopped), ctx, id)
}
