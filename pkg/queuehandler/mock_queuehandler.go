// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package queuehandler is a generated GoMock package.
package queuehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
	queue "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queue"
	queuecall "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecall"
)

// MockQueueHandler is a mock of QueueHandler interface.
type MockQueueHandler struct {
	ctrl     *gomock.Controller
	recorder *MockQueueHandlerMockRecorder
}

// MockQueueHandlerMockRecorder is the mock recorder for MockQueueHandler.
type MockQueueHandlerMockRecorder struct {
	mock *MockQueueHandler
}

// NewMockQueueHandler creates a new mock instance.
func NewMockQueueHandler(ctrl *gomock.Controller) *MockQueueHandler {
	mock := &MockQueueHandler{ctrl: ctrl}
	mock.recorder = &MockQueueHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueHandler) EXPECT() *MockQueueHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQueueHandler) Create(ctx context.Context, userID uint64, name, detail, webhookURI, webhookMethod string, routingMethod queue.RoutingMethod, tagIDs []uuid.UUID, waitActions []action.Action, waitTimeout, serviceTimeout int) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, name, detail, webhookURI, webhookMethod, routingMethod, tagIDs, waitActions, waitTimeout, serviceTimeout)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockQueueHandlerMockRecorder) Create(ctx, userID, name, detail, webhookURI, webhookMethod, routingMethod, tagIDs, waitActions, waitTimeout, serviceTimeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQueueHandler)(nil).Create), ctx, userID, name, detail, webhookURI, webhookMethod, routingMethod, tagIDs, waitActions, waitTimeout, serviceTimeout)
}

// Delete mocks base method.
func (m *MockQueueHandler) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQueueHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQueueHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockQueueHandler) Get(ctx context.Context, id uuid.UUID) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueueHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQueueHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockQueueHandler) Gets(ctx context.Context, userID, size uint64, token string) ([]*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, userID, size, token)
	ret0, _ := ret[0].([]*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockQueueHandlerMockRecorder) Gets(ctx, userID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockQueueHandler)(nil).Gets), ctx, userID, size, token)
}

// Join mocks base method.
func (m *MockQueueHandler) Join(ctx context.Context, queueID uuid.UUID, referenceType queuecall.ReferenceType, referenceID, exitActionID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", ctx, queueID, referenceType, referenceID, exitActionID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Join indicates an expected call of Join.
func (mr *MockQueueHandlerMockRecorder) Join(ctx, queueID, referenceType, referenceID, exitActionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockQueueHandler)(nil).Join), ctx, queueID, referenceType, referenceID, exitActionID)
}

// UpdateBasicInfo mocks base method.
func (m *MockQueueHandler) UpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail, webhookURI, webhookMethod string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicInfo", ctx, id, name, detail, webhookURI, webhookMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBasicInfo indicates an expected call of UpdateBasicInfo.
func (mr *MockQueueHandlerMockRecorder) UpdateBasicInfo(ctx, id, name, detail, webhookURI, webhookMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicInfo", reflect.TypeOf((*MockQueueHandler)(nil).UpdateBasicInfo), ctx, id, name, detail, webhookURI, webhookMethod)
}

// UpdateRoutingMethod mocks base method.
func (m *MockQueueHandler) UpdateRoutingMethod(ctx context.Context, id uuid.UUID, routingMEthod queue.RoutingMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingMethod", ctx, id, routingMEthod)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoutingMethod indicates an expected call of UpdateRoutingMethod.
func (mr *MockQueueHandlerMockRecorder) UpdateRoutingMethod(ctx, id, routingMEthod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingMethod", reflect.TypeOf((*MockQueueHandler)(nil).UpdateRoutingMethod), ctx, id, routingMEthod)
}

// UpdateTagIDs mocks base method.
func (m *MockQueueHandler) UpdateTagIDs(ctx context.Context, id uuid.UUID, tagIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTagIDs", ctx, id, tagIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTagIDs indicates an expected call of UpdateTagIDs.
func (mr *MockQueueHandlerMockRecorder) UpdateTagIDs(ctx, id, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagIDs", reflect.TypeOf((*MockQueueHandler)(nil).UpdateTagIDs), ctx, id, tagIDs)
}

// UpdateWaitActionsAndTimeouts mocks base method.
func (m *MockQueueHandler) UpdateWaitActionsAndTimeouts(ctx context.Context, id uuid.UUID, waitActions []action.Action, waitTimeout, serviceTimeout int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWaitActionsAndTimeouts", ctx, id, waitActions, waitTimeout, serviceTimeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWaitActionsAndTimeouts indicates an expected call of UpdateWaitActionsAndTimeouts.
func (mr *MockQueueHandlerMockRecorder) UpdateWaitActionsAndTimeouts(ctx, id, waitActions, waitTimeout, serviceTimeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWaitActionsAndTimeouts", reflect.TypeOf((*MockQueueHandler)(nil).UpdateWaitActionsAndTimeouts), ctx, id, waitActions, waitTimeout, serviceTimeout)
}
