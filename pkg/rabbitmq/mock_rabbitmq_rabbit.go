// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/voip/asterisk-proxy/pkg/rabbitmq (interfaces: Rabbit)

// Package rabbitmq is a generated GoMock package.
package rabbitmq

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
	reflect "reflect"
)

// MockRabbit is a mock of Rabbit interface
type MockRabbit struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMockRecorder
}

// MockRabbitMockRecorder is the mock recorder for MockRabbit
type MockRabbitMockRecorder struct {
	mock *MockRabbit
}

// NewMockRabbit creates a new mock instance
func NewMockRabbit(ctrl *gomock.Controller) *MockRabbit {
	mock := &MockRabbit{ctrl: ctrl}
	mock.recorder = &MockRabbitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRabbit) EXPECT() *MockRabbitMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockRabbit) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockRabbitMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRabbit)(nil).Close))
}

// Connect mocks base method
func (m *MockRabbit) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect
func (mr *MockRabbitMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRabbit)(nil).Connect))
}

// ConsumeMessage mocks base method
func (m *MockRabbit) ConsumeMessage(arg0, arg1 string, arg2 CbMsgConsume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeMessage indicates an expected call of ConsumeMessage
func (mr *MockRabbitMockRecorder) ConsumeMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeMessage", reflect.TypeOf((*MockRabbit)(nil).ConsumeMessage), arg0, arg1, arg2)
}

// ConsumeRPC mocks base method
func (m *MockRabbit) ConsumeRPC(arg0, arg1 string, arg2 CbMsgRPC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeRPC", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeRPC indicates an expected call of ConsumeRPC
func (mr *MockRabbitMockRecorder) ConsumeRPC(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeRPC", reflect.TypeOf((*MockRabbit)(nil).ConsumeRPC), arg0, arg1, arg2)
}

// ExchangeDeclare mocks base method
func (m *MockRabbit) ExchangeDeclare(arg0, arg1 string, arg2, arg3, arg4, arg5 bool, arg6 amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare
func (mr *MockRabbitMockRecorder) ExchangeDeclare(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockRabbit)(nil).ExchangeDeclare), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ExchangeDeclareForDelay mocks base method
func (m *MockRabbit) ExchangeDeclareForDelay(arg0 string, arg1, arg2, arg3, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclareForDelay", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclareForDelay indicates an expected call of ExchangeDeclareForDelay
func (mr *MockRabbitMockRecorder) ExchangeDeclareForDelay(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclareForDelay", reflect.TypeOf((*MockRabbit)(nil).ExchangeDeclareForDelay), arg0, arg1, arg2, arg3, arg4)
}

// GetURL mocks base method
func (m *MockRabbit) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL
func (mr *MockRabbitMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockRabbit)(nil).GetURL))
}

// PublishEvent mocks base method
func (m *MockRabbit) PublishEvent(arg0 string, arg1 *Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent
func (mr *MockRabbitMockRecorder) PublishEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockRabbit)(nil).PublishEvent), arg0, arg1)
}

// PublishExchangeDelayedRequest mocks base method
func (m *MockRabbit) PublishExchangeDelayedRequest(arg0, arg1 string, arg2 *Request, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExchangeDelayedRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExchangeDelayedRequest indicates an expected call of PublishExchangeDelayedRequest
func (mr *MockRabbitMockRecorder) PublishExchangeDelayedRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExchangeDelayedRequest", reflect.TypeOf((*MockRabbit)(nil).PublishExchangeDelayedRequest), arg0, arg1, arg2, arg3)
}

// PublishExchangeRequest mocks base method
func (m *MockRabbit) PublishExchangeRequest(arg0, arg1 string, arg2 *Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExchangeRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExchangeRequest indicates an expected call of PublishExchangeRequest
func (mr *MockRabbitMockRecorder) PublishExchangeRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExchangeRequest", reflect.TypeOf((*MockRabbit)(nil).PublishExchangeRequest), arg0, arg1, arg2)
}

// PublishRPC mocks base method
func (m *MockRabbit) PublishRPC(arg0 context.Context, arg1 string, arg2 *Request) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRPC", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishRPC indicates an expected call of PublishRPC
func (mr *MockRabbitMockRecorder) PublishRPC(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRPC", reflect.TypeOf((*MockRabbit)(nil).PublishRPC), arg0, arg1, arg2)
}

// PublishRequest mocks base method
func (m *MockRabbit) PublishRequest(arg0 string, arg1 *Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRequest indicates an expected call of PublishRequest
func (mr *MockRabbitMockRecorder) PublishRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRequest", reflect.TypeOf((*MockRabbit)(nil).PublishRequest), arg0, arg1)
}

// QueueBind mocks base method
func (m *MockRabbit) QueueBind(arg0, arg1, arg2 string, arg3 bool, arg4 amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueBind", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBind indicates an expected call of QueueBind
func (mr *MockRabbitMockRecorder) QueueBind(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBind", reflect.TypeOf((*MockRabbit)(nil).QueueBind), arg0, arg1, arg2, arg3, arg4)
}

// QueueDeclare mocks base method
func (m *MockRabbit) QueueDeclare(arg0 string, arg1, arg2, arg3, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclare", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueDeclare indicates an expected call of QueueDeclare
func (mr *MockRabbitMockRecorder) QueueDeclare(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockRabbit)(nil).QueueDeclare), arg0, arg1, arg2, arg3, arg4)
}
