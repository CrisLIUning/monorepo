// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/rabbitmq (interfaces: Rabbit)

// Package rabbitmq is a generated GoMock package.
package rabbitmq

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRabbit is a mock of Rabbit interface
type MockRabbit struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMockRecorder
}

// MockRabbitMockRecorder is the mock recorder for MockRabbit
type MockRabbitMockRecorder struct {
	mock *MockRabbit
}

// NewMockRabbit creates a new mock instance
func NewMockRabbit(ctrl *gomock.Controller) *MockRabbit {
	mock := &MockRabbit{ctrl: ctrl}
	mock.recorder = &MockRabbitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRabbit) EXPECT() *MockRabbitMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockRabbit) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockRabbitMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRabbit)(nil).Close))
}

// Connect mocks base method
func (m *MockRabbit) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect
func (mr *MockRabbitMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRabbit)(nil).Connect))
}

// ConsumeMessage mocks base method
func (m *MockRabbit) ConsumeMessage(arg0, arg1 string, arg2 CbMsgConsume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeMessage indicates an expected call of ConsumeMessage
func (mr *MockRabbitMockRecorder) ConsumeMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeMessage", reflect.TypeOf((*MockRabbit)(nil).ConsumeMessage), arg0, arg1, arg2)
}

// ConsumeRPC mocks base method
func (m *MockRabbit) ConsumeRPC(arg0, arg1 string, arg2 CbMsgRPC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeRPC", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeRPC indicates an expected call of ConsumeRPC
func (mr *MockRabbitMockRecorder) ConsumeRPC(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeRPC", reflect.TypeOf((*MockRabbit)(nil).ConsumeRPC), arg0, arg1, arg2)
}

// DeclareQueue mocks base method
func (m *MockRabbit) DeclareQueue(arg0 string, arg1, arg2, arg3, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareQueue", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareQueue indicates an expected call of DeclareQueue
func (mr *MockRabbitMockRecorder) DeclareQueue(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareQueue", reflect.TypeOf((*MockRabbit)(nil).DeclareQueue), arg0, arg1, arg2, arg3, arg4)
}

// GetURL mocks base method
func (m *MockRabbit) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL
func (mr *MockRabbitMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockRabbit)(nil).GetURL))
}

// PublishMessage mocks base method
func (m *MockRabbit) PublishMessage(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage
func (mr *MockRabbitMockRecorder) PublishMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockRabbit)(nil).PublishMessage), arg0, arg1)
}

// PublishRPC mocks base method
func (m *MockRabbit) PublishRPC(arg0 context.Context, arg1 string, arg2 *Request) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRPC", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishRPC indicates an expected call of PublishRPC
func (mr *MockRabbitMockRecorder) PublishRPC(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRPC", reflect.TypeOf((*MockRabbit)(nil).PublishRPC), arg0, arg1, arg2)
}
