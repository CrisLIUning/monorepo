// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package flowhandler is a generated GoMock package.
package flowhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
	flow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/flow"
)

// MockFlowHandler is a mock of FlowHandler interface.
type MockFlowHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFlowHandlerMockRecorder
}

// MockFlowHandlerMockRecorder is the mock recorder for MockFlowHandler.
type MockFlowHandlerMockRecorder struct {
	mock *MockFlowHandler
}

// NewMockFlowHandler creates a new mock instance.
func NewMockFlowHandler(ctrl *gomock.Controller) *MockFlowHandler {
	mock := &MockFlowHandler{ctrl: ctrl}
	mock.recorder = &MockFlowHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlowHandler) EXPECT() *MockFlowHandlerMockRecorder {
	return m.recorder
}

// ActionGet mocks base method.
func (m *MockFlowHandler) ActionGet(ctx context.Context, flowID, actionID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionGet", ctx, flowID, actionID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionGet indicates an expected call of ActionGet.
func (mr *MockFlowHandlerMockRecorder) ActionGet(ctx, flowID, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionGet", reflect.TypeOf((*MockFlowHandler)(nil).ActionGet), ctx, flowID, actionID)
}

// FlowCreate mocks base method.
func (m *MockFlowHandler) FlowCreate(ctx context.Context, customerID uuid.UUID, flowType flow.Type, name, detail string, persist bool, actions []action.Action) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowCreate", ctx, customerID, flowType, name, detail, persist, actions)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowCreate indicates an expected call of FlowCreate.
func (mr *MockFlowHandlerMockRecorder) FlowCreate(ctx, customerID, flowType, name, detail, persist, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowCreate", reflect.TypeOf((*MockFlowHandler)(nil).FlowCreate), ctx, customerID, flowType, name, detail, persist, actions)
}

// FlowDelete mocks base method.
func (m *MockFlowHandler) FlowDelete(ctx context.Context, id uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowDelete", ctx, id)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowDelete indicates an expected call of FlowDelete.
func (mr *MockFlowHandlerMockRecorder) FlowDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowDelete", reflect.TypeOf((*MockFlowHandler)(nil).FlowDelete), ctx, id)
}

// FlowGet mocks base method.
func (m *MockFlowHandler) FlowGet(ctx context.Context, id uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGet", ctx, id)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGet indicates an expected call of FlowGet.
func (mr *MockFlowHandlerMockRecorder) FlowGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGet", reflect.TypeOf((*MockFlowHandler)(nil).FlowGet), ctx, id)
}

// FlowGetsByCustomerID mocks base method.
func (m *MockFlowHandler) FlowGetsByCustomerID(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGetsByCustomerID", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGetsByCustomerID indicates an expected call of FlowGetsByCustomerID.
func (mr *MockFlowHandlerMockRecorder) FlowGetsByCustomerID(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGetsByCustomerID", reflect.TypeOf((*MockFlowHandler)(nil).FlowGetsByCustomerID), ctx, customerID, token, limit)
}

// FlowGetsByType mocks base method.
func (m *MockFlowHandler) FlowGetsByType(ctx context.Context, customerID uuid.UUID, flowType flow.Type, token string, limit uint64) ([]*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGetsByType", ctx, customerID, flowType, token, limit)
	ret0, _ := ret[0].([]*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGetsByType indicates an expected call of FlowGetsByType.
func (mr *MockFlowHandlerMockRecorder) FlowGetsByType(ctx, customerID, flowType, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGetsByType", reflect.TypeOf((*MockFlowHandler)(nil).FlowGetsByType), ctx, customerID, flowType, token, limit)
}

// FlowUpdate mocks base method.
func (m *MockFlowHandler) FlowUpdate(ctx context.Context, id uuid.UUID, name, detail string, actions []action.Action) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowUpdate", ctx, id, name, detail, actions)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowUpdate indicates an expected call of FlowUpdate.
func (mr *MockFlowHandlerMockRecorder) FlowUpdate(ctx, id, name, detail, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowUpdate", reflect.TypeOf((*MockFlowHandler)(nil).FlowUpdate), ctx, id, name, detail, actions)
}
