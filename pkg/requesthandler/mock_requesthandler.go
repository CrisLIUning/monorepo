// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	agent "gitlab.com/voipbin/bin-manager/agent-manager.git/models/agent"
	agentdial "gitlab.com/voipbin/bin-manager/agent-manager.git/models/agentdial"
	tag "gitlab.com/voipbin/bin-manager/agent-manager.git/models/tag"
	address "gitlab.com/voipbin/bin-manager/call-manager.git/models/address"
	ari "gitlab.com/voipbin/bin-manager/call-manager.git/models/ari"
	bridge "gitlab.com/voipbin/bin-manager/call-manager.git/models/bridge"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/models/call"
	channel "gitlab.com/voipbin/bin-manager/call-manager.git/models/channel"
	confbridge "gitlab.com/voipbin/bin-manager/call-manager.git/models/confbridge"
	recording "gitlab.com/voipbin/bin-manager/call-manager.git/models/recording"
	response "gitlab.com/voipbin/bin-manager/call-manager.git/pkg/listenhandler/models/response"
	campaign "gitlab.com/voipbin/bin-manager/campaign-manager.git/models/campaign"
	outplan "gitlab.com/voipbin/bin-manager/campaign-manager.git/models/outplan"
	conference "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conference"
	customer "gitlab.com/voipbin/bin-manager/customer-manager.git/models/customer"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
	activeflow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/activeflow"
	flow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/flow"
	hook "gitlab.com/voipbin/bin-manager/hook-manager.git/models/hook"
	message "gitlab.com/voipbin/bin-manager/message-manager.git/models/message"
	availablenumber "gitlab.com/voipbin/bin-manager/number-manager.git/models/availablenumber"
	number "gitlab.com/voipbin/bin-manager/number-manager.git/models/number"
	outdial "gitlab.com/voipbin/bin-manager/outdial-manager.git/models/outdial"
	outdialtarget "gitlab.com/voipbin/bin-manager/outdial-manager.git/models/outdialtarget"
	queue "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queue"
	queuecall "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecall"
	queuecallreference "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecallreference"
	astcontact "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/astcontact"
	domain "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/domain"
	extension "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/extension"
	bucketrecording "gitlab.com/voipbin/bin-manager/storage-manager.git/models/bucketrecording"
	transcribe "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcribe"
	user "gitlab.com/voipbin/bin-manager/user-manager.git/models/user"
)

// MockRequestHandler is a mock of RequestHandler interface.
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler.
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance.
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// AMV1AgentCreate mocks base method.
func (m *MockRequestHandler) AMV1AgentCreate(ctx context.Context, timeout int, customerID uuid.UUID, username, password, name, detail string, ringMethod agent.RingMethod, permission agent.Permission, tagIDs []uuid.UUID, addresses []address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentCreate", ctx, timeout, customerID, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentCreate indicates an expected call of AMV1AgentCreate.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentCreate(ctx, timeout, customerID, username, password, name, detail, ringMethod, permission, tagIDs, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentCreate", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentCreate), ctx, timeout, customerID, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
}

// AMV1AgentDelete mocks base method.
func (m *MockRequestHandler) AMV1AgentDelete(ctx context.Context, id uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentDelete", ctx, id)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentDelete indicates an expected call of AMV1AgentDelete.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentDelete", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentDelete), ctx, id)
}

// AMV1AgentDial mocks base method.
func (m *MockRequestHandler) AMV1AgentDial(ctx context.Context, id uuid.UUID, source *address.Address, flowID, masterCallID uuid.UUID) (*agentdial.AgentDial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentDial", ctx, id, source, flowID, masterCallID)
	ret0, _ := ret[0].(*agentdial.AgentDial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentDial indicates an expected call of AMV1AgentDial.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentDial(ctx, id, source, flowID, masterCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentDial", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentDial), ctx, id, source, flowID, masterCallID)
}

// AMV1AgentGet mocks base method.
func (m *MockRequestHandler) AMV1AgentGet(ctx context.Context, agentID uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentGet", ctx, agentID)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentGet indicates an expected call of AMV1AgentGet.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentGet(ctx, agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentGet", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentGet), ctx, agentID)
}

// AMV1AgentGets mocks base method.
func (m *MockRequestHandler) AMV1AgentGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentGets indicates an expected call of AMV1AgentGets.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentGets(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentGets", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentGets), ctx, customerID, pageToken, pageSize)
}

// AMV1AgentGetsByTagIDs mocks base method.
func (m *MockRequestHandler) AMV1AgentGetsByTagIDs(ctx context.Context, customerID uuid.UUID, tagIDs []uuid.UUID) ([]agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentGetsByTagIDs", ctx, customerID, tagIDs)
	ret0, _ := ret[0].([]agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentGetsByTagIDs indicates an expected call of AMV1AgentGetsByTagIDs.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentGetsByTagIDs(ctx, customerID, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentGetsByTagIDs", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentGetsByTagIDs), ctx, customerID, tagIDs)
}

// AMV1AgentGetsByTagIDsAndStatus mocks base method.
func (m *MockRequestHandler) AMV1AgentGetsByTagIDsAndStatus(ctx context.Context, customerID uuid.UUID, tagIDs []uuid.UUID, status agent.Status) ([]agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentGetsByTagIDsAndStatus", ctx, customerID, tagIDs, status)
	ret0, _ := ret[0].([]agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentGetsByTagIDsAndStatus indicates an expected call of AMV1AgentGetsByTagIDsAndStatus.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentGetsByTagIDsAndStatus(ctx, customerID, tagIDs, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentGetsByTagIDsAndStatus", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentGetsByTagIDsAndStatus), ctx, customerID, tagIDs, status)
}

// AMV1AgentLogin mocks base method.
func (m *MockRequestHandler) AMV1AgentLogin(ctx context.Context, timeout int, customerID uuid.UUID, username, password string) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentLogin", ctx, timeout, customerID, username, password)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentLogin indicates an expected call of AMV1AgentLogin.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentLogin(ctx, timeout, customerID, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentLogin", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentLogin), ctx, timeout, customerID, username, password)
}

// AMV1AgentUpdate mocks base method.
func (m *MockRequestHandler) AMV1AgentUpdate(ctx context.Context, id uuid.UUID, name, detail string, ringMethod agent.RingMethod) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentUpdate", ctx, id, name, detail, ringMethod)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentUpdate indicates an expected call of AMV1AgentUpdate.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentUpdate(ctx, id, name, detail, ringMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentUpdate", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentUpdate), ctx, id, name, detail, ringMethod)
}

// AMV1AgentUpdateAddresses mocks base method.
func (m *MockRequestHandler) AMV1AgentUpdateAddresses(ctx context.Context, id uuid.UUID, addresses []address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentUpdateAddresses", ctx, id, addresses)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentUpdateAddresses indicates an expected call of AMV1AgentUpdateAddresses.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentUpdateAddresses(ctx, id, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentUpdateAddresses", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentUpdateAddresses), ctx, id, addresses)
}

// AMV1AgentUpdatePassword mocks base method.
func (m *MockRequestHandler) AMV1AgentUpdatePassword(ctx context.Context, timeout int, id uuid.UUID, password string) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentUpdatePassword", ctx, timeout, id, password)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentUpdatePassword indicates an expected call of AMV1AgentUpdatePassword.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentUpdatePassword(ctx, timeout, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentUpdatePassword", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentUpdatePassword), ctx, timeout, id, password)
}

// AMV1AgentUpdateStatus mocks base method.
func (m *MockRequestHandler) AMV1AgentUpdateStatus(ctx context.Context, id uuid.UUID, status agent.Status) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentUpdateStatus indicates an expected call of AMV1AgentUpdateStatus.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentUpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentUpdateStatus", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentUpdateStatus), ctx, id, status)
}

// AMV1AgentUpdateTagIDs mocks base method.
func (m *MockRequestHandler) AMV1AgentUpdateTagIDs(ctx context.Context, id uuid.UUID, tagIDs []uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentUpdateTagIDs", ctx, id, tagIDs)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentUpdateTagIDs indicates an expected call of AMV1AgentUpdateTagIDs.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentUpdateTagIDs(ctx, id, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentUpdateTagIDs", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentUpdateTagIDs), ctx, id, tagIDs)
}

// AMV1TagCreate mocks base method.
func (m *MockRequestHandler) AMV1TagCreate(ctx context.Context, customerID uuid.UUID, name, detail string) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1TagCreate", ctx, customerID, name, detail)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1TagCreate indicates an expected call of AMV1TagCreate.
func (mr *MockRequestHandlerMockRecorder) AMV1TagCreate(ctx, customerID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1TagCreate", reflect.TypeOf((*MockRequestHandler)(nil).AMV1TagCreate), ctx, customerID, name, detail)
}

// AMV1TagDelete mocks base method.
func (m *MockRequestHandler) AMV1TagDelete(ctx context.Context, id uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1TagDelete", ctx, id)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1TagDelete indicates an expected call of AMV1TagDelete.
func (mr *MockRequestHandlerMockRecorder) AMV1TagDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1TagDelete", reflect.TypeOf((*MockRequestHandler)(nil).AMV1TagDelete), ctx, id)
}

// AMV1TagGet mocks base method.
func (m *MockRequestHandler) AMV1TagGet(ctx context.Context, id uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1TagGet", ctx, id)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1TagGet indicates an expected call of AMV1TagGet.
func (mr *MockRequestHandlerMockRecorder) AMV1TagGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1TagGet", reflect.TypeOf((*MockRequestHandler)(nil).AMV1TagGet), ctx, id)
}

// AMV1TagGets mocks base method.
func (m *MockRequestHandler) AMV1TagGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1TagGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1TagGets indicates an expected call of AMV1TagGets.
func (mr *MockRequestHandlerMockRecorder) AMV1TagGets(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1TagGets", reflect.TypeOf((*MockRequestHandler)(nil).AMV1TagGets), ctx, customerID, pageToken, pageSize)
}

// AMV1TagUpdate mocks base method.
func (m *MockRequestHandler) AMV1TagUpdate(ctx context.Context, id uuid.UUID, name, detail string) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1TagUpdate", ctx, id, name, detail)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1TagUpdate indicates an expected call of AMV1TagUpdate.
func (mr *MockRequestHandlerMockRecorder) AMV1TagUpdate(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1TagUpdate", reflect.TypeOf((*MockRequestHandler)(nil).AMV1TagUpdate), ctx, id, name, detail)
}

// AstAMIRedirect mocks base method.
func (m *MockRequestHandler) AstAMIRedirect(ctx context.Context, asteriskID, channelID, context, exten, priority string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAMIRedirect", ctx, asteriskID, channelID, context, exten, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAMIRedirect indicates an expected call of AstAMIRedirect.
func (mr *MockRequestHandlerMockRecorder) AstAMIRedirect(ctx, asteriskID, channelID, context, exten, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAMIRedirect", reflect.TypeOf((*MockRequestHandler)(nil).AstAMIRedirect), ctx, asteriskID, channelID, context, exten, priority)
}

// AstBridgeAddChannel mocks base method.
func (m *MockRequestHandler) AstBridgeAddChannel(ctx context.Context, asteriskID, bridgeID, channelID, role string, absorbDTMF, mute bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeAddChannel", ctx, asteriskID, bridgeID, channelID, role, absorbDTMF, mute)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeAddChannel indicates an expected call of AstBridgeAddChannel.
func (mr *MockRequestHandlerMockRecorder) AstBridgeAddChannel(ctx, asteriskID, bridgeID, channelID, role, absorbDTMF, mute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeAddChannel", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeAddChannel), ctx, asteriskID, bridgeID, channelID, role, absorbDTMF, mute)
}

// AstBridgeCreate mocks base method.
func (m *MockRequestHandler) AstBridgeCreate(ctx context.Context, asteriskID, bridgeID, bridgeName string, bridgeType []bridge.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeCreate", ctx, asteriskID, bridgeID, bridgeName, bridgeType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeCreate indicates an expected call of AstBridgeCreate.
func (mr *MockRequestHandlerMockRecorder) AstBridgeCreate(ctx, asteriskID, bridgeID, bridgeName, bridgeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeCreate", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeCreate), ctx, asteriskID, bridgeID, bridgeName, bridgeType)
}

// AstBridgeDelete mocks base method.
func (m *MockRequestHandler) AstBridgeDelete(ctx context.Context, asteriskID, bridgeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeDelete", ctx, asteriskID, bridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeDelete indicates an expected call of AstBridgeDelete.
func (mr *MockRequestHandlerMockRecorder) AstBridgeDelete(ctx, asteriskID, bridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeDelete", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeDelete), ctx, asteriskID, bridgeID)
}

// AstBridgeGet mocks base method.
func (m *MockRequestHandler) AstBridgeGet(ctx context.Context, asteriskID, bridgeID string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeGet", ctx, asteriskID, bridgeID)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstBridgeGet indicates an expected call of AstBridgeGet.
func (mr *MockRequestHandlerMockRecorder) AstBridgeGet(ctx, asteriskID, bridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeGet", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeGet), ctx, asteriskID, bridgeID)
}

// AstBridgeRemoveChannel mocks base method.
func (m *MockRequestHandler) AstBridgeRemoveChannel(ctx context.Context, asteriskID, bridgeID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeRemoveChannel", ctx, asteriskID, bridgeID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeRemoveChannel indicates an expected call of AstBridgeRemoveChannel.
func (mr *MockRequestHandlerMockRecorder) AstBridgeRemoveChannel(ctx, asteriskID, bridgeID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeRemoveChannel", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeRemoveChannel), ctx, asteriskID, bridgeID, channelID)
}

// AstChannelAnswer mocks base method.
func (m *MockRequestHandler) AstChannelAnswer(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelAnswer", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelAnswer indicates an expected call of AstChannelAnswer.
func (mr *MockRequestHandlerMockRecorder) AstChannelAnswer(ctx, asteriskID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelAnswer", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelAnswer), ctx, asteriskID, channelID)
}

// AstChannelContinue mocks base method.
func (m *MockRequestHandler) AstChannelContinue(ctx context.Context, asteriskID, channelID, context, ext string, pri int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelContinue", ctx, asteriskID, channelID, context, ext, pri, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelContinue indicates an expected call of AstChannelContinue.
func (mr *MockRequestHandlerMockRecorder) AstChannelContinue(ctx, asteriskID, channelID, context, ext, pri, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelContinue", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelContinue), ctx, asteriskID, channelID, context, ext, pri, label)
}

// AstChannelCreate mocks base method.
func (m *MockRequestHandler) AstChannelCreate(ctx context.Context, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats string, variables map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelCreate", ctx, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats, variables)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelCreate indicates an expected call of AstChannelCreate.
func (mr *MockRequestHandlerMockRecorder) AstChannelCreate(ctx, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelCreate", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelCreate), ctx, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats, variables)
}

// AstChannelCreateSnoop mocks base method.
func (m *MockRequestHandler) AstChannelCreateSnoop(ctx context.Context, asteriskID, channelID, snoopID, appArgs string, spy, whisper channel.SnoopDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelCreateSnoop", ctx, asteriskID, channelID, snoopID, appArgs, spy, whisper)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelCreateSnoop indicates an expected call of AstChannelCreateSnoop.
func (mr *MockRequestHandlerMockRecorder) AstChannelCreateSnoop(ctx, asteriskID, channelID, snoopID, appArgs, spy, whisper interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelCreateSnoop", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelCreateSnoop), ctx, asteriskID, channelID, snoopID, appArgs, spy, whisper)
}

// AstChannelDTMF mocks base method.
func (m *MockRequestHandler) AstChannelDTMF(ctx context.Context, asteriskID, channelID, digit string, duration, before, between, after int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelDTMF", ctx, asteriskID, channelID, digit, duration, before, between, after)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelDTMF indicates an expected call of AstChannelDTMF.
func (mr *MockRequestHandlerMockRecorder) AstChannelDTMF(ctx, asteriskID, channelID, digit, duration, before, between, after interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelDTMF", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelDTMF), ctx, asteriskID, channelID, digit, duration, before, between, after)
}

// AstChannelDial mocks base method.
func (m *MockRequestHandler) AstChannelDial(ctx context.Context, asteriskID, channelID, caller string, timeout int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelDial", ctx, asteriskID, channelID, caller, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelDial indicates an expected call of AstChannelDial.
func (mr *MockRequestHandlerMockRecorder) AstChannelDial(ctx, asteriskID, channelID, caller, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelDial", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelDial), ctx, asteriskID, channelID, caller, timeout)
}

// AstChannelExternalMedia mocks base method.
func (m *MockRequestHandler) AstChannelExternalMedia(ctx context.Context, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data string, variables map[string]string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelExternalMedia", ctx, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data, variables)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstChannelExternalMedia indicates an expected call of AstChannelExternalMedia.
func (mr *MockRequestHandlerMockRecorder) AstChannelExternalMedia(ctx, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelExternalMedia", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelExternalMedia), ctx, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data, variables)
}

// AstChannelGet mocks base method.
func (m *MockRequestHandler) AstChannelGet(ctx context.Context, asteriskID, channelID string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelGet", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstChannelGet indicates an expected call of AstChannelGet.
func (mr *MockRequestHandlerMockRecorder) AstChannelGet(ctx, asteriskID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelGet", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelGet), ctx, asteriskID, channelID)
}

// AstChannelHangup mocks base method.
func (m *MockRequestHandler) AstChannelHangup(ctx context.Context, asteriskID, channelID string, code ari.ChannelCause, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelHangup", ctx, asteriskID, channelID, code, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelHangup indicates an expected call of AstChannelHangup.
func (mr *MockRequestHandlerMockRecorder) AstChannelHangup(ctx, asteriskID, channelID, code, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelHangup", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelHangup), ctx, asteriskID, channelID, code, delay)
}

// AstChannelPlay mocks base method.
func (m *MockRequestHandler) AstChannelPlay(ctx context.Context, asteriskID, channelID string, actionID uuid.UUID, medias []string, lang string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelPlay", ctx, asteriskID, channelID, actionID, medias, lang)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelPlay indicates an expected call of AstChannelPlay.
func (mr *MockRequestHandlerMockRecorder) AstChannelPlay(ctx, asteriskID, channelID, actionID, medias, lang interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelPlay", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelPlay), ctx, asteriskID, channelID, actionID, medias, lang)
}

// AstChannelRecord mocks base method.
func (m *MockRequestHandler) AstChannelRecord(ctx context.Context, asteriskID, channelID, filename, format string, duration, silence int, beep bool, endKey, ifExists string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelRecord", ctx, asteriskID, channelID, filename, format, duration, silence, beep, endKey, ifExists)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelRecord indicates an expected call of AstChannelRecord.
func (mr *MockRequestHandlerMockRecorder) AstChannelRecord(ctx, asteriskID, channelID, filename, format, duration, silence, beep, endKey, ifExists interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelRecord", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelRecord), ctx, asteriskID, channelID, filename, format, duration, silence, beep, endKey, ifExists)
}

// AstChannelRing mocks base method.
func (m *MockRequestHandler) AstChannelRing(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelRing", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelRing indicates an expected call of AstChannelRing.
func (mr *MockRequestHandlerMockRecorder) AstChannelRing(ctx, asteriskID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelRing", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelRing), ctx, asteriskID, channelID)
}

// AstChannelVariableSet mocks base method.
func (m *MockRequestHandler) AstChannelVariableSet(ctx context.Context, asteriskID, channelID, variable, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelVariableSet", ctx, asteriskID, channelID, variable, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelVariableSet indicates an expected call of AstChannelVariableSet.
func (mr *MockRequestHandlerMockRecorder) AstChannelVariableSet(ctx, asteriskID, channelID, variable, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelVariableSet", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelVariableSet), ctx, asteriskID, channelID, variable, value)
}

// AstPlaybackStop mocks base method.
func (m *MockRequestHandler) AstPlaybackStop(ctx context.Context, asteriskID, playabckID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstPlaybackStop", ctx, asteriskID, playabckID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstPlaybackStop indicates an expected call of AstPlaybackStop.
func (mr *MockRequestHandlerMockRecorder) AstPlaybackStop(ctx, asteriskID, playabckID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstPlaybackStop", reflect.TypeOf((*MockRequestHandler)(nil).AstPlaybackStop), ctx, asteriskID, playabckID)
}

// CAV1CampaignCreate mocks base method.
func (m *MockRequestHandler) CAV1CampaignCreate(ctx context.Context, id, customerID uuid.UUID, campaignType campaign.Type, name, detail string, serviceLevel int, endHandle campaign.EndHandle, actions []action.Action, outplanID, outdialID, queueID, nextCampaignID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignCreate", ctx, id, customerID, campaignType, name, detail, serviceLevel, endHandle, actions, outplanID, outdialID, queueID, nextCampaignID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1CampaignCreate indicates an expected call of CAV1CampaignCreate.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignCreate(ctx, id, customerID, campaignType, name, detail, serviceLevel, endHandle, actions, outplanID, outdialID, queueID, nextCampaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignCreate", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignCreate), ctx, id, customerID, campaignType, name, detail, serviceLevel, endHandle, actions, outplanID, outdialID, queueID, nextCampaignID)
}

// CAV1CampaignDelete mocks base method.
func (m *MockRequestHandler) CAV1CampaignDelete(ctx context.Context, campaignID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignDelete", ctx, campaignID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1CampaignDelete indicates an expected call of CAV1CampaignDelete.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignDelete(ctx, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignDelete", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignDelete), ctx, campaignID)
}

// CAV1CampaignExecute mocks base method.
func (m *MockRequestHandler) CAV1CampaignExecute(ctx context.Context, id uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignExecute", ctx, id, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// CAV1CampaignExecute indicates an expected call of CAV1CampaignExecute.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignExecute(ctx, id, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignExecute", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignExecute), ctx, id, delay)
}

// CAV1CampaignGet mocks base method.
func (m *MockRequestHandler) CAV1CampaignGet(ctx context.Context, id uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignGet", ctx, id)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1CampaignGet indicates an expected call of CAV1CampaignGet.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignGet", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignGet), ctx, id)
}

// CAV1CampaignGetsByCustomerID mocks base method.
func (m *MockRequestHandler) CAV1CampaignGetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignGetsByCustomerID", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1CampaignGetsByCustomerID indicates an expected call of CAV1CampaignGetsByCustomerID.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignGetsByCustomerID(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignGetsByCustomerID", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignGetsByCustomerID), ctx, customerID, pageToken, pageSize)
}

// CAV1CampaignUpdateActions mocks base method.
func (m *MockRequestHandler) CAV1CampaignUpdateActions(ctx context.Context, id uuid.UUID, actions []action.Action) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignUpdateActions", ctx, id, actions)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1CampaignUpdateActions indicates an expected call of CAV1CampaignUpdateActions.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignUpdateActions(ctx, id, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignUpdateActions", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignUpdateActions), ctx, id, actions)
}

// CAV1CampaignUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) CAV1CampaignUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1CampaignUpdateBasicInfo indicates an expected call of CAV1CampaignUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignUpdateBasicInfo), ctx, id, name, detail)
}

// CAV1CampaignUpdateNextCampaignID mocks base method.
func (m *MockRequestHandler) CAV1CampaignUpdateNextCampaignID(ctx context.Context, id, nextCampaignID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignUpdateNextCampaignID", ctx, id, nextCampaignID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1CampaignUpdateNextCampaignID indicates an expected call of CAV1CampaignUpdateNextCampaignID.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignUpdateNextCampaignID(ctx, id, nextCampaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignUpdateNextCampaignID", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignUpdateNextCampaignID), ctx, id, nextCampaignID)
}

// CAV1CampaignUpdateResourceInfo mocks base method.
func (m *MockRequestHandler) CAV1CampaignUpdateResourceInfo(ctx context.Context, id, outplanID, outdialID, queueID uuid.UUID) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignUpdateResourceInfo", ctx, id, outplanID, outdialID, queueID)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1CampaignUpdateResourceInfo indicates an expected call of CAV1CampaignUpdateResourceInfo.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignUpdateResourceInfo(ctx, id, outplanID, outdialID, queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignUpdateResourceInfo", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignUpdateResourceInfo), ctx, id, outplanID, outdialID, queueID)
}

// CAV1CampaignUpdateServiceLevel mocks base method.
func (m *MockRequestHandler) CAV1CampaignUpdateServiceLevel(ctx context.Context, id uuid.UUID, serviceLevel int) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignUpdateServiceLevel", ctx, id, serviceLevel)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1CampaignUpdateServiceLevel indicates an expected call of CAV1CampaignUpdateServiceLevel.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignUpdateServiceLevel(ctx, id, serviceLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignUpdateServiceLevel", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignUpdateServiceLevel), ctx, id, serviceLevel)
}

// CAV1CampaignUpdateStatus mocks base method.
func (m *MockRequestHandler) CAV1CampaignUpdateStatus(ctx context.Context, id uuid.UUID, status campaign.Status) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1CampaignUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1CampaignUpdateStatus indicates an expected call of CAV1CampaignUpdateStatus.
func (mr *MockRequestHandlerMockRecorder) CAV1CampaignUpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1CampaignUpdateStatus", reflect.TypeOf((*MockRequestHandler)(nil).CAV1CampaignUpdateStatus), ctx, id, status)
}

// CAV1OutplanCreate mocks base method.
func (m *MockRequestHandler) CAV1OutplanCreate(ctx context.Context, customerID uuid.UUID, name, detail string, source *address.Address, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 int) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1OutplanCreate", ctx, customerID, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1OutplanCreate indicates an expected call of CAV1OutplanCreate.
func (mr *MockRequestHandlerMockRecorder) CAV1OutplanCreate(ctx, customerID, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1OutplanCreate", reflect.TypeOf((*MockRequestHandler)(nil).CAV1OutplanCreate), ctx, customerID, name, detail, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
}

// CAV1OutplanDelete mocks base method.
func (m *MockRequestHandler) CAV1OutplanDelete(ctx context.Context, outplanID uuid.UUID) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1OutplanDelete", ctx, outplanID)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1OutplanDelete indicates an expected call of CAV1OutplanDelete.
func (mr *MockRequestHandlerMockRecorder) CAV1OutplanDelete(ctx, outplanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1OutplanDelete", reflect.TypeOf((*MockRequestHandler)(nil).CAV1OutplanDelete), ctx, outplanID)
}

// CAV1OutplanGet mocks base method.
func (m *MockRequestHandler) CAV1OutplanGet(ctx context.Context, id uuid.UUID) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1OutplanGet", ctx, id)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1OutplanGet indicates an expected call of CAV1OutplanGet.
func (mr *MockRequestHandlerMockRecorder) CAV1OutplanGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1OutplanGet", reflect.TypeOf((*MockRequestHandler)(nil).CAV1OutplanGet), ctx, id)
}

// CAV1OutplanGetsByCustomerID mocks base method.
func (m *MockRequestHandler) CAV1OutplanGetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1OutplanGetsByCustomerID", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1OutplanGetsByCustomerID indicates an expected call of CAV1OutplanGetsByCustomerID.
func (mr *MockRequestHandlerMockRecorder) CAV1OutplanGetsByCustomerID(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1OutplanGetsByCustomerID", reflect.TypeOf((*MockRequestHandler)(nil).CAV1OutplanGetsByCustomerID), ctx, customerID, pageToken, pageSize)
}

// CAV1OutplanUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) CAV1OutplanUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1OutplanUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1OutplanUpdateBasicInfo indicates an expected call of CAV1OutplanUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) CAV1OutplanUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1OutplanUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).CAV1OutplanUpdateBasicInfo), ctx, id, name, detail)
}

// CAV1OutplanUpdateDialInfo mocks base method.
func (m *MockRequestHandler) CAV1OutplanUpdateDialInfo(ctx context.Context, id uuid.UUID, source *address.Address, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 int) (*outplan.Outplan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAV1OutplanUpdateDialInfo", ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
	ret0, _ := ret[0].(*outplan.Outplan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAV1OutplanUpdateDialInfo indicates an expected call of CAV1OutplanUpdateDialInfo.
func (mr *MockRequestHandlerMockRecorder) CAV1OutplanUpdateDialInfo(ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAV1OutplanUpdateDialInfo", reflect.TypeOf((*MockRequestHandler)(nil).CAV1OutplanUpdateDialInfo), ctx, id, source, dialTimeout, tryInterval, maxTryCount0, maxTryCount1, maxTryCount2, maxTryCount3, maxTryCount4)
}

// CFV1ConferenceCreate mocks base method.
func (m *MockRequestHandler) CFV1ConferenceCreate(ctx context.Context, customerID uuid.UUID, conferenceType conference.Type, name, detail string, timeout int, data map[string]interface{}, preActions, postActions []action.Action) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceCreate", ctx, customerID, conferenceType, name, detail, timeout, data, preActions, postActions)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFV1ConferenceCreate indicates an expected call of CFV1ConferenceCreate.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceCreate(ctx, customerID, conferenceType, name, detail, timeout, data, preActions, postActions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceCreate", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceCreate), ctx, customerID, conferenceType, name, detail, timeout, data, preActions, postActions)
}

// CFV1ConferenceDelete mocks base method.
func (m *MockRequestHandler) CFV1ConferenceDelete(ctx context.Context, conferenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceDelete", ctx, conferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CFV1ConferenceDelete indicates an expected call of CFV1ConferenceDelete.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceDelete(ctx, conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceDelete", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceDelete), ctx, conferenceID)
}

// CFV1ConferenceDeleteDelay mocks base method.
func (m *MockRequestHandler) CFV1ConferenceDeleteDelay(ctx context.Context, conferenceID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceDeleteDelay", ctx, conferenceID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// CFV1ConferenceDeleteDelay indicates an expected call of CFV1ConferenceDeleteDelay.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceDeleteDelay(ctx, conferenceID, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceDeleteDelay", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceDeleteDelay), ctx, conferenceID, delay)
}

// CFV1ConferenceGet mocks base method.
func (m *MockRequestHandler) CFV1ConferenceGet(ctx context.Context, conferenceID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceGet", ctx, conferenceID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFV1ConferenceGet indicates an expected call of CFV1ConferenceGet.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceGet(ctx, conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceGet", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceGet), ctx, conferenceID)
}

// CFV1ConferenceGets mocks base method.
func (m *MockRequestHandler) CFV1ConferenceGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64, conferenceType string) ([]conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceGets", ctx, customerID, pageToken, pageSize, conferenceType)
	ret0, _ := ret[0].([]conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFV1ConferenceGets indicates an expected call of CFV1ConferenceGets.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceGets(ctx, customerID, pageToken, pageSize, conferenceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceGets", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceGets), ctx, customerID, pageToken, pageSize, conferenceType)
}

// CFV1ConferenceKick mocks base method.
func (m *MockRequestHandler) CFV1ConferenceKick(ctx context.Context, conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceKick", ctx, conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CFV1ConferenceKick indicates an expected call of CFV1ConferenceKick.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceKick(ctx, conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceKick", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceKick), ctx, conferenceID, callID)
}

// CFV1ConferenceUpdate mocks base method.
func (m *MockRequestHandler) CFV1ConferenceUpdate(ctx context.Context, id uuid.UUID, name, detail string, timeout int, preActions, postActions []action.Action) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceUpdate", ctx, id, name, detail, timeout, preActions, postActions)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFV1ConferenceUpdate indicates an expected call of CFV1ConferenceUpdate.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceUpdate(ctx, id, name, detail, timeout, preActions, postActions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceUpdate", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceUpdate), ctx, id, name, detail, timeout, preActions, postActions)
}

// CMV1CallActionNext mocks base method.
func (m *MockRequestHandler) CMV1CallActionNext(ctx context.Context, callID uuid.UUID, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallActionNext", ctx, callID, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1CallActionNext indicates an expected call of CMV1CallActionNext.
func (mr *MockRequestHandlerMockRecorder) CMV1CallActionNext(ctx, callID, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallActionNext", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallActionNext), ctx, callID, force)
}

// CMV1CallActionTimeout mocks base method.
func (m *MockRequestHandler) CMV1CallActionTimeout(ctx context.Context, id uuid.UUID, delay int, a *action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallActionTimeout", ctx, id, delay, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1CallActionTimeout indicates an expected call of CMV1CallActionTimeout.
func (mr *MockRequestHandlerMockRecorder) CMV1CallActionTimeout(ctx, id, delay, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallActionTimeout", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallActionTimeout), ctx, id, delay, a)
}

// CMV1CallAddChainedCall mocks base method.
func (m *MockRequestHandler) CMV1CallAddChainedCall(ctx context.Context, callID, chainedCallID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallAddChainedCall", ctx, callID, chainedCallID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallAddChainedCall indicates an expected call of CMV1CallAddChainedCall.
func (mr *MockRequestHandlerMockRecorder) CMV1CallAddChainedCall(ctx, callID, chainedCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallAddChainedCall", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallAddChainedCall), ctx, callID, chainedCallID)
}

// CMV1CallAddExternalMedia mocks base method.
func (m *MockRequestHandler) CMV1CallAddExternalMedia(ctx context.Context, callID uuid.UUID, externalHost, encapsulation, transport, connectionType, format, direction string) (*response.V1ResponseCallsIDExternalMediaPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallAddExternalMedia", ctx, callID, externalHost, encapsulation, transport, connectionType, format, direction)
	ret0, _ := ret[0].(*response.V1ResponseCallsIDExternalMediaPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallAddExternalMedia indicates an expected call of CMV1CallAddExternalMedia.
func (mr *MockRequestHandlerMockRecorder) CMV1CallAddExternalMedia(ctx, callID, externalHost, encapsulation, transport, connectionType, format, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallAddExternalMedia", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallAddExternalMedia), ctx, callID, externalHost, encapsulation, transport, connectionType, format, direction)
}

// CMV1CallCreateWithID mocks base method.
func (m *MockRequestHandler) CMV1CallCreateWithID(ctx context.Context, id, customerID, flowID, activeflowID, masterCallID uuid.UUID, source, destination *address.Address) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallCreateWithID", ctx, id, customerID, flowID, activeflowID, masterCallID, source, destination)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallCreateWithID indicates an expected call of CMV1CallCreateWithID.
func (mr *MockRequestHandlerMockRecorder) CMV1CallCreateWithID(ctx, id, customerID, flowID, activeflowID, masterCallID, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallCreateWithID", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallCreateWithID), ctx, id, customerID, flowID, activeflowID, masterCallID, source, destination)
}

// CMV1CallGet mocks base method.
func (m *MockRequestHandler) CMV1CallGet(ctx context.Context, callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallGet", ctx, callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallGet indicates an expected call of CMV1CallGet.
func (mr *MockRequestHandlerMockRecorder) CMV1CallGet(ctx, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallGet", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallGet), ctx, callID)
}

// CMV1CallGetDigits mocks base method.
func (m *MockRequestHandler) CMV1CallGetDigits(ctx context.Context, callID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallGetDigits", ctx, callID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallGetDigits indicates an expected call of CMV1CallGetDigits.
func (mr *MockRequestHandlerMockRecorder) CMV1CallGetDigits(ctx, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallGetDigits", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallGetDigits), ctx, callID)
}

// CMV1CallGets mocks base method.
func (m *MockRequestHandler) CMV1CallGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallGets indicates an expected call of CMV1CallGets.
func (mr *MockRequestHandlerMockRecorder) CMV1CallGets(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallGets", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallGets), ctx, customerID, pageToken, pageSize)
}

// CMV1CallHangup mocks base method.
func (m *MockRequestHandler) CMV1CallHangup(ctx context.Context, callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallHangup", ctx, callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallHangup indicates an expected call of CMV1CallHangup.
func (mr *MockRequestHandlerMockRecorder) CMV1CallHangup(ctx, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallHangup", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallHangup), ctx, callID)
}

// CMV1CallHealth mocks base method.
func (m *MockRequestHandler) CMV1CallHealth(ctx context.Context, id uuid.UUID, delay, retryCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallHealth", ctx, id, delay, retryCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1CallHealth indicates an expected call of CMV1CallHealth.
func (mr *MockRequestHandlerMockRecorder) CMV1CallHealth(ctx, id, delay, retryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallHealth", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallHealth), ctx, id, delay, retryCount)
}

// CMV1CallRemoveChainedCall mocks base method.
func (m *MockRequestHandler) CMV1CallRemoveChainedCall(ctx context.Context, callID, chainedCallID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallRemoveChainedCall", ctx, callID, chainedCallID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallRemoveChainedCall indicates an expected call of CMV1CallRemoveChainedCall.
func (mr *MockRequestHandlerMockRecorder) CMV1CallRemoveChainedCall(ctx, callID, chainedCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallRemoveChainedCall", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallRemoveChainedCall), ctx, callID, chainedCallID)
}

// CMV1CallSetDigits mocks base method.
func (m *MockRequestHandler) CMV1CallSetDigits(ctx context.Context, callID uuid.UUID, digits string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallSetDigits", ctx, callID, digits)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1CallSetDigits indicates an expected call of CMV1CallSetDigits.
func (mr *MockRequestHandlerMockRecorder) CMV1CallSetDigits(ctx, callID, digits interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallSetDigits", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallSetDigits), ctx, callID, digits)
}

// CMV1CallsCreate mocks base method.
func (m *MockRequestHandler) CMV1CallsCreate(ctx context.Context, customerID, flowID, masterCallID uuid.UUID, source *address.Address, destination []address.Address) ([]call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallsCreate", ctx, customerID, flowID, masterCallID, source, destination)
	ret0, _ := ret[0].([]call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallsCreate indicates an expected call of CMV1CallsCreate.
func (mr *MockRequestHandlerMockRecorder) CMV1CallsCreate(ctx, customerID, flowID, masterCallID, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallsCreate", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallsCreate), ctx, customerID, flowID, masterCallID, source, destination)
}

// CMV1ChannelHealth mocks base method.
func (m *MockRequestHandler) CMV1ChannelHealth(ctx context.Context, asteriskID, channelID string, delay, retryCount, retryCountMax int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1ChannelHealth", ctx, asteriskID, channelID, delay, retryCount, retryCountMax)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1ChannelHealth indicates an expected call of CMV1ChannelHealth.
func (mr *MockRequestHandlerMockRecorder) CMV1ChannelHealth(ctx, asteriskID, channelID, delay, retryCount, retryCountMax interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1ChannelHealth", reflect.TypeOf((*MockRequestHandler)(nil).CMV1ChannelHealth), ctx, asteriskID, channelID, delay, retryCount, retryCountMax)
}

// CMV1ConfbridgeCallAdd mocks base method.
func (m *MockRequestHandler) CMV1ConfbridgeCallAdd(ctx context.Context, conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1ConfbridgeCallAdd", ctx, conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1ConfbridgeCallAdd indicates an expected call of CMV1ConfbridgeCallAdd.
func (mr *MockRequestHandlerMockRecorder) CMV1ConfbridgeCallAdd(ctx, conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1ConfbridgeCallAdd", reflect.TypeOf((*MockRequestHandler)(nil).CMV1ConfbridgeCallAdd), ctx, conferenceID, callID)
}

// CMV1ConfbridgeCallKick mocks base method.
func (m *MockRequestHandler) CMV1ConfbridgeCallKick(ctx context.Context, conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1ConfbridgeCallKick", ctx, conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1ConfbridgeCallKick indicates an expected call of CMV1ConfbridgeCallKick.
func (mr *MockRequestHandlerMockRecorder) CMV1ConfbridgeCallKick(ctx, conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1ConfbridgeCallKick", reflect.TypeOf((*MockRequestHandler)(nil).CMV1ConfbridgeCallKick), ctx, conferenceID, callID)
}

// CMV1ConfbridgeCreate mocks base method.
func (m *MockRequestHandler) CMV1ConfbridgeCreate(ctx context.Context, confbridgeType confbridge.Type) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1ConfbridgeCreate", ctx, confbridgeType)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1ConfbridgeCreate indicates an expected call of CMV1ConfbridgeCreate.
func (mr *MockRequestHandlerMockRecorder) CMV1ConfbridgeCreate(ctx, confbridgeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1ConfbridgeCreate", reflect.TypeOf((*MockRequestHandler)(nil).CMV1ConfbridgeCreate), ctx, confbridgeType)
}

// CMV1ConfbridgeDelete mocks base method.
func (m *MockRequestHandler) CMV1ConfbridgeDelete(ctx context.Context, conferenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1ConfbridgeDelete", ctx, conferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1ConfbridgeDelete indicates an expected call of CMV1ConfbridgeDelete.
func (mr *MockRequestHandlerMockRecorder) CMV1ConfbridgeDelete(ctx, conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1ConfbridgeDelete", reflect.TypeOf((*MockRequestHandler)(nil).CMV1ConfbridgeDelete), ctx, conferenceID)
}

// CMV1RecordingGet mocks base method.
func (m *MockRequestHandler) CMV1RecordingGet(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1RecordingGet", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1RecordingGet indicates an expected call of CMV1RecordingGet.
func (mr *MockRequestHandlerMockRecorder) CMV1RecordingGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1RecordingGet", reflect.TypeOf((*MockRequestHandler)(nil).CMV1RecordingGet), ctx, id)
}

// CMV1RecordingGets mocks base method.
func (m *MockRequestHandler) CMV1RecordingGets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1RecordingGets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1RecordingGets indicates an expected call of CMV1RecordingGets.
func (mr *MockRequestHandlerMockRecorder) CMV1RecordingGets(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1RecordingGets", reflect.TypeOf((*MockRequestHandler)(nil).CMV1RecordingGets), ctx, customerID, size, token)
}

// CSV1CustomerCreate mocks base method.
func (m *MockRequestHandler) CSV1CustomerCreate(ctx context.Context, requestTimeout int, username, password, name, detail string, webhookMethod customer.WebhookMethod, webhookURI string, permissionIDs []uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSV1CustomerCreate", ctx, requestTimeout, username, password, name, detail, webhookMethod, webhookURI, permissionIDs)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CSV1CustomerCreate indicates an expected call of CSV1CustomerCreate.
func (mr *MockRequestHandlerMockRecorder) CSV1CustomerCreate(ctx, requestTimeout, username, password, name, detail, webhookMethod, webhookURI, permissionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSV1CustomerCreate", reflect.TypeOf((*MockRequestHandler)(nil).CSV1CustomerCreate), ctx, requestTimeout, username, password, name, detail, webhookMethod, webhookURI, permissionIDs)
}

// CSV1CustomerDelete mocks base method.
func (m *MockRequestHandler) CSV1CustomerDelete(ctx context.Context, id uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSV1CustomerDelete", ctx, id)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CSV1CustomerDelete indicates an expected call of CSV1CustomerDelete.
func (mr *MockRequestHandlerMockRecorder) CSV1CustomerDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSV1CustomerDelete", reflect.TypeOf((*MockRequestHandler)(nil).CSV1CustomerDelete), ctx, id)
}

// CSV1CustomerGet mocks base method.
func (m *MockRequestHandler) CSV1CustomerGet(ctx context.Context, customerID uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSV1CustomerGet", ctx, customerID)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CSV1CustomerGet indicates an expected call of CSV1CustomerGet.
func (mr *MockRequestHandlerMockRecorder) CSV1CustomerGet(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSV1CustomerGet", reflect.TypeOf((*MockRequestHandler)(nil).CSV1CustomerGet), ctx, customerID)
}

// CSV1CustomerGets mocks base method.
func (m *MockRequestHandler) CSV1CustomerGets(ctx context.Context, pageToken string, pageSize uint64) ([]customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSV1CustomerGets", ctx, pageToken, pageSize)
	ret0, _ := ret[0].([]customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CSV1CustomerGets indicates an expected call of CSV1CustomerGets.
func (mr *MockRequestHandlerMockRecorder) CSV1CustomerGets(ctx, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSV1CustomerGets", reflect.TypeOf((*MockRequestHandler)(nil).CSV1CustomerGets), ctx, pageToken, pageSize)
}

// CSV1CustomerUpdate mocks base method.
func (m *MockRequestHandler) CSV1CustomerUpdate(ctx context.Context, id uuid.UUID, name, detail string, webhookMethod customer.WebhookMethod, webhookURI string) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSV1CustomerUpdate", ctx, id, name, detail, webhookMethod, webhookURI)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CSV1CustomerUpdate indicates an expected call of CSV1CustomerUpdate.
func (mr *MockRequestHandlerMockRecorder) CSV1CustomerUpdate(ctx, id, name, detail, webhookMethod, webhookURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSV1CustomerUpdate", reflect.TypeOf((*MockRequestHandler)(nil).CSV1CustomerUpdate), ctx, id, name, detail, webhookMethod, webhookURI)
}

// CSV1CustomerUpdatePassword mocks base method.
func (m *MockRequestHandler) CSV1CustomerUpdatePassword(ctx context.Context, requestTimeout int, id uuid.UUID, password string) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSV1CustomerUpdatePassword", ctx, requestTimeout, id, password)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CSV1CustomerUpdatePassword indicates an expected call of CSV1CustomerUpdatePassword.
func (mr *MockRequestHandlerMockRecorder) CSV1CustomerUpdatePassword(ctx, requestTimeout, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSV1CustomerUpdatePassword", reflect.TypeOf((*MockRequestHandler)(nil).CSV1CustomerUpdatePassword), ctx, requestTimeout, id, password)
}

// CSV1CustomerUpdatePermissionIDs mocks base method.
func (m *MockRequestHandler) CSV1CustomerUpdatePermissionIDs(ctx context.Context, id uuid.UUID, permissionIDs []uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSV1CustomerUpdatePermissionIDs", ctx, id, permissionIDs)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CSV1CustomerUpdatePermissionIDs indicates an expected call of CSV1CustomerUpdatePermissionIDs.
func (mr *MockRequestHandlerMockRecorder) CSV1CustomerUpdatePermissionIDs(ctx, id, permissionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSV1CustomerUpdatePermissionIDs", reflect.TypeOf((*MockRequestHandler)(nil).CSV1CustomerUpdatePermissionIDs), ctx, id, permissionIDs)
}

// CSV1Login mocks base method.
func (m *MockRequestHandler) CSV1Login(ctx context.Context, timeout int, username, password string) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSV1Login", ctx, timeout, username, password)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CSV1Login indicates an expected call of CSV1Login.
func (mr *MockRequestHandlerMockRecorder) CSV1Login(ctx, timeout, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSV1Login", reflect.TypeOf((*MockRequestHandler)(nil).CSV1Login), ctx, timeout, username, password)
}

// FMV1ActionGet mocks base method.
func (m *MockRequestHandler) FMV1ActionGet(ctx context.Context, flowID, actionID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1ActionGet", ctx, flowID, actionID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1ActionGet indicates an expected call of FMV1ActionGet.
func (mr *MockRequestHandlerMockRecorder) FMV1ActionGet(ctx, flowID, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1ActionGet", reflect.TypeOf((*MockRequestHandler)(nil).FMV1ActionGet), ctx, flowID, actionID)
}

// FMV1ActiveflowCreate mocks base method.
func (m *MockRequestHandler) FMV1ActiveflowCreate(ctx context.Context, id, flowID uuid.UUID, referenceType activeflow.ReferenceType, referenceID uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1ActiveflowCreate", ctx, id, flowID, referenceType, referenceID)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1ActiveflowCreate indicates an expected call of FMV1ActiveflowCreate.
func (mr *MockRequestHandlerMockRecorder) FMV1ActiveflowCreate(ctx, id, flowID, referenceType, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1ActiveflowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FMV1ActiveflowCreate), ctx, id, flowID, referenceType, referenceID)
}

// FMV1ActiveflowDelete mocks base method.
func (m *MockRequestHandler) FMV1ActiveflowDelete(ctx context.Context, activeflowID uuid.UUID) (*activeflow.Activeflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1ActiveflowDelete", ctx, activeflowID)
	ret0, _ := ret[0].(*activeflow.Activeflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1ActiveflowDelete indicates an expected call of FMV1ActiveflowDelete.
func (mr *MockRequestHandlerMockRecorder) FMV1ActiveflowDelete(ctx, activeflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1ActiveflowDelete", reflect.TypeOf((*MockRequestHandler)(nil).FMV1ActiveflowDelete), ctx, activeflowID)
}

// FMV1ActiveflowExecute mocks base method.
func (m *MockRequestHandler) FMV1ActiveflowExecute(ctx context.Context, activeflowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1ActiveflowExecute", ctx, activeflowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FMV1ActiveflowExecute indicates an expected call of FMV1ActiveflowExecute.
func (mr *MockRequestHandlerMockRecorder) FMV1ActiveflowExecute(ctx, activeflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1ActiveflowExecute", reflect.TypeOf((*MockRequestHandler)(nil).FMV1ActiveflowExecute), ctx, activeflowID)
}

// FMV1ActiveflowGetNextAction mocks base method.
func (m *MockRequestHandler) FMV1ActiveflowGetNextAction(ctx context.Context, callID, actionID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1ActiveflowGetNextAction", ctx, callID, actionID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1ActiveflowGetNextAction indicates an expected call of FMV1ActiveflowGetNextAction.
func (mr *MockRequestHandlerMockRecorder) FMV1ActiveflowGetNextAction(ctx, callID, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1ActiveflowGetNextAction", reflect.TypeOf((*MockRequestHandler)(nil).FMV1ActiveflowGetNextAction), ctx, callID, actionID)
}

// FMV1ActiveflowUpdateForwardActionID mocks base method.
func (m *MockRequestHandler) FMV1ActiveflowUpdateForwardActionID(ctx context.Context, callID, forwardActionID uuid.UUID, forwardNow bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1ActiveflowUpdateForwardActionID", ctx, callID, forwardActionID, forwardNow)
	ret0, _ := ret[0].(error)
	return ret0
}

// FMV1ActiveflowUpdateForwardActionID indicates an expected call of FMV1ActiveflowUpdateForwardActionID.
func (mr *MockRequestHandlerMockRecorder) FMV1ActiveflowUpdateForwardActionID(ctx, callID, forwardActionID, forwardNow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1ActiveflowUpdateForwardActionID", reflect.TypeOf((*MockRequestHandler)(nil).FMV1ActiveflowUpdateForwardActionID), ctx, callID, forwardActionID, forwardNow)
}

// FMV1FlowCreate mocks base method.
func (m *MockRequestHandler) FMV1FlowCreate(ctx context.Context, customerID uuid.UUID, flowType flow.Type, name, detail string, actions []action.Action, persist bool) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowCreate", ctx, customerID, flowType, name, detail, actions, persist)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1FlowCreate indicates an expected call of FMV1FlowCreate.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowCreate(ctx, customerID, flowType, name, detail, actions, persist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowCreate), ctx, customerID, flowType, name, detail, actions, persist)
}

// FMV1FlowDelete mocks base method.
func (m *MockRequestHandler) FMV1FlowDelete(ctx context.Context, flowID uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowDelete", ctx, flowID)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1FlowDelete indicates an expected call of FMV1FlowDelete.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowDelete(ctx, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowDelete", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowDelete), ctx, flowID)
}

// FMV1FlowGet mocks base method.
func (m *MockRequestHandler) FMV1FlowGet(ctx context.Context, flowID uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowGet", ctx, flowID)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1FlowGet indicates an expected call of FMV1FlowGet.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowGet(ctx, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowGet", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowGet), ctx, flowID)
}

// FMV1FlowGets mocks base method.
func (m *MockRequestHandler) FMV1FlowGets(ctx context.Context, customerID uuid.UUID, flowType flow.Type, pageToken string, pageSize uint64) ([]flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowGets", ctx, customerID, flowType, pageToken, pageSize)
	ret0, _ := ret[0].([]flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1FlowGets indicates an expected call of FMV1FlowGets.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowGets(ctx, customerID, flowType, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowGets", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowGets), ctx, customerID, flowType, pageToken, pageSize)
}

// FMV1FlowUpdate mocks base method.
func (m *MockRequestHandler) FMV1FlowUpdate(ctx context.Context, f *flow.Flow) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowUpdate", ctx, f)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1FlowUpdate indicates an expected call of FMV1FlowUpdate.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowUpdate(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowUpdate", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowUpdate), ctx, f)
}

// FMV1FlowUpdateActions mocks base method.
func (m *MockRequestHandler) FMV1FlowUpdateActions(ctx context.Context, flowID uuid.UUID, actions []action.Action) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowUpdateActions", ctx, flowID, actions)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1FlowUpdateActions indicates an expected call of FMV1FlowUpdateActions.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowUpdateActions(ctx, flowID, actions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowUpdateActions", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowUpdateActions), ctx, flowID, actions)
}

// MMV1Hook mocks base method.
func (m *MockRequestHandler) MMV1Hook(ctx context.Context, hm *hook.Hook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MMV1Hook", ctx, hm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MMV1Hook indicates an expected call of MMV1Hook.
func (mr *MockRequestHandlerMockRecorder) MMV1Hook(ctx, hm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MMV1Hook", reflect.TypeOf((*MockRequestHandler)(nil).MMV1Hook), ctx, hm)
}

// MMV1MessageDelete mocks base method.
func (m *MockRequestHandler) MMV1MessageDelete(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MMV1MessageDelete", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MMV1MessageDelete indicates an expected call of MMV1MessageDelete.
func (mr *MockRequestHandlerMockRecorder) MMV1MessageDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MMV1MessageDelete", reflect.TypeOf((*MockRequestHandler)(nil).MMV1MessageDelete), ctx, id)
}

// MMV1MessageGet mocks base method.
func (m *MockRequestHandler) MMV1MessageGet(ctx context.Context, id uuid.UUID) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MMV1MessageGet", ctx, id)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MMV1MessageGet indicates an expected call of MMV1MessageGet.
func (mr *MockRequestHandlerMockRecorder) MMV1MessageGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MMV1MessageGet", reflect.TypeOf((*MockRequestHandler)(nil).MMV1MessageGet), ctx, id)
}

// MMV1MessageGets mocks base method.
func (m *MockRequestHandler) MMV1MessageGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MMV1MessageGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MMV1MessageGets indicates an expected call of MMV1MessageGets.
func (mr *MockRequestHandlerMockRecorder) MMV1MessageGets(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MMV1MessageGets", reflect.TypeOf((*MockRequestHandler)(nil).MMV1MessageGets), ctx, customerID, pageToken, pageSize)
}

// MMV1MessageSend mocks base method.
func (m *MockRequestHandler) MMV1MessageSend(ctx context.Context, customerID uuid.UUID, source *address.Address, destinations []address.Address, text string) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MMV1MessageSend", ctx, customerID, source, destinations, text)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MMV1MessageSend indicates an expected call of MMV1MessageSend.
func (mr *MockRequestHandlerMockRecorder) MMV1MessageSend(ctx, customerID, source, destinations, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MMV1MessageSend", reflect.TypeOf((*MockRequestHandler)(nil).MMV1MessageSend), ctx, customerID, source, destinations, text)
}

// NMV1AvailableNumberGets mocks base method.
func (m *MockRequestHandler) NMV1AvailableNumberGets(ctx context.Context, customerID uuid.UUID, pageSize uint64, countryCode string) ([]availablenumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1AvailableNumberGets", ctx, customerID, pageSize, countryCode)
	ret0, _ := ret[0].([]availablenumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1AvailableNumberGets indicates an expected call of NMV1AvailableNumberGets.
func (mr *MockRequestHandlerMockRecorder) NMV1AvailableNumberGets(ctx, customerID, pageSize, countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1AvailableNumberGets", reflect.TypeOf((*MockRequestHandler)(nil).NMV1AvailableNumberGets), ctx, customerID, pageSize, countryCode)
}

// NMV1NumberCreate mocks base method.
func (m *MockRequestHandler) NMV1NumberCreate(ctx context.Context, customerID uuid.UUID, num string, callFlowID, messageFlowID uuid.UUID, name, detail string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberCreate", ctx, customerID, num, callFlowID, messageFlowID, name, detail)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberCreate indicates an expected call of NMV1NumberCreate.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberCreate(ctx, customerID, num, callFlowID, messageFlowID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberCreate", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberCreate), ctx, customerID, num, callFlowID, messageFlowID, name, detail)
}

// NMV1NumberDelete mocks base method.
func (m *MockRequestHandler) NMV1NumberDelete(ctx context.Context, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberDelete", ctx, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberDelete indicates an expected call of NMV1NumberDelete.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberDelete", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberDelete), ctx, id)
}

// NMV1NumberFlowDelete mocks base method.
func (m *MockRequestHandler) NMV1NumberFlowDelete(ctx context.Context, flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberFlowDelete", ctx, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NMV1NumberFlowDelete indicates an expected call of NMV1NumberFlowDelete.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberFlowDelete(ctx, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberFlowDelete", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberFlowDelete), ctx, flowID)
}

// NMV1NumberGet mocks base method.
func (m *MockRequestHandler) NMV1NumberGet(ctx context.Context, numberID uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberGet", ctx, numberID)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberGet indicates an expected call of NMV1NumberGet.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberGet(ctx, numberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberGet", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberGet), ctx, numberID)
}

// NMV1NumberGetByNumber mocks base method.
func (m *MockRequestHandler) NMV1NumberGetByNumber(ctx context.Context, num string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberGetByNumber", ctx, num)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberGetByNumber indicates an expected call of NMV1NumberGetByNumber.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberGetByNumber(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberGetByNumber", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberGetByNumber), ctx, num)
}

// NMV1NumberGets mocks base method.
func (m *MockRequestHandler) NMV1NumberGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberGets indicates an expected call of NMV1NumberGets.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberGets(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberGets", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberGets), ctx, customerID, pageToken, pageSize)
}

// NMV1NumberUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) NMV1NumberUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberUpdateBasicInfo", ctx, id, name, detail)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberUpdateBasicInfo indicates an expected call of NMV1NumberUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberUpdateBasicInfo(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberUpdateBasicInfo), ctx, id, name, detail)
}

// NMV1NumberUpdateFlowID mocks base method.
func (m *MockRequestHandler) NMV1NumberUpdateFlowID(ctx context.Context, id, callFlowID, messageFlowID uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberUpdateFlowID", ctx, id, callFlowID, messageFlowID)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberUpdateFlowID indicates an expected call of NMV1NumberUpdateFlowID.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberUpdateFlowID(ctx, id, callFlowID, messageFlowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberUpdateFlowID", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberUpdateFlowID), ctx, id, callFlowID, messageFlowID)
}

// OMV1OutdialCreate mocks base method.
func (m *MockRequestHandler) OMV1OutdialCreate(ctx context.Context, customerID, campaignID uuid.UUID, name, detail, data string) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialCreate", ctx, customerID, campaignID, name, detail, data)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialCreate indicates an expected call of OMV1OutdialCreate.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialCreate(ctx, customerID, campaignID, name, detail, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialCreate", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialCreate), ctx, customerID, campaignID, name, detail, data)
}

// OMV1OutdialDelete mocks base method.
func (m *MockRequestHandler) OMV1OutdialDelete(ctx context.Context, outdialID uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialDelete", ctx, outdialID)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialDelete indicates an expected call of OMV1OutdialDelete.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialDelete(ctx, outdialID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialDelete", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialDelete), ctx, outdialID)
}

// OMV1OutdialGet mocks base method.
func (m *MockRequestHandler) OMV1OutdialGet(ctx context.Context, id uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialGet", ctx, id)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialGet indicates an expected call of OMV1OutdialGet.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialGet", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialGet), ctx, id)
}

// OMV1OutdialGetsByCustomerID mocks base method.
func (m *MockRequestHandler) OMV1OutdialGetsByCustomerID(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialGetsByCustomerID", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialGetsByCustomerID indicates an expected call of OMV1OutdialGetsByCustomerID.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialGetsByCustomerID(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialGetsByCustomerID", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialGetsByCustomerID), ctx, customerID, pageToken, pageSize)
}

// OMV1OutdialUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) OMV1OutdialUpdateBasicInfo(ctx context.Context, outdialID uuid.UUID, name, detail string) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialUpdateBasicInfo", ctx, outdialID, name, detail)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialUpdateBasicInfo indicates an expected call of OMV1OutdialUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialUpdateBasicInfo(ctx, outdialID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialUpdateBasicInfo), ctx, outdialID, name, detail)
}

// OMV1OutdialUpdateCampaignID mocks base method.
func (m *MockRequestHandler) OMV1OutdialUpdateCampaignID(ctx context.Context, outdialID, campaignID uuid.UUID) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialUpdateCampaignID", ctx, outdialID, campaignID)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialUpdateCampaignID indicates an expected call of OMV1OutdialUpdateCampaignID.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialUpdateCampaignID(ctx, outdialID, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialUpdateCampaignID", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialUpdateCampaignID), ctx, outdialID, campaignID)
}

// OMV1OutdialUpdateData mocks base method.
func (m *MockRequestHandler) OMV1OutdialUpdateData(ctx context.Context, outdialID uuid.UUID, data string) (*outdial.Outdial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialUpdateData", ctx, outdialID, data)
	ret0, _ := ret[0].(*outdial.Outdial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialUpdateData indicates an expected call of OMV1OutdialUpdateData.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialUpdateData(ctx, outdialID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialUpdateData", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialUpdateData), ctx, outdialID, data)
}

// OMV1OutdialtargetCreate mocks base method.
func (m *MockRequestHandler) OMV1OutdialtargetCreate(ctx context.Context, outdialID uuid.UUID, name, detail, data string, destination0, destination1, destination2, destination3, destination4 *address.Address) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialtargetCreate", ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialtargetCreate indicates an expected call of OMV1OutdialtargetCreate.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialtargetCreate(ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialtargetCreate", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialtargetCreate), ctx, outdialID, name, detail, data, destination0, destination1, destination2, destination3, destination4)
}

// OMV1OutdialtargetDelete mocks base method.
func (m *MockRequestHandler) OMV1OutdialtargetDelete(ctx context.Context, outdialtargetID uuid.UUID) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialtargetDelete", ctx, outdialtargetID)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialtargetDelete indicates an expected call of OMV1OutdialtargetDelete.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialtargetDelete(ctx, outdialtargetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialtargetDelete", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialtargetDelete), ctx, outdialtargetID)
}

// OMV1OutdialtargetGet mocks base method.
func (m *MockRequestHandler) OMV1OutdialtargetGet(ctx context.Context, outdialtargetID uuid.UUID) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialtargetGet", ctx, outdialtargetID)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialtargetGet indicates an expected call of OMV1OutdialtargetGet.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialtargetGet(ctx, outdialtargetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialtargetGet", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialtargetGet), ctx, outdialtargetID)
}

// OMV1OutdialtargetGetsAvailable mocks base method.
func (m *MockRequestHandler) OMV1OutdialtargetGetsAvailable(ctx context.Context, outdialID uuid.UUID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, interval, limit int) ([]outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialtargetGetsAvailable", ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, interval, limit)
	ret0, _ := ret[0].([]outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialtargetGetsAvailable indicates an expected call of OMV1OutdialtargetGetsAvailable.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialtargetGetsAvailable(ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, interval, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialtargetGetsAvailable", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialtargetGetsAvailable), ctx, outdialID, tryCount0, tryCount1, tryCount2, tryCount3, tryCount4, interval, limit)
}

// OMV1OutdialtargetUpdateStatus mocks base method.
func (m *MockRequestHandler) OMV1OutdialtargetUpdateStatus(ctx context.Context, outdialtargetID uuid.UUID, status outdialtarget.Status) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialtargetUpdateStatus", ctx, outdialtargetID, status)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialtargetUpdateStatus indicates an expected call of OMV1OutdialtargetUpdateStatus.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialtargetUpdateStatus(ctx, outdialtargetID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialtargetUpdateStatus", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialtargetUpdateStatus), ctx, outdialtargetID, status)
}

// OMV1OutdialtargetUpdateStatusProgressing mocks base method.
func (m *MockRequestHandler) OMV1OutdialtargetUpdateStatusProgressing(ctx context.Context, outdialtargetID uuid.UUID, destinationIndex int) (*outdialtarget.OutdialTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OMV1OutdialtargetUpdateStatusProgressing", ctx, outdialtargetID, destinationIndex)
	ret0, _ := ret[0].(*outdialtarget.OutdialTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OMV1OutdialtargetUpdateStatusProgressing indicates an expected call of OMV1OutdialtargetUpdateStatusProgressing.
func (mr *MockRequestHandlerMockRecorder) OMV1OutdialtargetUpdateStatusProgressing(ctx, outdialtargetID, destinationIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OMV1OutdialtargetUpdateStatusProgressing", reflect.TypeOf((*MockRequestHandler)(nil).OMV1OutdialtargetUpdateStatusProgressing), ctx, outdialtargetID, destinationIndex)
}

// QMV1QueueCreate mocks base method.
func (m *MockRequestHandler) QMV1QueueCreate(ctx context.Context, customerID uuid.UUID, name, detail string, routingMethod queue.RoutingMethod, tagIDs []uuid.UUID, waitActions []action.Action, timeoutWait, timeoutService int) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueCreate", ctx, customerID, name, detail, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueCreate indicates an expected call of QMV1QueueCreate.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueCreate(ctx, customerID, name, detail, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueCreate", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueCreate), ctx, customerID, name, detail, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService)
}

// QMV1QueueCreateQueuecall mocks base method.
func (m *MockRequestHandler) QMV1QueueCreateQueuecall(ctx context.Context, queueID uuid.UUID, referenceType queuecall.ReferenceType, referenceID, referenceActiveflowID, exitActionID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueCreateQueuecall", ctx, queueID, referenceType, referenceID, referenceActiveflowID, exitActionID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueCreateQueuecall indicates an expected call of QMV1QueueCreateQueuecall.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueCreateQueuecall(ctx, queueID, referenceType, referenceID, referenceActiveflowID, exitActionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueCreateQueuecall", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueCreateQueuecall), ctx, queueID, referenceType, referenceID, referenceActiveflowID, exitActionID)
}

// QMV1QueueDelete mocks base method.
func (m *MockRequestHandler) QMV1QueueDelete(ctx context.Context, queueID uuid.UUID) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueDelete", ctx, queueID)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueDelete indicates an expected call of QMV1QueueDelete.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueDelete(ctx, queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueDelete", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueDelete), ctx, queueID)
}

// QMV1QueueGet mocks base method.
func (m *MockRequestHandler) QMV1QueueGet(ctx context.Context, queueID uuid.UUID) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueGet", ctx, queueID)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueGet indicates an expected call of QMV1QueueGet.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueGet(ctx, queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueGet", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueGet), ctx, queueID)
}

// QMV1QueueGetAgents mocks base method.
func (m *MockRequestHandler) QMV1QueueGetAgents(ctx context.Context, queueID uuid.UUID, status agent.Status) ([]agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueGetAgents", ctx, queueID, status)
	ret0, _ := ret[0].([]agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueGetAgents indicates an expected call of QMV1QueueGetAgents.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueGetAgents(ctx, queueID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueGetAgents", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueGetAgents), ctx, queueID, status)
}

// QMV1QueueGets mocks base method.
func (m *MockRequestHandler) QMV1QueueGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueGets indicates an expected call of QMV1QueueGets.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueGets(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueGets", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueGets), ctx, customerID, pageToken, pageSize)
}

// QMV1QueueUpdate mocks base method.
func (m *MockRequestHandler) QMV1QueueUpdate(ctx context.Context, queueID uuid.UUID, name, detail string) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueUpdate", ctx, queueID, name, detail)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueUpdate indicates an expected call of QMV1QueueUpdate.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueUpdate(ctx, queueID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueUpdate", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueUpdate), ctx, queueID, name, detail)
}

// QMV1QueueUpdateActions mocks base method.
func (m *MockRequestHandler) QMV1QueueUpdateActions(ctx context.Context, queueID uuid.UUID, waitActions []action.Action, timeoutWait, timeoutService int) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueUpdateActions", ctx, queueID, waitActions, timeoutWait, timeoutService)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueUpdateActions indicates an expected call of QMV1QueueUpdateActions.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueUpdateActions(ctx, queueID, waitActions, timeoutWait, timeoutService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueUpdateActions", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueUpdateActions), ctx, queueID, waitActions, timeoutWait, timeoutService)
}

// QMV1QueueUpdateRoutingMethod mocks base method.
func (m *MockRequestHandler) QMV1QueueUpdateRoutingMethod(ctx context.Context, queueID uuid.UUID, routingMethod queue.RoutingMethod) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueUpdateRoutingMethod", ctx, queueID, routingMethod)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueUpdateRoutingMethod indicates an expected call of QMV1QueueUpdateRoutingMethod.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueUpdateRoutingMethod(ctx, queueID, routingMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueUpdateRoutingMethod", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueUpdateRoutingMethod), ctx, queueID, routingMethod)
}

// QMV1QueueUpdateTagIDs mocks base method.
func (m *MockRequestHandler) QMV1QueueUpdateTagIDs(ctx context.Context, queueID uuid.UUID, tagIDs []uuid.UUID) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueUpdateTagIDs", ctx, queueID, tagIDs)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueUpdateTagIDs indicates an expected call of QMV1QueueUpdateTagIDs.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueUpdateTagIDs(ctx, queueID, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueUpdateTagIDs", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueUpdateTagIDs), ctx, queueID, tagIDs)
}

// QMV1QueuecallDelete mocks base method.
func (m *MockRequestHandler) QMV1QueuecallDelete(ctx context.Context, queuecallID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallDelete", ctx, queuecallID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueuecallDelete indicates an expected call of QMV1QueuecallDelete.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallDelete(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallDelete", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallDelete), ctx, queuecallID)
}

// QMV1QueuecallDeleteByReferenceID mocks base method.
func (m *MockRequestHandler) QMV1QueuecallDeleteByReferenceID(ctx context.Context, referenceID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallDeleteByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueuecallDeleteByReferenceID indicates an expected call of QMV1QueuecallDeleteByReferenceID.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallDeleteByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallDeleteByReferenceID", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallDeleteByReferenceID), ctx, referenceID)
}

// QMV1QueuecallExecute mocks base method.
func (m *MockRequestHandler) QMV1QueuecallExecute(ctx context.Context, queuecallID uuid.UUID, searchDelay int) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallExecute", ctx, queuecallID, searchDelay)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueuecallExecute indicates an expected call of QMV1QueuecallExecute.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallExecute(ctx, queuecallID, searchDelay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallExecute", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallExecute), ctx, queuecallID, searchDelay)
}

// QMV1QueuecallGet mocks base method.
func (m *MockRequestHandler) QMV1QueuecallGet(ctx context.Context, queuecallID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallGet", ctx, queuecallID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueuecallGet indicates an expected call of QMV1QueuecallGet.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallGet(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallGet", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallGet), ctx, queuecallID)
}

// QMV1QueuecallGets mocks base method.
func (m *MockRequestHandler) QMV1QueuecallGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueuecallGets indicates an expected call of QMV1QueuecallGets.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallGets(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallGets", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallGets), ctx, customerID, pageToken, pageSize)
}

// QMV1QueuecallReferenceGet mocks base method.
func (m *MockRequestHandler) QMV1QueuecallReferenceGet(ctx context.Context, referenceID uuid.UUID) (*queuecallreference.QueuecallReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallReferenceGet", ctx, referenceID)
	ret0, _ := ret[0].(*queuecallreference.QueuecallReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueuecallReferenceGet indicates an expected call of QMV1QueuecallReferenceGet.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallReferenceGet(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallReferenceGet", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallReferenceGet), ctx, referenceID)
}

// QMV1QueuecallSearchAgent mocks base method.
func (m *MockRequestHandler) QMV1QueuecallSearchAgent(ctx context.Context, queuecallID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallSearchAgent", ctx, queuecallID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueuecallSearchAgent indicates an expected call of QMV1QueuecallSearchAgent.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallSearchAgent(ctx, queuecallID, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallSearchAgent", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallSearchAgent), ctx, queuecallID, delay)
}

// QMV1QueuecallTimeoutService mocks base method.
func (m *MockRequestHandler) QMV1QueuecallTimeoutService(ctx context.Context, queuecallID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallTimeoutService", ctx, queuecallID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueuecallTimeoutService indicates an expected call of QMV1QueuecallTimeoutService.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallTimeoutService(ctx, queuecallID, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallTimeoutService", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallTimeoutService), ctx, queuecallID, delay)
}

// QMV1QueuecallTimeoutWait mocks base method.
func (m *MockRequestHandler) QMV1QueuecallTimeoutWait(ctx context.Context, queuecallID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallTimeoutWait", ctx, queuecallID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueuecallTimeoutWait indicates an expected call of QMV1QueuecallTimeoutWait.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallTimeoutWait(ctx, queuecallID, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallTimeoutWait", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallTimeoutWait), ctx, queuecallID, delay)
}

// RMV1ContactGets mocks base method.
func (m *MockRequestHandler) RMV1ContactGets(ctx context.Context, endpoint string) ([]*astcontact.AstContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ContactGets", ctx, endpoint)
	ret0, _ := ret[0].([]*astcontact.AstContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ContactGets indicates an expected call of RMV1ContactGets.
func (mr *MockRequestHandlerMockRecorder) RMV1ContactGets(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ContactGets", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ContactGets), ctx, endpoint)
}

// RMV1ContactUpdate mocks base method.
func (m *MockRequestHandler) RMV1ContactUpdate(ctx context.Context, endpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ContactUpdate", ctx, endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// RMV1ContactUpdate indicates an expected call of RMV1ContactUpdate.
func (mr *MockRequestHandlerMockRecorder) RMV1ContactUpdate(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ContactUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ContactUpdate), ctx, endpoint)
}

// RMV1DomainCreate mocks base method.
func (m *MockRequestHandler) RMV1DomainCreate(ctx context.Context, customerID uuid.UUID, domainName, name, detail string) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1DomainCreate", ctx, customerID, domainName, name, detail)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1DomainCreate indicates an expected call of RMV1DomainCreate.
func (mr *MockRequestHandlerMockRecorder) RMV1DomainCreate(ctx, customerID, domainName, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1DomainCreate", reflect.TypeOf((*MockRequestHandler)(nil).RMV1DomainCreate), ctx, customerID, domainName, name, detail)
}

// RMV1DomainDelete mocks base method.
func (m *MockRequestHandler) RMV1DomainDelete(ctx context.Context, domainID uuid.UUID) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1DomainDelete", ctx, domainID)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1DomainDelete indicates an expected call of RMV1DomainDelete.
func (mr *MockRequestHandlerMockRecorder) RMV1DomainDelete(ctx, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1DomainDelete", reflect.TypeOf((*MockRequestHandler)(nil).RMV1DomainDelete), ctx, domainID)
}

// RMV1DomainGet mocks base method.
func (m *MockRequestHandler) RMV1DomainGet(ctx context.Context, domainID uuid.UUID) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1DomainGet", ctx, domainID)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1DomainGet indicates an expected call of RMV1DomainGet.
func (mr *MockRequestHandlerMockRecorder) RMV1DomainGet(ctx, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1DomainGet", reflect.TypeOf((*MockRequestHandler)(nil).RMV1DomainGet), ctx, domainID)
}

// RMV1DomainGets mocks base method.
func (m *MockRequestHandler) RMV1DomainGets(ctx context.Context, customerID uuid.UUID, pageToken string, pageSize uint64) ([]domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1DomainGets", ctx, customerID, pageToken, pageSize)
	ret0, _ := ret[0].([]domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1DomainGets indicates an expected call of RMV1DomainGets.
func (mr *MockRequestHandlerMockRecorder) RMV1DomainGets(ctx, customerID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1DomainGets", reflect.TypeOf((*MockRequestHandler)(nil).RMV1DomainGets), ctx, customerID, pageToken, pageSize)
}

// RMV1DomainUpdate mocks base method.
func (m *MockRequestHandler) RMV1DomainUpdate(ctx context.Context, id uuid.UUID, name, detail string) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1DomainUpdate", ctx, id, name, detail)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1DomainUpdate indicates an expected call of RMV1DomainUpdate.
func (mr *MockRequestHandlerMockRecorder) RMV1DomainUpdate(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1DomainUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RMV1DomainUpdate), ctx, id, name, detail)
}

// RMV1ExtensionCreate mocks base method.
func (m *MockRequestHandler) RMV1ExtensionCreate(ctx context.Context, customerID uuid.UUID, ext, password string, domainID uuid.UUID, name, detail string) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ExtensionCreate", ctx, customerID, ext, password, domainID, name, detail)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ExtensionCreate indicates an expected call of RMV1ExtensionCreate.
func (mr *MockRequestHandlerMockRecorder) RMV1ExtensionCreate(ctx, customerID, ext, password, domainID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ExtensionCreate", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ExtensionCreate), ctx, customerID, ext, password, domainID, name, detail)
}

// RMV1ExtensionDelete mocks base method.
func (m *MockRequestHandler) RMV1ExtensionDelete(ctx context.Context, extensionID uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ExtensionDelete", ctx, extensionID)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ExtensionDelete indicates an expected call of RMV1ExtensionDelete.
func (mr *MockRequestHandlerMockRecorder) RMV1ExtensionDelete(ctx, extensionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ExtensionDelete", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ExtensionDelete), ctx, extensionID)
}

// RMV1ExtensionGet mocks base method.
func (m *MockRequestHandler) RMV1ExtensionGet(ctx context.Context, extensionID uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ExtensionGet", ctx, extensionID)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ExtensionGet indicates an expected call of RMV1ExtensionGet.
func (mr *MockRequestHandlerMockRecorder) RMV1ExtensionGet(ctx, extensionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ExtensionGet", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ExtensionGet), ctx, extensionID)
}

// RMV1ExtensionGets mocks base method.
func (m *MockRequestHandler) RMV1ExtensionGets(ctx context.Context, domainID uuid.UUID, pageToken string, pageSize uint64) ([]extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ExtensionGets", ctx, domainID, pageToken, pageSize)
	ret0, _ := ret[0].([]extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ExtensionGets indicates an expected call of RMV1ExtensionGets.
func (mr *MockRequestHandlerMockRecorder) RMV1ExtensionGets(ctx, domainID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ExtensionGets", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ExtensionGets), ctx, domainID, pageToken, pageSize)
}

// RMV1ExtensionUpdate mocks base method.
func (m *MockRequestHandler) RMV1ExtensionUpdate(ctx context.Context, id uuid.UUID, name, detail, password string) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ExtensionUpdate", ctx, id, name, detail, password)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ExtensionUpdate indicates an expected call of RMV1ExtensionUpdate.
func (mr *MockRequestHandlerMockRecorder) RMV1ExtensionUpdate(ctx, id, name, detail, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ExtensionUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ExtensionUpdate), ctx, id, name, detail, password)
}

// SMV1RecordingGet mocks base method.
func (m *MockRequestHandler) SMV1RecordingGet(ctx context.Context, id uuid.UUID) (*bucketrecording.BucketRecording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMV1RecordingGet", ctx, id)
	ret0, _ := ret[0].(*bucketrecording.BucketRecording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMV1RecordingGet indicates an expected call of SMV1RecordingGet.
func (mr *MockRequestHandlerMockRecorder) SMV1RecordingGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMV1RecordingGet", reflect.TypeOf((*MockRequestHandler)(nil).SMV1RecordingGet), ctx, id)
}

// TMV1SpeecheCreate mocks base method.
func (m *MockRequestHandler) TMV1SpeecheCreate(ctx context.Context, callID uuid.UUID, text, gender, language string, timeout int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TMV1SpeecheCreate", ctx, callID, text, gender, language, timeout)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TMV1SpeecheCreate indicates an expected call of TMV1SpeecheCreate.
func (mr *MockRequestHandlerMockRecorder) TMV1SpeecheCreate(ctx, callID, text, gender, language, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TMV1SpeecheCreate", reflect.TypeOf((*MockRequestHandler)(nil).TMV1SpeecheCreate), ctx, callID, text, gender, language, timeout)
}

// TSV1CallRecordingCreate mocks base method.
func (m *MockRequestHandler) TSV1CallRecordingCreate(ctx context.Context, customerID, callID uuid.UUID, language string, timeout, delay int) ([]transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSV1CallRecordingCreate", ctx, customerID, callID, language, timeout, delay)
	ret0, _ := ret[0].([]transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TSV1CallRecordingCreate indicates an expected call of TSV1CallRecordingCreate.
func (mr *MockRequestHandlerMockRecorder) TSV1CallRecordingCreate(ctx, customerID, callID, language, timeout, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSV1CallRecordingCreate", reflect.TypeOf((*MockRequestHandler)(nil).TSV1CallRecordingCreate), ctx, customerID, callID, language, timeout, delay)
}

// TSV1RecordingCreate mocks base method.
func (m *MockRequestHandler) TSV1RecordingCreate(ctx context.Context, customerID, recordingID uuid.UUID, language string) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSV1RecordingCreate", ctx, customerID, recordingID, language)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TSV1RecordingCreate indicates an expected call of TSV1RecordingCreate.
func (mr *MockRequestHandlerMockRecorder) TSV1RecordingCreate(ctx, customerID, recordingID, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSV1RecordingCreate", reflect.TypeOf((*MockRequestHandler)(nil).TSV1RecordingCreate), ctx, customerID, recordingID, language)
}

// TSV1StreamingCreate mocks base method.
func (m *MockRequestHandler) TSV1StreamingCreate(ctx context.Context, customerID, referenceID uuid.UUID, referenceType transcribe.Type, language string) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSV1StreamingCreate", ctx, customerID, referenceID, referenceType, language)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TSV1StreamingCreate indicates an expected call of TSV1StreamingCreate.
func (mr *MockRequestHandlerMockRecorder) TSV1StreamingCreate(ctx, customerID, referenceID, referenceType, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSV1StreamingCreate", reflect.TypeOf((*MockRequestHandler)(nil).TSV1StreamingCreate), ctx, customerID, referenceID, referenceType, language)
}

// UMV1UserCreate mocks base method.
func (m *MockRequestHandler) UMV1UserCreate(ctx context.Context, timeout int, username, password, name, detail string, permission user.Permission) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserCreate", ctx, timeout, username, password, name, detail, permission)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UMV1UserCreate indicates an expected call of UMV1UserCreate.
func (mr *MockRequestHandlerMockRecorder) UMV1UserCreate(ctx, timeout, username, password, name, detail, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserCreate", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserCreate), ctx, timeout, username, password, name, detail, permission)
}

// UMV1UserDelete mocks base method.
func (m *MockRequestHandler) UMV1UserDelete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UMV1UserDelete indicates an expected call of UMV1UserDelete.
func (mr *MockRequestHandlerMockRecorder) UMV1UserDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserDelete", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserDelete), ctx, id)
}

// UMV1UserGet mocks base method.
func (m *MockRequestHandler) UMV1UserGet(ctx context.Context, id uint64) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserGet", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UMV1UserGet indicates an expected call of UMV1UserGet.
func (mr *MockRequestHandlerMockRecorder) UMV1UserGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserGet", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserGet), ctx, id)
}

// UMV1UserGets mocks base method.
func (m *MockRequestHandler) UMV1UserGets(ctx context.Context, pageToken string, pageSize uint64) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserGets", ctx, pageToken, pageSize)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UMV1UserGets indicates an expected call of UMV1UserGets.
func (mr *MockRequestHandlerMockRecorder) UMV1UserGets(ctx, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserGets", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserGets), ctx, pageToken, pageSize)
}

// UMV1UserLogin mocks base method.
func (m *MockRequestHandler) UMV1UserLogin(ctx context.Context, timeout int, username, password string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserLogin", ctx, timeout, username, password)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UMV1UserLogin indicates an expected call of UMV1UserLogin.
func (mr *MockRequestHandlerMockRecorder) UMV1UserLogin(ctx, timeout, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserLogin", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserLogin), ctx, timeout, username, password)
}

// UMV1UserUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) UMV1UserUpdateBasicInfo(ctx context.Context, userID uint64, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserUpdateBasicInfo", ctx, userID, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// UMV1UserUpdateBasicInfo indicates an expected call of UMV1UserUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) UMV1UserUpdateBasicInfo(ctx, userID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserUpdateBasicInfo), ctx, userID, name, detail)
}

// UMV1UserUpdatePassword mocks base method.
func (m *MockRequestHandler) UMV1UserUpdatePassword(ctx context.Context, timeout int, userID uint64, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserUpdatePassword", ctx, timeout, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UMV1UserUpdatePassword indicates an expected call of UMV1UserUpdatePassword.
func (mr *MockRequestHandlerMockRecorder) UMV1UserUpdatePassword(ctx, timeout, userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserUpdatePassword", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserUpdatePassword), ctx, timeout, userID, password)
}

// UMV1UserUpdatePermission mocks base method.
func (m *MockRequestHandler) UMV1UserUpdatePermission(ctx context.Context, userID uint64, permission user.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserUpdatePermission", ctx, userID, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// UMV1UserUpdatePermission indicates an expected call of UMV1UserUpdatePermission.
func (mr *MockRequestHandlerMockRecorder) UMV1UserUpdatePermission(ctx, userID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserUpdatePermission", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserUpdatePermission), ctx, userID, permission)
}

// WMV1WebhookSend mocks base method.
func (m *MockRequestHandler) WMV1WebhookSend(ctx context.Context, customerID uuid.UUID, dataType, messageType string, messageData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WMV1WebhookSend", ctx, customerID, dataType, messageType, messageData)
	ret0, _ := ret[0].(error)
	return ret0
}

// WMV1WebhookSend indicates an expected call of WMV1WebhookSend.
func (mr *MockRequestHandlerMockRecorder) WMV1WebhookSend(ctx, customerID, dataType, messageType, messageData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WMV1WebhookSend", reflect.TypeOf((*MockRequestHandler)(nil).WMV1WebhookSend), ctx, customerID, dataType, messageType, messageData)
}
