// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	gomock "github.com/golang/mock/gomock"
	telnyx "gitlab.com/voipbin/bin-manager/number-manager.git/pkg/requesthandler/models/telnyx"
	reflect "reflect"
)

// MockRequestHandler is a mock of RequestHandler interface
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// TelnyxAvailableNumberGets mocks base method
func (m *MockRequestHandler) TelnyxAvailableNumberGets(countryCode, locality, administrativeArea string, limit uint) ([]*telnyx.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TelnyxAvailableNumberGets", countryCode, locality, administrativeArea, limit)
	ret0, _ := ret[0].([]*telnyx.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelnyxAvailableNumberGets indicates an expected call of TelnyxAvailableNumberGets
func (mr *MockRequestHandlerMockRecorder) TelnyxAvailableNumberGets(countryCode, locality, administrativeArea, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelnyxAvailableNumberGets", reflect.TypeOf((*MockRequestHandler)(nil).TelnyxAvailableNumberGets), countryCode, locality, administrativeArea, limit)
}

// TelnyxNumberOrdersPost mocks base method
func (m *MockRequestHandler) TelnyxNumberOrdersPost(numbers []string) (*telnyx.OrderNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TelnyxNumberOrdersPost", numbers)
	ret0, _ := ret[0].(*telnyx.OrderNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelnyxNumberOrdersPost indicates an expected call of TelnyxNumberOrdersPost
func (mr *MockRequestHandlerMockRecorder) TelnyxNumberOrdersPost(numbers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelnyxNumberOrdersPost", reflect.TypeOf((*MockRequestHandler)(nil).TelnyxNumberOrdersPost), numbers)
}

// TelnyxPhoneNumbersGet mocks base method
func (m *MockRequestHandler) TelnyxPhoneNumbersGet(size uint, tag, number string) ([]*telnyx.PhoneNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TelnyxPhoneNumbersGet", size, tag, number)
	ret0, _ := ret[0].([]*telnyx.PhoneNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelnyxPhoneNumbersGet indicates an expected call of TelnyxPhoneNumbersGet
func (mr *MockRequestHandlerMockRecorder) TelnyxPhoneNumbersGet(size, tag, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelnyxPhoneNumbersGet", reflect.TypeOf((*MockRequestHandler)(nil).TelnyxPhoneNumbersGet), size, tag, number)
}

// TelnyxPhoneNumbersIDGet mocks base method
func (m *MockRequestHandler) TelnyxPhoneNumbersIDGet(id string) (*telnyx.PhoneNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TelnyxPhoneNumbersIDGet", id)
	ret0, _ := ret[0].(*telnyx.PhoneNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelnyxPhoneNumbersIDGet indicates an expected call of TelnyxPhoneNumbersIDGet
func (mr *MockRequestHandlerMockRecorder) TelnyxPhoneNumbersIDGet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelnyxPhoneNumbersIDGet", reflect.TypeOf((*MockRequestHandler)(nil).TelnyxPhoneNumbersIDGet), id)
}

// TelnyxPhoneNumbersIDDelete mocks base method
func (m *MockRequestHandler) TelnyxPhoneNumbersIDDelete(id string) (*telnyx.PhoneNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TelnyxPhoneNumbersIDDelete", id)
	ret0, _ := ret[0].(*telnyx.PhoneNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelnyxPhoneNumbersIDDelete indicates an expected call of TelnyxPhoneNumbersIDDelete
func (mr *MockRequestHandlerMockRecorder) TelnyxPhoneNumbersIDDelete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelnyxPhoneNumbersIDDelete", reflect.TypeOf((*MockRequestHandler)(nil).TelnyxPhoneNumbersIDDelete), id)
}

// TelnyxPhoneNumbersIDUpdateConnectionID mocks base method
func (m *MockRequestHandler) TelnyxPhoneNumbersIDUpdateConnectionID(id, connectionID string) (*telnyx.PhoneNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TelnyxPhoneNumbersIDUpdateConnectionID", id, connectionID)
	ret0, _ := ret[0].(*telnyx.PhoneNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TelnyxPhoneNumbersIDUpdateConnectionID indicates an expected call of TelnyxPhoneNumbersIDUpdateConnectionID
func (mr *MockRequestHandlerMockRecorder) TelnyxPhoneNumbersIDUpdateConnectionID(id, connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelnyxPhoneNumbersIDUpdateConnectionID", reflect.TypeOf((*MockRequestHandler)(nil).TelnyxPhoneNumbersIDUpdateConnectionID), id, connectionID)
}
