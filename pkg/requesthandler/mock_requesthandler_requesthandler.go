// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	agent "gitlab.com/voipbin/bin-manager/agent-manager.git/models/agent"
	tag "gitlab.com/voipbin/bin-manager/agent-manager.git/models/tag"
	address "gitlab.com/voipbin/bin-manager/call-manager.git/models/address"
	ari "gitlab.com/voipbin/bin-manager/call-manager.git/models/ari"
	bridge "gitlab.com/voipbin/bin-manager/call-manager.git/models/bridge"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/models/call"
	channel "gitlab.com/voipbin/bin-manager/call-manager.git/models/channel"
	confbridge "gitlab.com/voipbin/bin-manager/call-manager.git/models/confbridge"
	recording "gitlab.com/voipbin/bin-manager/call-manager.git/models/recording"
	conference "gitlab.com/voipbin/bin-manager/conference-manager.git/models/conference"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
	activeflow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/activeflow"
	flow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/flow"
	availablenumber "gitlab.com/voipbin/bin-manager/number-manager.git/models/availablenumber"
	number "gitlab.com/voipbin/bin-manager/number-manager.git/models/number"
	queue "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queue"
	queuecall "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecall"
	queuecallreference "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecallreference"
	astcontact "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/astcontact"
	domain "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/domain"
	extension "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/extension"
	bucketrecording "gitlab.com/voipbin/bin-manager/storage-manager.git/models/bucketrecording"
	transcribe "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcribe"
	user "gitlab.com/voipbin/bin-manager/user-manager.git/models/user"
)

// MockRequestHandler is a mock of RequestHandler interface.
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler.
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance.
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// AMV1AgentCreate mocks base method.
func (m *MockRequestHandler) AMV1AgentCreate(ctx context.Context, timeout int, userID uint64, username, password, name, detail string, ringMethod agent.RingMethod, permission agent.Permission, tagIDs []uuid.UUID, addresses []address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentCreate", ctx, timeout, userID, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentCreate indicates an expected call of AMV1AgentCreate.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentCreate(ctx, timeout, userID, username, password, name, detail, ringMethod, permission, tagIDs, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentCreate", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentCreate), ctx, timeout, userID, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
}

// AMV1AgentDelete mocks base method.
func (m *MockRequestHandler) AMV1AgentDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AMV1AgentDelete indicates an expected call of AMV1AgentDelete.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentDelete", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentDelete), ctx, id)
}

// AMV1AgentDial mocks base method.
func (m *MockRequestHandler) AMV1AgentDial(ctx context.Context, id uuid.UUID, source *address.Address, confbridgeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentDial", ctx, id, source, confbridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AMV1AgentDial indicates an expected call of AMV1AgentDial.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentDial(ctx, id, source, confbridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentDial", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentDial), ctx, id, source, confbridgeID)
}

// AMV1AgentGet mocks base method.
func (m *MockRequestHandler) AMV1AgentGet(ctx context.Context, agentID uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentGet", ctx, agentID)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentGet indicates an expected call of AMV1AgentGet.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentGet(ctx, agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentGet", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentGet), ctx, agentID)
}

// AMV1AgentGets mocks base method.
func (m *MockRequestHandler) AMV1AgentGets(ctx context.Context, userID uint64, pageToken string, pageSize uint64) ([]agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentGets", ctx, userID, pageToken, pageSize)
	ret0, _ := ret[0].([]agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentGets indicates an expected call of AMV1AgentGets.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentGets(ctx, userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentGets", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentGets), ctx, userID, pageToken, pageSize)
}

// AMV1AgentGetsByTagIDs mocks base method.
func (m *MockRequestHandler) AMV1AgentGetsByTagIDs(ctx context.Context, userID uint64, tagIDs []uuid.UUID) ([]agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentGetsByTagIDs", ctx, userID, tagIDs)
	ret0, _ := ret[0].([]agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentGetsByTagIDs indicates an expected call of AMV1AgentGetsByTagIDs.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentGetsByTagIDs(ctx, userID, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentGetsByTagIDs", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentGetsByTagIDs), ctx, userID, tagIDs)
}

// AMV1AgentGetsByTagIDsAndStatus mocks base method.
func (m *MockRequestHandler) AMV1AgentGetsByTagIDsAndStatus(ctx context.Context, userID uint64, tagIDs []uuid.UUID, status agent.Status) ([]agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentGetsByTagIDsAndStatus", ctx, userID, tagIDs, status)
	ret0, _ := ret[0].([]agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentGetsByTagIDsAndStatus indicates an expected call of AMV1AgentGetsByTagIDsAndStatus.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentGetsByTagIDsAndStatus(ctx, userID, tagIDs, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentGetsByTagIDsAndStatus", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentGetsByTagIDsAndStatus), ctx, userID, tagIDs, status)
}

// AMV1AgentLogin mocks base method.
func (m *MockRequestHandler) AMV1AgentLogin(ctx context.Context, timeout int, userID uint64, username, password string) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentLogin", ctx, timeout, userID, username, password)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1AgentLogin indicates an expected call of AMV1AgentLogin.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentLogin(ctx, timeout, userID, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentLogin", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentLogin), ctx, timeout, userID, username, password)
}

// AMV1AgentUpdate mocks base method.
func (m *MockRequestHandler) AMV1AgentUpdate(ctx context.Context, id uuid.UUID, name, detail, ringMethod string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentUpdate", ctx, id, name, detail, ringMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// AMV1AgentUpdate indicates an expected call of AMV1AgentUpdate.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentUpdate(ctx, id, name, detail, ringMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentUpdate", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentUpdate), ctx, id, name, detail, ringMethod)
}

// AMV1AgentUpdateAddresses mocks base method.
func (m *MockRequestHandler) AMV1AgentUpdateAddresses(ctx context.Context, id uuid.UUID, addresses []address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentUpdateAddresses", ctx, id, addresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// AMV1AgentUpdateAddresses indicates an expected call of AMV1AgentUpdateAddresses.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentUpdateAddresses(ctx, id, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentUpdateAddresses", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentUpdateAddresses), ctx, id, addresses)
}

// AMV1AgentUpdatePassword mocks base method.
func (m *MockRequestHandler) AMV1AgentUpdatePassword(ctx context.Context, timeout int, id uuid.UUID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentUpdatePassword", ctx, timeout, id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AMV1AgentUpdatePassword indicates an expected call of AMV1AgentUpdatePassword.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentUpdatePassword(ctx, timeout, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentUpdatePassword", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentUpdatePassword), ctx, timeout, id, password)
}

// AMV1AgentUpdateStatus mocks base method.
func (m *MockRequestHandler) AMV1AgentUpdateStatus(ctx context.Context, id uuid.UUID, status agent.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentUpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// AMV1AgentUpdateStatus indicates an expected call of AMV1AgentUpdateStatus.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentUpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentUpdateStatus", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentUpdateStatus), ctx, id, status)
}

// AMV1AgentUpdateTagIDs mocks base method.
func (m *MockRequestHandler) AMV1AgentUpdateTagIDs(ctx context.Context, id uuid.UUID, tagIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1AgentUpdateTagIDs", ctx, id, tagIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AMV1AgentUpdateTagIDs indicates an expected call of AMV1AgentUpdateTagIDs.
func (mr *MockRequestHandlerMockRecorder) AMV1AgentUpdateTagIDs(ctx, id, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1AgentUpdateTagIDs", reflect.TypeOf((*MockRequestHandler)(nil).AMV1AgentUpdateTagIDs), ctx, id, tagIDs)
}

// AMV1TagCreate mocks base method.
func (m *MockRequestHandler) AMV1TagCreate(ctx context.Context, userID uint64, name, detail string) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1TagCreate", ctx, userID, name, detail)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1TagCreate indicates an expected call of AMV1TagCreate.
func (mr *MockRequestHandlerMockRecorder) AMV1TagCreate(ctx, userID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1TagCreate", reflect.TypeOf((*MockRequestHandler)(nil).AMV1TagCreate), ctx, userID, name, detail)
}

// AMV1TagDelete mocks base method.
func (m *MockRequestHandler) AMV1TagDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1TagDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AMV1TagDelete indicates an expected call of AMV1TagDelete.
func (mr *MockRequestHandlerMockRecorder) AMV1TagDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1TagDelete", reflect.TypeOf((*MockRequestHandler)(nil).AMV1TagDelete), ctx, id)
}

// AMV1TagGet mocks base method.
func (m *MockRequestHandler) AMV1TagGet(ctx context.Context, id uuid.UUID) (*tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1TagGet", ctx, id)
	ret0, _ := ret[0].(*tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1TagGet indicates an expected call of AMV1TagGet.
func (mr *MockRequestHandlerMockRecorder) AMV1TagGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1TagGet", reflect.TypeOf((*MockRequestHandler)(nil).AMV1TagGet), ctx, id)
}

// AMV1TagGets mocks base method.
func (m *MockRequestHandler) AMV1TagGets(ctx context.Context, userID uint64, pageToken string, pageSize uint64) ([]tag.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1TagGets", ctx, userID, pageToken, pageSize)
	ret0, _ := ret[0].([]tag.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AMV1TagGets indicates an expected call of AMV1TagGets.
func (mr *MockRequestHandlerMockRecorder) AMV1TagGets(ctx, userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1TagGets", reflect.TypeOf((*MockRequestHandler)(nil).AMV1TagGets), ctx, userID, pageToken, pageSize)
}

// AMV1TagUpdate mocks base method.
func (m *MockRequestHandler) AMV1TagUpdate(ctx context.Context, id uuid.UUID, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AMV1TagUpdate", ctx, id, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// AMV1TagUpdate indicates an expected call of AMV1TagUpdate.
func (mr *MockRequestHandlerMockRecorder) AMV1TagUpdate(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AMV1TagUpdate", reflect.TypeOf((*MockRequestHandler)(nil).AMV1TagUpdate), ctx, id, name, detail)
}

// AstAMIRedirect mocks base method.
func (m *MockRequestHandler) AstAMIRedirect(ctx context.Context, asteriskID, channelID, context, exten, priority string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAMIRedirect", ctx, asteriskID, channelID, context, exten, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAMIRedirect indicates an expected call of AstAMIRedirect.
func (mr *MockRequestHandlerMockRecorder) AstAMIRedirect(ctx, asteriskID, channelID, context, exten, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAMIRedirect", reflect.TypeOf((*MockRequestHandler)(nil).AstAMIRedirect), ctx, asteriskID, channelID, context, exten, priority)
}

// AstBridgeAddChannel mocks base method.
func (m *MockRequestHandler) AstBridgeAddChannel(ctx context.Context, asteriskID, bridgeID, channelID, role string, absorbDTMF, mute bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeAddChannel", ctx, asteriskID, bridgeID, channelID, role, absorbDTMF, mute)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeAddChannel indicates an expected call of AstBridgeAddChannel.
func (mr *MockRequestHandlerMockRecorder) AstBridgeAddChannel(ctx, asteriskID, bridgeID, channelID, role, absorbDTMF, mute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeAddChannel", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeAddChannel), ctx, asteriskID, bridgeID, channelID, role, absorbDTMF, mute)
}

// AstBridgeCreate mocks base method.
func (m *MockRequestHandler) AstBridgeCreate(ctx context.Context, asteriskID, bridgeID, bridgeName string, bridgeType []bridge.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeCreate", ctx, asteriskID, bridgeID, bridgeName, bridgeType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeCreate indicates an expected call of AstBridgeCreate.
func (mr *MockRequestHandlerMockRecorder) AstBridgeCreate(ctx, asteriskID, bridgeID, bridgeName, bridgeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeCreate", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeCreate), ctx, asteriskID, bridgeID, bridgeName, bridgeType)
}

// AstBridgeDelete mocks base method.
func (m *MockRequestHandler) AstBridgeDelete(ctx context.Context, asteriskID, bridgeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeDelete", ctx, asteriskID, bridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeDelete indicates an expected call of AstBridgeDelete.
func (mr *MockRequestHandlerMockRecorder) AstBridgeDelete(ctx, asteriskID, bridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeDelete", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeDelete), ctx, asteriskID, bridgeID)
}

// AstBridgeGet mocks base method.
func (m *MockRequestHandler) AstBridgeGet(ctx context.Context, asteriskID, bridgeID string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeGet", ctx, asteriskID, bridgeID)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstBridgeGet indicates an expected call of AstBridgeGet.
func (mr *MockRequestHandlerMockRecorder) AstBridgeGet(ctx, asteriskID, bridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeGet", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeGet), ctx, asteriskID, bridgeID)
}

// AstBridgeRemoveChannel mocks base method.
func (m *MockRequestHandler) AstBridgeRemoveChannel(ctx context.Context, asteriskID, bridgeID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeRemoveChannel", ctx, asteriskID, bridgeID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeRemoveChannel indicates an expected call of AstBridgeRemoveChannel.
func (mr *MockRequestHandlerMockRecorder) AstBridgeRemoveChannel(ctx, asteriskID, bridgeID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeRemoveChannel", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeRemoveChannel), ctx, asteriskID, bridgeID, channelID)
}

// AstChannelAnswer mocks base method.
func (m *MockRequestHandler) AstChannelAnswer(ctx context.Context, asteriskID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelAnswer", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelAnswer indicates an expected call of AstChannelAnswer.
func (mr *MockRequestHandlerMockRecorder) AstChannelAnswer(ctx, asteriskID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelAnswer", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelAnswer), ctx, asteriskID, channelID)
}

// AstChannelContinue mocks base method.
func (m *MockRequestHandler) AstChannelContinue(ctx context.Context, asteriskID, channelID, context, ext string, pri int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelContinue", ctx, asteriskID, channelID, context, ext, pri, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelContinue indicates an expected call of AstChannelContinue.
func (mr *MockRequestHandlerMockRecorder) AstChannelContinue(ctx, asteriskID, channelID, context, ext, pri, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelContinue", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelContinue), ctx, asteriskID, channelID, context, ext, pri, label)
}

// AstChannelCreate mocks base method.
func (m *MockRequestHandler) AstChannelCreate(ctx context.Context, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats string, variables map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelCreate", ctx, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats, variables)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelCreate indicates an expected call of AstChannelCreate.
func (mr *MockRequestHandlerMockRecorder) AstChannelCreate(ctx, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelCreate", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelCreate), ctx, asteriskID, channelID, appArgs, endpoint, otherChannelID, originator, formats, variables)
}

// AstChannelCreateSnoop mocks base method.
func (m *MockRequestHandler) AstChannelCreateSnoop(ctx context.Context, asteriskID, channelID, snoopID, appArgs string, spy, whisper channel.SnoopDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelCreateSnoop", ctx, asteriskID, channelID, snoopID, appArgs, spy, whisper)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelCreateSnoop indicates an expected call of AstChannelCreateSnoop.
func (mr *MockRequestHandlerMockRecorder) AstChannelCreateSnoop(ctx, asteriskID, channelID, snoopID, appArgs, spy, whisper interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelCreateSnoop", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelCreateSnoop), ctx, asteriskID, channelID, snoopID, appArgs, spy, whisper)
}

// AstChannelDTMF mocks base method.
func (m *MockRequestHandler) AstChannelDTMF(ctx context.Context, asteriskID, channelID, digit string, duration, before, between, after int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelDTMF", ctx, asteriskID, channelID, digit, duration, before, between, after)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelDTMF indicates an expected call of AstChannelDTMF.
func (mr *MockRequestHandlerMockRecorder) AstChannelDTMF(ctx, asteriskID, channelID, digit, duration, before, between, after interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelDTMF", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelDTMF), ctx, asteriskID, channelID, digit, duration, before, between, after)
}

// AstChannelDial mocks base method.
func (m *MockRequestHandler) AstChannelDial(ctx context.Context, asteriskID, channelID, caller string, timeout int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelDial", ctx, asteriskID, channelID, caller, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelDial indicates an expected call of AstChannelDial.
func (mr *MockRequestHandlerMockRecorder) AstChannelDial(ctx, asteriskID, channelID, caller, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelDial", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelDial), ctx, asteriskID, channelID, caller, timeout)
}

// AstChannelExternalMedia mocks base method.
func (m *MockRequestHandler) AstChannelExternalMedia(ctx context.Context, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data string, variables map[string]string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelExternalMedia", ctx, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data, variables)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstChannelExternalMedia indicates an expected call of AstChannelExternalMedia.
func (mr *MockRequestHandlerMockRecorder) AstChannelExternalMedia(ctx, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelExternalMedia", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelExternalMedia), ctx, asteriskID, channelID, externalHost, encapsulation, transport, connectionType, format, direction, data, variables)
}

// AstChannelGet mocks base method.
func (m *MockRequestHandler) AstChannelGet(ctx context.Context, asteriskID, channelID string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelGet", ctx, asteriskID, channelID)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstChannelGet indicates an expected call of AstChannelGet.
func (mr *MockRequestHandlerMockRecorder) AstChannelGet(ctx, asteriskID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelGet", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelGet), ctx, asteriskID, channelID)
}

// AstChannelHangup mocks base method.
func (m *MockRequestHandler) AstChannelHangup(ctx context.Context, asteriskID, channelID string, code ari.ChannelCause) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelHangup", ctx, asteriskID, channelID, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelHangup indicates an expected call of AstChannelHangup.
func (mr *MockRequestHandlerMockRecorder) AstChannelHangup(ctx, asteriskID, channelID, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelHangup", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelHangup), ctx, asteriskID, channelID, code)
}

// AstChannelPlay mocks base method.
func (m *MockRequestHandler) AstChannelPlay(ctx context.Context, asteriskID, channelID string, actionID uuid.UUID, medias []string, lang string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelPlay", ctx, asteriskID, channelID, actionID, medias, lang)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelPlay indicates an expected call of AstChannelPlay.
func (mr *MockRequestHandlerMockRecorder) AstChannelPlay(ctx, asteriskID, channelID, actionID, medias, lang interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelPlay", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelPlay), ctx, asteriskID, channelID, actionID, medias, lang)
}

// AstChannelRecord mocks base method.
func (m *MockRequestHandler) AstChannelRecord(ctx context.Context, asteriskID, channelID, filename, format string, duration, silence int, beep bool, endKey, ifExists string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelRecord", ctx, asteriskID, channelID, filename, format, duration, silence, beep, endKey, ifExists)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelRecord indicates an expected call of AstChannelRecord.
func (mr *MockRequestHandlerMockRecorder) AstChannelRecord(ctx, asteriskID, channelID, filename, format, duration, silence, beep, endKey, ifExists interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelRecord", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelRecord), ctx, asteriskID, channelID, filename, format, duration, silence, beep, endKey, ifExists)
}

// AstChannelVariableSet mocks base method.
func (m *MockRequestHandler) AstChannelVariableSet(ctx context.Context, asteriskID, channelID, variable, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelVariableSet", ctx, asteriskID, channelID, variable, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelVariableSet indicates an expected call of AstChannelVariableSet.
func (mr *MockRequestHandlerMockRecorder) AstChannelVariableSet(ctx, asteriskID, channelID, variable, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelVariableSet", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelVariableSet), ctx, asteriskID, channelID, variable, value)
}

// AstPlaybackStop mocks base method.
func (m *MockRequestHandler) AstPlaybackStop(ctx context.Context, asteriskID, playabckID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstPlaybackStop", ctx, asteriskID, playabckID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstPlaybackStop indicates an expected call of AstPlaybackStop.
func (mr *MockRequestHandlerMockRecorder) AstPlaybackStop(ctx, asteriskID, playabckID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstPlaybackStop", reflect.TypeOf((*MockRequestHandler)(nil).AstPlaybackStop), ctx, asteriskID, playabckID)
}

// CFV1ConferenceCreate mocks base method.
func (m *MockRequestHandler) CFV1ConferenceCreate(ctx context.Context, userID uint64, conferenceType conference.Type, name, detail string, timeout int, webhookURI string, data map[string]interface{}, preActions, postActions []action.Action) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceCreate", ctx, userID, conferenceType, name, detail, timeout, webhookURI, data, preActions, postActions)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFV1ConferenceCreate indicates an expected call of CFV1ConferenceCreate.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceCreate(ctx, userID, conferenceType, name, detail, timeout, webhookURI, data, preActions, postActions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceCreate", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceCreate), ctx, userID, conferenceType, name, detail, timeout, webhookURI, data, preActions, postActions)
}

// CFV1ConferenceDelete mocks base method.
func (m *MockRequestHandler) CFV1ConferenceDelete(ctx context.Context, conferenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceDelete", ctx, conferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CFV1ConferenceDelete indicates an expected call of CFV1ConferenceDelete.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceDelete(ctx, conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceDelete", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceDelete), ctx, conferenceID)
}

// CFV1ConferenceDeleteDelay mocks base method.
func (m *MockRequestHandler) CFV1ConferenceDeleteDelay(ctx context.Context, conferenceID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceDeleteDelay", ctx, conferenceID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// CFV1ConferenceDeleteDelay indicates an expected call of CFV1ConferenceDeleteDelay.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceDeleteDelay(ctx, conferenceID, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceDeleteDelay", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceDeleteDelay), ctx, conferenceID, delay)
}

// CFV1ConferenceGet mocks base method.
func (m *MockRequestHandler) CFV1ConferenceGet(ctx context.Context, conferenceID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceGet", ctx, conferenceID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFV1ConferenceGet indicates an expected call of CFV1ConferenceGet.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceGet(ctx, conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceGet", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceGet), ctx, conferenceID)
}

// CFV1ConferenceGets mocks base method.
func (m *MockRequestHandler) CFV1ConferenceGets(ctx context.Context, userID uint64, pageToken string, pageSize uint64, conferenceType string) ([]conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceGets", ctx, userID, pageToken, pageSize, conferenceType)
	ret0, _ := ret[0].([]conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFV1ConferenceGets indicates an expected call of CFV1ConferenceGets.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceGets(ctx, userID, pageToken, pageSize, conferenceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceGets", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceGets), ctx, userID, pageToken, pageSize, conferenceType)
}

// CFV1ConferenceKick mocks base method.
func (m *MockRequestHandler) CFV1ConferenceKick(ctx context.Context, conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceKick", ctx, conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CFV1ConferenceKick indicates an expected call of CFV1ConferenceKick.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceKick(ctx, conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceKick", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceKick), ctx, conferenceID, callID)
}

// CFV1ConferenceUpdate mocks base method.
func (m *MockRequestHandler) CFV1ConferenceUpdate(ctx context.Context, id uuid.UUID, name, detail string, timeout int, webhookURI string, preActions, postActions []action.Action) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFV1ConferenceUpdate", ctx, id, name, detail, timeout, webhookURI, preActions, postActions)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CFV1ConferenceUpdate indicates an expected call of CFV1ConferenceUpdate.
func (mr *MockRequestHandlerMockRecorder) CFV1ConferenceUpdate(ctx, id, name, detail, timeout, webhookURI, preActions, postActions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFV1ConferenceUpdate", reflect.TypeOf((*MockRequestHandler)(nil).CFV1ConferenceUpdate), ctx, id, name, detail, timeout, webhookURI, preActions, postActions)
}

// CMV1CallActionNext mocks base method.
func (m *MockRequestHandler) CMV1CallActionNext(ctx context.Context, callID uuid.UUID, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallActionNext", ctx, callID, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1CallActionNext indicates an expected call of CMV1CallActionNext.
func (mr *MockRequestHandlerMockRecorder) CMV1CallActionNext(ctx, callID, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallActionNext", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallActionNext), ctx, callID, force)
}

// CMV1CallActionTimeout mocks base method.
func (m *MockRequestHandler) CMV1CallActionTimeout(ctx context.Context, id uuid.UUID, delay int, a *action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallActionTimeout", ctx, id, delay, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1CallActionTimeout indicates an expected call of CMV1CallActionTimeout.
func (mr *MockRequestHandlerMockRecorder) CMV1CallActionTimeout(ctx, id, delay, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallActionTimeout", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallActionTimeout), ctx, id, delay, a)
}

// CMV1CallAddChainedCall mocks base method.
func (m *MockRequestHandler) CMV1CallAddChainedCall(ctx context.Context, callID, chainedCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallAddChainedCall", ctx, callID, chainedCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1CallAddChainedCall indicates an expected call of CMV1CallAddChainedCall.
func (mr *MockRequestHandlerMockRecorder) CMV1CallAddChainedCall(ctx, callID, chainedCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallAddChainedCall", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallAddChainedCall), ctx, callID, chainedCallID)
}

// CMV1CallCreate mocks base method.
func (m *MockRequestHandler) CMV1CallCreate(ctx context.Context, userID uint64, flowID uuid.UUID, source, destination *address.Address) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallCreate", ctx, userID, flowID, source, destination)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallCreate indicates an expected call of CMV1CallCreate.
func (mr *MockRequestHandlerMockRecorder) CMV1CallCreate(ctx, userID, flowID, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallCreate", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallCreate), ctx, userID, flowID, source, destination)
}

// CMV1CallCreateWithID mocks base method.
func (m *MockRequestHandler) CMV1CallCreateWithID(ctx context.Context, id uuid.UUID, userID uint64, flowID uuid.UUID, source, destination *address.Address) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallCreateWithID", ctx, id, userID, flowID, source, destination)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallCreateWithID indicates an expected call of CMV1CallCreateWithID.
func (mr *MockRequestHandlerMockRecorder) CMV1CallCreateWithID(ctx, id, userID, flowID, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallCreateWithID", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallCreateWithID), ctx, id, userID, flowID, source, destination)
}

// CMV1CallGet mocks base method.
func (m *MockRequestHandler) CMV1CallGet(ctx context.Context, callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallGet", ctx, callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallGet indicates an expected call of CMV1CallGet.
func (mr *MockRequestHandlerMockRecorder) CMV1CallGet(ctx, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallGet", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallGet), ctx, callID)
}

// CMV1CallGets mocks base method.
func (m *MockRequestHandler) CMV1CallGets(ctx context.Context, userID uint64, pageToken string, pageSize uint64) ([]call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallGets", ctx, userID, pageToken, pageSize)
	ret0, _ := ret[0].([]call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallGets indicates an expected call of CMV1CallGets.
func (mr *MockRequestHandlerMockRecorder) CMV1CallGets(ctx, userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallGets", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallGets), ctx, userID, pageToken, pageSize)
}

// CMV1CallHangup mocks base method.
func (m *MockRequestHandler) CMV1CallHangup(ctx context.Context, callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallHangup", ctx, callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1CallHangup indicates an expected call of CMV1CallHangup.
func (mr *MockRequestHandlerMockRecorder) CMV1CallHangup(ctx, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallHangup", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallHangup), ctx, callID)
}

// CMV1CallHealth mocks base method.
func (m *MockRequestHandler) CMV1CallHealth(ctx context.Context, id uuid.UUID, delay, retryCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1CallHealth", ctx, id, delay, retryCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1CallHealth indicates an expected call of CMV1CallHealth.
func (mr *MockRequestHandlerMockRecorder) CMV1CallHealth(ctx, id, delay, retryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1CallHealth", reflect.TypeOf((*MockRequestHandler)(nil).CMV1CallHealth), ctx, id, delay, retryCount)
}

// CMV1ChannelHealth mocks base method.
func (m *MockRequestHandler) CMV1ChannelHealth(ctx context.Context, asteriskID, channelID string, delay, retryCount, retryCountMax int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1ChannelHealth", ctx, asteriskID, channelID, delay, retryCount, retryCountMax)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1ChannelHealth indicates an expected call of CMV1ChannelHealth.
func (mr *MockRequestHandlerMockRecorder) CMV1ChannelHealth(ctx, asteriskID, channelID, delay, retryCount, retryCountMax interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1ChannelHealth", reflect.TypeOf((*MockRequestHandler)(nil).CMV1ChannelHealth), ctx, asteriskID, channelID, delay, retryCount, retryCountMax)
}

// CMV1ConfbridgeCallAdd mocks base method.
func (m *MockRequestHandler) CMV1ConfbridgeCallAdd(ctx context.Context, conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1ConfbridgeCallAdd", ctx, conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1ConfbridgeCallAdd indicates an expected call of CMV1ConfbridgeCallAdd.
func (mr *MockRequestHandlerMockRecorder) CMV1ConfbridgeCallAdd(ctx, conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1ConfbridgeCallAdd", reflect.TypeOf((*MockRequestHandler)(nil).CMV1ConfbridgeCallAdd), ctx, conferenceID, callID)
}

// CMV1ConfbridgeCallKick mocks base method.
func (m *MockRequestHandler) CMV1ConfbridgeCallKick(ctx context.Context, conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1ConfbridgeCallKick", ctx, conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1ConfbridgeCallKick indicates an expected call of CMV1ConfbridgeCallKick.
func (mr *MockRequestHandlerMockRecorder) CMV1ConfbridgeCallKick(ctx, conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1ConfbridgeCallKick", reflect.TypeOf((*MockRequestHandler)(nil).CMV1ConfbridgeCallKick), ctx, conferenceID, callID)
}

// CMV1ConfbridgeCreate mocks base method.
func (m *MockRequestHandler) CMV1ConfbridgeCreate(ctx context.Context) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1ConfbridgeCreate", ctx)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1ConfbridgeCreate indicates an expected call of CMV1ConfbridgeCreate.
func (mr *MockRequestHandlerMockRecorder) CMV1ConfbridgeCreate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1ConfbridgeCreate", reflect.TypeOf((*MockRequestHandler)(nil).CMV1ConfbridgeCreate), ctx)
}

// CMV1ConfbridgeDelete mocks base method.
func (m *MockRequestHandler) CMV1ConfbridgeDelete(ctx context.Context, conferenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1ConfbridgeDelete", ctx, conferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMV1ConfbridgeDelete indicates an expected call of CMV1ConfbridgeDelete.
func (mr *MockRequestHandlerMockRecorder) CMV1ConfbridgeDelete(ctx, conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1ConfbridgeDelete", reflect.TypeOf((*MockRequestHandler)(nil).CMV1ConfbridgeDelete), ctx, conferenceID)
}

// CMV1RecordingGet mocks base method.
func (m *MockRequestHandler) CMV1RecordingGet(ctx context.Context, id uuid.UUID) (*recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1RecordingGet", ctx, id)
	ret0, _ := ret[0].(*recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1RecordingGet indicates an expected call of CMV1RecordingGet.
func (mr *MockRequestHandlerMockRecorder) CMV1RecordingGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1RecordingGet", reflect.TypeOf((*MockRequestHandler)(nil).CMV1RecordingGet), ctx, id)
}

// CMV1RecordingGets mocks base method.
func (m *MockRequestHandler) CMV1RecordingGets(ctx context.Context, userID, size uint64, token string) ([]recording.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMV1RecordingGets", ctx, userID, size, token)
	ret0, _ := ret[0].([]recording.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMV1RecordingGets indicates an expected call of CMV1RecordingGets.
func (mr *MockRequestHandlerMockRecorder) CMV1RecordingGets(ctx, userID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMV1RecordingGets", reflect.TypeOf((*MockRequestHandler)(nil).CMV1RecordingGets), ctx, userID, size, token)
}

// FMV1ActionGet mocks base method.
func (m *MockRequestHandler) FMV1ActionGet(ctx context.Context, flowID, actionID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1ActionGet", ctx, flowID, actionID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1ActionGet indicates an expected call of FMV1ActionGet.
func (mr *MockRequestHandlerMockRecorder) FMV1ActionGet(ctx, flowID, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1ActionGet", reflect.TypeOf((*MockRequestHandler)(nil).FMV1ActionGet), ctx, flowID, actionID)
}

// FMV1ActvieFlowCreate mocks base method.
func (m *MockRequestHandler) FMV1ActvieFlowCreate(ctx context.Context, callID, flowID uuid.UUID) (*activeflow.ActiveFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1ActvieFlowCreate", ctx, callID, flowID)
	ret0, _ := ret[0].(*activeflow.ActiveFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1ActvieFlowCreate indicates an expected call of FMV1ActvieFlowCreate.
func (mr *MockRequestHandlerMockRecorder) FMV1ActvieFlowCreate(ctx, callID, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1ActvieFlowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FMV1ActvieFlowCreate), ctx, callID, flowID)
}

// FMV1ActvieFlowGetNextAction mocks base method.
func (m *MockRequestHandler) FMV1ActvieFlowGetNextAction(ctx context.Context, callID, actionID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1ActvieFlowGetNextAction", ctx, callID, actionID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1ActvieFlowGetNextAction indicates an expected call of FMV1ActvieFlowGetNextAction.
func (mr *MockRequestHandlerMockRecorder) FMV1ActvieFlowGetNextAction(ctx, callID, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1ActvieFlowGetNextAction", reflect.TypeOf((*MockRequestHandler)(nil).FMV1ActvieFlowGetNextAction), ctx, callID, actionID)
}

// FMV1ActvieFlowUpdateForwardActionID mocks base method.
func (m *MockRequestHandler) FMV1ActvieFlowUpdateForwardActionID(ctx context.Context, callID, forwardActionID uuid.UUID, forwardNow bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1ActvieFlowUpdateForwardActionID", ctx, callID, forwardActionID, forwardNow)
	ret0, _ := ret[0].(error)
	return ret0
}

// FMV1ActvieFlowUpdateForwardActionID indicates an expected call of FMV1ActvieFlowUpdateForwardActionID.
func (mr *MockRequestHandlerMockRecorder) FMV1ActvieFlowUpdateForwardActionID(ctx, callID, forwardActionID, forwardNow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1ActvieFlowUpdateForwardActionID", reflect.TypeOf((*MockRequestHandler)(nil).FMV1ActvieFlowUpdateForwardActionID), ctx, callID, forwardActionID, forwardNow)
}

// FMV1FlowCreate mocks base method.
func (m *MockRequestHandler) FMV1FlowCreate(ctx context.Context, userID uint64, flowType flow.Type, name, detail, webhookURI string, actions []action.Action, persist bool) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowCreate", ctx, userID, flowType, name, detail, webhookURI, actions, persist)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1FlowCreate indicates an expected call of FMV1FlowCreate.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowCreate(ctx, userID, flowType, name, detail, webhookURI, actions, persist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowCreate), ctx, userID, flowType, name, detail, webhookURI, actions, persist)
}

// FMV1FlowDelete mocks base method.
func (m *MockRequestHandler) FMV1FlowDelete(ctx context.Context, flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowDelete", ctx, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FMV1FlowDelete indicates an expected call of FMV1FlowDelete.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowDelete(ctx, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowDelete", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowDelete), ctx, flowID)
}

// FMV1FlowGet mocks base method.
func (m *MockRequestHandler) FMV1FlowGet(ctx context.Context, flowID uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowGet", ctx, flowID)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1FlowGet indicates an expected call of FMV1FlowGet.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowGet(ctx, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowGet", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowGet), ctx, flowID)
}

// FMV1FlowGets mocks base method.
func (m *MockRequestHandler) FMV1FlowGets(ctx context.Context, userID uint64, flowType flow.Type, pageToken string, pageSize uint64) ([]flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowGets", ctx, userID, flowType, pageToken, pageSize)
	ret0, _ := ret[0].([]flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1FlowGets indicates an expected call of FMV1FlowGets.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowGets(ctx, userID, flowType, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowGets", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowGets), ctx, userID, flowType, pageToken, pageSize)
}

// FMV1FlowUpdate mocks base method.
func (m *MockRequestHandler) FMV1FlowUpdate(ctx context.Context, f *flow.Flow) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMV1FlowUpdate", ctx, f)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMV1FlowUpdate indicates an expected call of FMV1FlowUpdate.
func (mr *MockRequestHandlerMockRecorder) FMV1FlowUpdate(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMV1FlowUpdate", reflect.TypeOf((*MockRequestHandler)(nil).FMV1FlowUpdate), ctx, f)
}

// NMV1AvailableNumberGets mocks base method.
func (m *MockRequestHandler) NMV1AvailableNumberGets(ctx context.Context, userID, pageSize uint64, countryCode string) ([]availablenumber.AvailableNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1AvailableNumberGets", ctx, userID, pageSize, countryCode)
	ret0, _ := ret[0].([]availablenumber.AvailableNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1AvailableNumberGets indicates an expected call of NMV1AvailableNumberGets.
func (mr *MockRequestHandlerMockRecorder) NMV1AvailableNumberGets(ctx, userID, pageSize, countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1AvailableNumberGets", reflect.TypeOf((*MockRequestHandler)(nil).NMV1AvailableNumberGets), ctx, userID, pageSize, countryCode)
}

// NMV1NumberCreate mocks base method.
func (m *MockRequestHandler) NMV1NumberCreate(ctx context.Context, userID uint64, numb string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberCreate", ctx, userID, numb)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberCreate indicates an expected call of NMV1NumberCreate.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberCreate(ctx, userID, numb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberCreate", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberCreate), ctx, userID, numb)
}

// NMV1NumberDelete mocks base method.
func (m *MockRequestHandler) NMV1NumberDelete(ctx context.Context, id uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberDelete", ctx, id)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberDelete indicates an expected call of NMV1NumberDelete.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberDelete", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberDelete), ctx, id)
}

// NMV1NumberFlowDelete mocks base method.
func (m *MockRequestHandler) NMV1NumberFlowDelete(ctx context.Context, flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberFlowDelete", ctx, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NMV1NumberFlowDelete indicates an expected call of NMV1NumberFlowDelete.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberFlowDelete(ctx, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberFlowDelete", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberFlowDelete), ctx, flowID)
}

// NMV1NumberGet mocks base method.
func (m *MockRequestHandler) NMV1NumberGet(ctx context.Context, numberID uuid.UUID) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberGet", ctx, numberID)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberGet indicates an expected call of NMV1NumberGet.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberGet(ctx, numberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberGet", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberGet), ctx, numberID)
}

// NMV1NumberGetByNumber mocks base method.
func (m *MockRequestHandler) NMV1NumberGetByNumber(ctx context.Context, num string) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberGetByNumber", ctx, num)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberGetByNumber indicates an expected call of NMV1NumberGetByNumber.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberGetByNumber(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberGetByNumber", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberGetByNumber), ctx, num)
}

// NMV1NumberGets mocks base method.
func (m *MockRequestHandler) NMV1NumberGets(ctx context.Context, userID uint64, pageToken string, pageSize uint64) ([]number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberGets", ctx, userID, pageToken, pageSize)
	ret0, _ := ret[0].([]number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberGets indicates an expected call of NMV1NumberGets.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberGets(ctx, userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberGets", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberGets), ctx, userID, pageToken, pageSize)
}

// NMV1NumberUpdate mocks base method.
func (m *MockRequestHandler) NMV1NumberUpdate(ctx context.Context, num *number.Number) (*number.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMV1NumberUpdate", ctx, num)
	ret0, _ := ret[0].(*number.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NMV1NumberUpdate indicates an expected call of NMV1NumberUpdate.
func (mr *MockRequestHandlerMockRecorder) NMV1NumberUpdate(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMV1NumberUpdate", reflect.TypeOf((*MockRequestHandler)(nil).NMV1NumberUpdate), ctx, num)
}

// QMV1QueueCreate mocks base method.
func (m *MockRequestHandler) QMV1QueueCreate(ctx context.Context, userID uint64, name, detail, webhookURI, webhookMethod string, routingMethod queue.RoutingMethod, tagIDs []uuid.UUID, waitActions []action.Action, timeoutWait, timeoutService int) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueCreate", ctx, userID, name, detail, webhookURI, webhookMethod, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueCreate indicates an expected call of QMV1QueueCreate.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueCreate(ctx, userID, name, detail, webhookURI, webhookMethod, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueCreate", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueCreate), ctx, userID, name, detail, webhookURI, webhookMethod, routingMethod, tagIDs, waitActions, timeoutWait, timeoutService)
}

// QMV1QueueCreateQueuecall mocks base method.
func (m *MockRequestHandler) QMV1QueueCreateQueuecall(ctx context.Context, queueID uuid.UUID, referenceType queuecall.ReferenceType, referenceID, exitActionID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueCreateQueuecall", ctx, queueID, referenceType, referenceID, exitActionID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueCreateQueuecall indicates an expected call of QMV1QueueCreateQueuecall.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueCreateQueuecall(ctx, queueID, referenceType, referenceID, exitActionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueCreateQueuecall", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueCreateQueuecall), ctx, queueID, referenceType, referenceID, exitActionID)
}

// QMV1QueueDelete mocks base method.
func (m *MockRequestHandler) QMV1QueueDelete(ctx context.Context, queueID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueDelete", ctx, queueID)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueueDelete indicates an expected call of QMV1QueueDelete.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueDelete(ctx, queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueDelete", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueDelete), ctx, queueID)
}

// QMV1QueueGet mocks base method.
func (m *MockRequestHandler) QMV1QueueGet(ctx context.Context, queueID uuid.UUID) (*queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueGet", ctx, queueID)
	ret0, _ := ret[0].(*queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueGet indicates an expected call of QMV1QueueGet.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueGet(ctx, queueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueGet", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueGet), ctx, queueID)
}

// QMV1QueueGets mocks base method.
func (m *MockRequestHandler) QMV1QueueGets(ctx context.Context, userID uint64, pageToken string, pageSize uint64) ([]queue.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueGets", ctx, userID, pageToken, pageSize)
	ret0, _ := ret[0].([]queue.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueueGets indicates an expected call of QMV1QueueGets.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueGets(ctx, userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueGets", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueGets), ctx, userID, pageToken, pageSize)
}

// QMV1QueueUpdate mocks base method.
func (m *MockRequestHandler) QMV1QueueUpdate(ctx context.Context, queueID uuid.UUID, name, detail, webhookURI, webhookMethod string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueUpdate", ctx, queueID, name, detail, webhookURI, webhookMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueueUpdate indicates an expected call of QMV1QueueUpdate.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueUpdate(ctx, queueID, name, detail, webhookURI, webhookMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueUpdate", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueUpdate), ctx, queueID, name, detail, webhookURI, webhookMethod)
}

// QMV1QueueUpdateActions mocks base method.
func (m *MockRequestHandler) QMV1QueueUpdateActions(ctx context.Context, queueID uuid.UUID, waitActions []action.Action, timeoutWait, timeoutService int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueUpdateActions", ctx, queueID, waitActions, timeoutWait, timeoutService)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueueUpdateActions indicates an expected call of QMV1QueueUpdateActions.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueUpdateActions(ctx, queueID, waitActions, timeoutWait, timeoutService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueUpdateActions", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueUpdateActions), ctx, queueID, waitActions, timeoutWait, timeoutService)
}

// QMV1QueueUpdateRoutingMethod mocks base method.
func (m *MockRequestHandler) QMV1QueueUpdateRoutingMethod(ctx context.Context, queueID uuid.UUID, routingMethod queue.RoutingMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueUpdateRoutingMethod", ctx, queueID, routingMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueueUpdateRoutingMethod indicates an expected call of QMV1QueueUpdateRoutingMethod.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueUpdateRoutingMethod(ctx, queueID, routingMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueUpdateRoutingMethod", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueUpdateRoutingMethod), ctx, queueID, routingMethod)
}

// QMV1QueueUpdateTagIDs mocks base method.
func (m *MockRequestHandler) QMV1QueueUpdateTagIDs(ctx context.Context, queueID uuid.UUID, tagIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueueUpdateTagIDs", ctx, queueID, tagIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueueUpdateTagIDs indicates an expected call of QMV1QueueUpdateTagIDs.
func (mr *MockRequestHandlerMockRecorder) QMV1QueueUpdateTagIDs(ctx, queueID, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueueUpdateTagIDs", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueueUpdateTagIDs), ctx, queueID, tagIDs)
}

// QMV1QueuecallDelete mocks base method.
func (m *MockRequestHandler) QMV1QueuecallDelete(ctx context.Context, queuecallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallDelete", ctx, queuecallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueuecallDelete indicates an expected call of QMV1QueuecallDelete.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallDelete(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallDelete", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallDelete), ctx, queuecallID)
}

// QMV1QueuecallDeleteByReferenceID mocks base method.
func (m *MockRequestHandler) QMV1QueuecallDeleteByReferenceID(ctx context.Context, referenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallDeleteByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueuecallDeleteByReferenceID indicates an expected call of QMV1QueuecallDeleteByReferenceID.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallDeleteByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallDeleteByReferenceID", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallDeleteByReferenceID), ctx, referenceID)
}

// QMV1QueuecallExecute mocks base method.
func (m *MockRequestHandler) QMV1QueuecallExecute(ctx context.Context, queuecallID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallExecute", ctx, queuecallID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueuecallExecute indicates an expected call of QMV1QueuecallExecute.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallExecute(ctx, queuecallID, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallExecute", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallExecute), ctx, queuecallID, delay)
}

// QMV1QueuecallGet mocks base method.
func (m *MockRequestHandler) QMV1QueuecallGet(ctx context.Context, queuecallID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallGet", ctx, queuecallID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueuecallGet indicates an expected call of QMV1QueuecallGet.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallGet(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallGet", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallGet), ctx, queuecallID)
}

// QMV1QueuecallGets mocks base method.
func (m *MockRequestHandler) QMV1QueuecallGets(ctx context.Context, userID uint64, pageToken string, pageSize uint64) ([]queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallGets", ctx, userID, pageToken, pageSize)
	ret0, _ := ret[0].([]queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueuecallGets indicates an expected call of QMV1QueuecallGets.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallGets(ctx, userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallGets", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallGets), ctx, userID, pageToken, pageSize)
}

// QMV1QueuecallReferenceGet mocks base method.
func (m *MockRequestHandler) QMV1QueuecallReferenceGet(ctx context.Context, referenceID uuid.UUID) (*queuecallreference.QueuecallReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallReferenceGet", ctx, referenceID)
	ret0, _ := ret[0].(*queuecallreference.QueuecallReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QMV1QueuecallReferenceGet indicates an expected call of QMV1QueuecallReferenceGet.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallReferenceGet(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallReferenceGet", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallReferenceGet), ctx, referenceID)
}

// QMV1QueuecallTiemoutService mocks base method.
func (m *MockRequestHandler) QMV1QueuecallTiemoutService(ctx context.Context, queuecallID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallTiemoutService", ctx, queuecallID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueuecallTiemoutService indicates an expected call of QMV1QueuecallTiemoutService.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallTiemoutService(ctx, queuecallID, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallTiemoutService", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallTiemoutService), ctx, queuecallID, delay)
}

// QMV1QueuecallTiemoutWait mocks base method.
func (m *MockRequestHandler) QMV1QueuecallTiemoutWait(ctx context.Context, queuecallID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QMV1QueuecallTiemoutWait", ctx, queuecallID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// QMV1QueuecallTiemoutWait indicates an expected call of QMV1QueuecallTiemoutWait.
func (mr *MockRequestHandlerMockRecorder) QMV1QueuecallTiemoutWait(ctx, queuecallID, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QMV1QueuecallTiemoutWait", reflect.TypeOf((*MockRequestHandler)(nil).QMV1QueuecallTiemoutWait), ctx, queuecallID, delay)
}

// RMV1ContactGets mocks base method.
func (m *MockRequestHandler) RMV1ContactGets(ctx context.Context, endpoint string) ([]*astcontact.AstContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ContactGets", ctx, endpoint)
	ret0, _ := ret[0].([]*astcontact.AstContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ContactGets indicates an expected call of RMV1ContactGets.
func (mr *MockRequestHandlerMockRecorder) RMV1ContactGets(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ContactGets", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ContactGets), ctx, endpoint)
}

// RMV1ContactUpdate mocks base method.
func (m *MockRequestHandler) RMV1ContactUpdate(ctx context.Context, endpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ContactUpdate", ctx, endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// RMV1ContactUpdate indicates an expected call of RMV1ContactUpdate.
func (mr *MockRequestHandlerMockRecorder) RMV1ContactUpdate(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ContactUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ContactUpdate), ctx, endpoint)
}

// RMV1DomainCreate mocks base method.
func (m *MockRequestHandler) RMV1DomainCreate(ctx context.Context, userID uint64, domainName, name, detail string) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1DomainCreate", ctx, userID, domainName, name, detail)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1DomainCreate indicates an expected call of RMV1DomainCreate.
func (mr *MockRequestHandlerMockRecorder) RMV1DomainCreate(ctx, userID, domainName, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1DomainCreate", reflect.TypeOf((*MockRequestHandler)(nil).RMV1DomainCreate), ctx, userID, domainName, name, detail)
}

// RMV1DomainDelete mocks base method.
func (m *MockRequestHandler) RMV1DomainDelete(ctx context.Context, domainID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1DomainDelete", ctx, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RMV1DomainDelete indicates an expected call of RMV1DomainDelete.
func (mr *MockRequestHandlerMockRecorder) RMV1DomainDelete(ctx, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1DomainDelete", reflect.TypeOf((*MockRequestHandler)(nil).RMV1DomainDelete), ctx, domainID)
}

// RMV1DomainGet mocks base method.
func (m *MockRequestHandler) RMV1DomainGet(ctx context.Context, domainID uuid.UUID) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1DomainGet", ctx, domainID)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1DomainGet indicates an expected call of RMV1DomainGet.
func (mr *MockRequestHandlerMockRecorder) RMV1DomainGet(ctx, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1DomainGet", reflect.TypeOf((*MockRequestHandler)(nil).RMV1DomainGet), ctx, domainID)
}

// RMV1DomainGets mocks base method.
func (m *MockRequestHandler) RMV1DomainGets(ctx context.Context, userID uint64, pageToken string, pageSize uint64) ([]domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1DomainGets", ctx, userID, pageToken, pageSize)
	ret0, _ := ret[0].([]domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1DomainGets indicates an expected call of RMV1DomainGets.
func (mr *MockRequestHandlerMockRecorder) RMV1DomainGets(ctx, userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1DomainGets", reflect.TypeOf((*MockRequestHandler)(nil).RMV1DomainGets), ctx, userID, pageToken, pageSize)
}

// RMV1DomainUpdate mocks base method.
func (m *MockRequestHandler) RMV1DomainUpdate(ctx context.Context, f *domain.Domain) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1DomainUpdate", ctx, f)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1DomainUpdate indicates an expected call of RMV1DomainUpdate.
func (mr *MockRequestHandlerMockRecorder) RMV1DomainUpdate(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1DomainUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RMV1DomainUpdate), ctx, f)
}

// RMV1ExtensionCreate mocks base method.
func (m *MockRequestHandler) RMV1ExtensionCreate(ctx context.Context, e *extension.Extension) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ExtensionCreate", ctx, e)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ExtensionCreate indicates an expected call of RMV1ExtensionCreate.
func (mr *MockRequestHandlerMockRecorder) RMV1ExtensionCreate(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ExtensionCreate", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ExtensionCreate), ctx, e)
}

// RMV1ExtensionDelete mocks base method.
func (m *MockRequestHandler) RMV1ExtensionDelete(ctx context.Context, extensionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ExtensionDelete", ctx, extensionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RMV1ExtensionDelete indicates an expected call of RMV1ExtensionDelete.
func (mr *MockRequestHandlerMockRecorder) RMV1ExtensionDelete(ctx, extensionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ExtensionDelete", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ExtensionDelete), ctx, extensionID)
}

// RMV1ExtensionGet mocks base method.
func (m *MockRequestHandler) RMV1ExtensionGet(ctx context.Context, extensionID uuid.UUID) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ExtensionGet", ctx, extensionID)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ExtensionGet indicates an expected call of RMV1ExtensionGet.
func (mr *MockRequestHandlerMockRecorder) RMV1ExtensionGet(ctx, extensionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ExtensionGet", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ExtensionGet), ctx, extensionID)
}

// RMV1ExtensionGets mocks base method.
func (m *MockRequestHandler) RMV1ExtensionGets(ctx context.Context, domainID uuid.UUID, pageToken string, pageSize uint64) ([]extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ExtensionGets", ctx, domainID, pageToken, pageSize)
	ret0, _ := ret[0].([]extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ExtensionGets indicates an expected call of RMV1ExtensionGets.
func (mr *MockRequestHandlerMockRecorder) RMV1ExtensionGets(ctx, domainID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ExtensionGets", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ExtensionGets), ctx, domainID, pageToken, pageSize)
}

// RMV1ExtensionUpdate mocks base method.
func (m *MockRequestHandler) RMV1ExtensionUpdate(ctx context.Context, f *extension.Extension) (*extension.Extension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RMV1ExtensionUpdate", ctx, f)
	ret0, _ := ret[0].(*extension.Extension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RMV1ExtensionUpdate indicates an expected call of RMV1ExtensionUpdate.
func (mr *MockRequestHandlerMockRecorder) RMV1ExtensionUpdate(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RMV1ExtensionUpdate", reflect.TypeOf((*MockRequestHandler)(nil).RMV1ExtensionUpdate), ctx, f)
}

// SMV1RecordingGet mocks base method.
func (m *MockRequestHandler) SMV1RecordingGet(ctx context.Context, id uuid.UUID) (*bucketrecording.BucketRecording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMV1RecordingGet", ctx, id)
	ret0, _ := ret[0].(*bucketrecording.BucketRecording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMV1RecordingGet indicates an expected call of SMV1RecordingGet.
func (mr *MockRequestHandlerMockRecorder) SMV1RecordingGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMV1RecordingGet", reflect.TypeOf((*MockRequestHandler)(nil).SMV1RecordingGet), ctx, id)
}

// TMV1SpeecheCreate mocks base method.
func (m *MockRequestHandler) TMV1SpeecheCreate(ctx context.Context, text, gender, language string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TMV1SpeecheCreate", ctx, text, gender, language)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TMV1SpeecheCreate indicates an expected call of TMV1SpeecheCreate.
func (mr *MockRequestHandlerMockRecorder) TMV1SpeecheCreate(ctx, text, gender, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TMV1SpeecheCreate", reflect.TypeOf((*MockRequestHandler)(nil).TMV1SpeecheCreate), ctx, text, gender, language)
}

// TSV1CallRecordingCreate mocks base method.
func (m *MockRequestHandler) TSV1CallRecordingCreate(ctx context.Context, callID uuid.UUID, language, webhookURI, webhookMethod string, timeout, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSV1CallRecordingCreate", ctx, callID, language, webhookURI, webhookMethod, timeout, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// TSV1CallRecordingCreate indicates an expected call of TSV1CallRecordingCreate.
func (mr *MockRequestHandlerMockRecorder) TSV1CallRecordingCreate(ctx, callID, language, webhookURI, webhookMethod, timeout, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSV1CallRecordingCreate", reflect.TypeOf((*MockRequestHandler)(nil).TSV1CallRecordingCreate), ctx, callID, language, webhookURI, webhookMethod, timeout, delay)
}

// TSV1RecordingCreate mocks base method.
func (m *MockRequestHandler) TSV1RecordingCreate(ctx context.Context, id uuid.UUID, language string) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSV1RecordingCreate", ctx, id, language)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TSV1RecordingCreate indicates an expected call of TSV1RecordingCreate.
func (mr *MockRequestHandlerMockRecorder) TSV1RecordingCreate(ctx, id, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSV1RecordingCreate", reflect.TypeOf((*MockRequestHandler)(nil).TSV1RecordingCreate), ctx, id, language)
}

// TSV1StreamingCreate mocks base method.
func (m *MockRequestHandler) TSV1StreamingCreate(ctx context.Context, callID uuid.UUID, language, webhookURI, webhookMethod string) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSV1StreamingCreate", ctx, callID, language, webhookURI, webhookMethod)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TSV1StreamingCreate indicates an expected call of TSV1StreamingCreate.
func (mr *MockRequestHandlerMockRecorder) TSV1StreamingCreate(ctx, callID, language, webhookURI, webhookMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSV1StreamingCreate", reflect.TypeOf((*MockRequestHandler)(nil).TSV1StreamingCreate), ctx, callID, language, webhookURI, webhookMethod)
}

// UMV1UserCreate mocks base method.
func (m *MockRequestHandler) UMV1UserCreate(ctx context.Context, timeout int, username, password, name, detail string, permission user.Permission) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserCreate", ctx, timeout, username, password, name, detail, permission)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UMV1UserCreate indicates an expected call of UMV1UserCreate.
func (mr *MockRequestHandlerMockRecorder) UMV1UserCreate(ctx, timeout, username, password, name, detail, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserCreate", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserCreate), ctx, timeout, username, password, name, detail, permission)
}

// UMV1UserDelete mocks base method.
func (m *MockRequestHandler) UMV1UserDelete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UMV1UserDelete indicates an expected call of UMV1UserDelete.
func (mr *MockRequestHandlerMockRecorder) UMV1UserDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserDelete", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserDelete), ctx, id)
}

// UMV1UserGet mocks base method.
func (m *MockRequestHandler) UMV1UserGet(ctx context.Context, id uint64) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserGet", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UMV1UserGet indicates an expected call of UMV1UserGet.
func (mr *MockRequestHandlerMockRecorder) UMV1UserGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserGet", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserGet), ctx, id)
}

// UMV1UserGets mocks base method.
func (m *MockRequestHandler) UMV1UserGets(ctx context.Context, pageToken string, pageSize uint64) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserGets", ctx, pageToken, pageSize)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UMV1UserGets indicates an expected call of UMV1UserGets.
func (mr *MockRequestHandlerMockRecorder) UMV1UserGets(ctx, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserGets", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserGets), ctx, pageToken, pageSize)
}

// UMV1UserLogin mocks base method.
func (m *MockRequestHandler) UMV1UserLogin(ctx context.Context, timeout int, username, password string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserLogin", ctx, timeout, username, password)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UMV1UserLogin indicates an expected call of UMV1UserLogin.
func (mr *MockRequestHandlerMockRecorder) UMV1UserLogin(ctx, timeout, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserLogin", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserLogin), ctx, timeout, username, password)
}

// UMV1UserUpdateBasicInfo mocks base method.
func (m *MockRequestHandler) UMV1UserUpdateBasicInfo(ctx context.Context, userID uint64, name, detail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserUpdateBasicInfo", ctx, userID, name, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// UMV1UserUpdateBasicInfo indicates an expected call of UMV1UserUpdateBasicInfo.
func (mr *MockRequestHandlerMockRecorder) UMV1UserUpdateBasicInfo(ctx, userID, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserUpdateBasicInfo", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserUpdateBasicInfo), ctx, userID, name, detail)
}

// UMV1UserUpdatePassword mocks base method.
func (m *MockRequestHandler) UMV1UserUpdatePassword(ctx context.Context, timeout int, userID uint64, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserUpdatePassword", ctx, timeout, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UMV1UserUpdatePassword indicates an expected call of UMV1UserUpdatePassword.
func (mr *MockRequestHandlerMockRecorder) UMV1UserUpdatePassword(ctx, timeout, userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserUpdatePassword", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserUpdatePassword), ctx, timeout, userID, password)
}

// UMV1UserUpdatePermission mocks base method.
func (m *MockRequestHandler) UMV1UserUpdatePermission(ctx context.Context, userID uint64, permission user.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UMV1UserUpdatePermission", ctx, userID, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// UMV1UserUpdatePermission indicates an expected call of UMV1UserUpdatePermission.
func (mr *MockRequestHandlerMockRecorder) UMV1UserUpdatePermission(ctx, userID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UMV1UserUpdatePermission", reflect.TypeOf((*MockRequestHandler)(nil).UMV1UserUpdatePermission), ctx, userID, permission)
}

// WMV1WebhookSend mocks base method.
func (m *MockRequestHandler) WMV1WebhookSend(ctx context.Context, webhookMethod, webhookURI, dataType, messageType string, messageData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WMV1WebhookSend", ctx, webhookMethod, webhookURI, dataType, messageType, messageData)
	ret0, _ := ret[0].(error)
	return ret0
}

// WMV1WebhookSend indicates an expected call of WMV1WebhookSend.
func (mr *MockRequestHandlerMockRecorder) WMV1WebhookSend(ctx, webhookMethod, webhookURI, dataType, messageType, messageData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WMV1WebhookSend", reflect.TypeOf((*MockRequestHandler)(nil).WMV1WebhookSend), ctx, webhookMethod, webhookURI, dataType, messageType, messageData)
}
