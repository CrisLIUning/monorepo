// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager/pkg/requesthandler (interfaces: RequestHandler)

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
	action "gitlab.com/voipbin/bin-manager/call-manager/pkg/action"
	ari "gitlab.com/voipbin/bin-manager/call-manager/pkg/ari"
	reflect "reflect"
)

// MockRequestHandler is a mock of RequestHandler interface
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// AstChannelAnswer mocks base method
func (m *MockRequestHandler) AstChannelAnswer(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelAnswer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelAnswer indicates an expected call of AstChannelAnswer
func (mr *MockRequestHandlerMockRecorder) AstChannelAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelAnswer", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelAnswer), arg0, arg1)
}

// AstChannelContinue mocks base method
func (m *MockRequestHandler) AstChannelContinue(arg0, arg1, arg2, arg3 string, arg4 int, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelContinue", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelContinue indicates an expected call of AstChannelContinue
func (mr *MockRequestHandlerMockRecorder) AstChannelContinue(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelContinue", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelContinue), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AstChannelCreateSnoop mocks base method
func (m *MockRequestHandler) AstChannelCreateSnoop(arg0, arg1, arg2, arg3 string, arg4, arg5 ChannelSnoopDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelCreateSnoop", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelCreateSnoop indicates an expected call of AstChannelCreateSnoop
func (mr *MockRequestHandlerMockRecorder) AstChannelCreateSnoop(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelCreateSnoop", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelCreateSnoop), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AstChannelHangup mocks base method
func (m *MockRequestHandler) AstChannelHangup(arg0, arg1 string, arg2 ari.ChannelCause) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelHangup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelHangup indicates an expected call of AstChannelHangup
func (mr *MockRequestHandlerMockRecorder) AstChannelHangup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelHangup", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelHangup), arg0, arg1, arg2)
}

// AstChannelVariableSet mocks base method
func (m *MockRequestHandler) AstChannelVariableSet(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelVariableSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelVariableSet indicates an expected call of AstChannelVariableSet
func (mr *MockRequestHandlerMockRecorder) AstChannelVariableSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelVariableSet", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelVariableSet), arg0, arg1, arg2, arg3)
}

// FlowActionGet mocks base method
func (m *MockRequestHandler) FlowActionGet(arg0, arg1 uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowActionGet", arg0, arg1)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowActionGet indicates an expected call of FlowActionGet
func (mr *MockRequestHandlerMockRecorder) FlowActionGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowActionGet", reflect.TypeOf((*MockRequestHandler)(nil).FlowActionGet), arg0, arg1)
}
