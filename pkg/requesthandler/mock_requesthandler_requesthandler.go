// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "gitlab.com/voipbin/bin-manager/api-manager/models/action"
	cmcall "gitlab.com/voipbin/bin-manager/api-manager/pkg/requesthandler/models/cmcall"
	cmconference "gitlab.com/voipbin/bin-manager/api-manager/pkg/requesthandler/models/cmconference"
	fmflow "gitlab.com/voipbin/bin-manager/api-manager/pkg/requesthandler/models/fmflow"
)

// MockRequestHandler is a mock of RequestHandler interface.
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler.
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance.
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// CallCallCreate mocks base method.
func (m *MockRequestHandler) CallCallCreate(userID uint64, flowID uuid.UUID, source, destination cmcall.Address) (*cmcall.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallCallCreate", userID, flowID, source, destination)
	ret0, _ := ret[0].(*cmcall.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallCallCreate indicates an expected call of CallCallCreate.
func (mr *MockRequestHandlerMockRecorder) CallCallCreate(userID, flowID, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCallCreate", reflect.TypeOf((*MockRequestHandler)(nil).CallCallCreate), userID, flowID, source, destination)
}

// CallConferenceCreate mocks base method.
func (m *MockRequestHandler) CallConferenceCreate(userID uint64, conferenceType cmconference.Type, name, detail string) (*cmconference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallConferenceCreate", userID, conferenceType, name, detail)
	ret0, _ := ret[0].(*cmconference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallConferenceCreate indicates an expected call of CallConferenceCreate.
func (mr *MockRequestHandlerMockRecorder) CallConferenceCreate(userID, conferenceType, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallConferenceCreate", reflect.TypeOf((*MockRequestHandler)(nil).CallConferenceCreate), userID, conferenceType, name, detail)
}

// CallConferenceDelete mocks base method.
func (m *MockRequestHandler) CallConferenceDelete(conferenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallConferenceDelete", conferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallConferenceDelete indicates an expected call of CallConferenceDelete.
func (mr *MockRequestHandlerMockRecorder) CallConferenceDelete(conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallConferenceDelete", reflect.TypeOf((*MockRequestHandler)(nil).CallConferenceDelete), conferenceID)
}

// CallConferenceGet mocks base method.
func (m *MockRequestHandler) CallConferenceGet(conferenceID uuid.UUID) (*cmconference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallConferenceGet", conferenceID)
	ret0, _ := ret[0].(*cmconference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallConferenceGet indicates an expected call of CallConferenceGet.
func (mr *MockRequestHandlerMockRecorder) CallConferenceGet(conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallConferenceGet", reflect.TypeOf((*MockRequestHandler)(nil).CallConferenceGet), conferenceID)
}

// FMFlowCreate mocks base method.
func (m *MockRequestHandler) FMFlowCreate(userID uint64, id uuid.UUID, name, detail string, actions []action.Action, persist bool) (*fmflow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowCreate", userID, id, name, detail, actions, persist)
	ret0, _ := ret[0].(*fmflow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowCreate indicates an expected call of FMFlowCreate.
func (mr *MockRequestHandlerMockRecorder) FMFlowCreate(userID, id, name, detail, actions, persist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowCreate), userID, id, name, detail, actions, persist)
}
