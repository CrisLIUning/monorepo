// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/call-manager.git/pkg/requesthandler (interfaces: RequestHandler)

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	action "gitlab.com/voipbin/bin-manager/call-manager.git/pkg/action"
	ari "gitlab.com/voipbin/bin-manager/call-manager.git/pkg/eventhandler/models/ari"
	bridge "gitlab.com/voipbin/bin-manager/call-manager.git/pkg/eventhandler/models/bridge"
	channel "gitlab.com/voipbin/bin-manager/call-manager.git/pkg/eventhandler/models/channel"
)

// MockRequestHandler is a mock of RequestHandler interface.
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler.
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance.
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// AstAMIRedirect mocks base method.
func (m *MockRequestHandler) AstAMIRedirect(arg0, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstAMIRedirect", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstAMIRedirect indicates an expected call of AstAMIRedirect.
func (mr *MockRequestHandlerMockRecorder) AstAMIRedirect(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstAMIRedirect", reflect.TypeOf((*MockRequestHandler)(nil).AstAMIRedirect), arg0, arg1, arg2, arg3, arg4)
}

// AstBridgeAddChannel mocks base method.
func (m *MockRequestHandler) AstBridgeAddChannel(arg0, arg1, arg2, arg3 string, arg4, arg5 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeAddChannel", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeAddChannel indicates an expected call of AstBridgeAddChannel.
func (mr *MockRequestHandlerMockRecorder) AstBridgeAddChannel(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeAddChannel", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeAddChannel), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AstBridgeCreate mocks base method.
func (m *MockRequestHandler) AstBridgeCreate(arg0, arg1, arg2 string, arg3 []bridge.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeCreate indicates an expected call of AstBridgeCreate.
func (mr *MockRequestHandlerMockRecorder) AstBridgeCreate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeCreate", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeCreate), arg0, arg1, arg2, arg3)
}

// AstBridgeDelete mocks base method.
func (m *MockRequestHandler) AstBridgeDelete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeDelete indicates an expected call of AstBridgeDelete.
func (mr *MockRequestHandlerMockRecorder) AstBridgeDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeDelete", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeDelete), arg0, arg1)
}

// AstBridgeGet mocks base method.
func (m *MockRequestHandler) AstBridgeGet(arg0, arg1 string) (*bridge.Bridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeGet", arg0, arg1)
	ret0, _ := ret[0].(*bridge.Bridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstBridgeGet indicates an expected call of AstBridgeGet.
func (mr *MockRequestHandlerMockRecorder) AstBridgeGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeGet", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeGet), arg0, arg1)
}

// AstBridgeRemoveChannel mocks base method.
func (m *MockRequestHandler) AstBridgeRemoveChannel(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstBridgeRemoveChannel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstBridgeRemoveChannel indicates an expected call of AstBridgeRemoveChannel.
func (mr *MockRequestHandlerMockRecorder) AstBridgeRemoveChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstBridgeRemoveChannel", reflect.TypeOf((*MockRequestHandler)(nil).AstBridgeRemoveChannel), arg0, arg1, arg2)
}

// AstChannelAnswer mocks base method.
func (m *MockRequestHandler) AstChannelAnswer(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelAnswer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelAnswer indicates an expected call of AstChannelAnswer.
func (mr *MockRequestHandlerMockRecorder) AstChannelAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelAnswer", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelAnswer), arg0, arg1)
}

// AstChannelContinue mocks base method.
func (m *MockRequestHandler) AstChannelContinue(arg0, arg1, arg2, arg3 string, arg4 int, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelContinue", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelContinue indicates an expected call of AstChannelContinue.
func (mr *MockRequestHandlerMockRecorder) AstChannelContinue(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelContinue", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelContinue), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AstChannelCreate mocks base method.
func (m *MockRequestHandler) AstChannelCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelCreate indicates an expected call of AstChannelCreate.
func (mr *MockRequestHandlerMockRecorder) AstChannelCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelCreate", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// AstChannelCreateSnoop mocks base method.
func (m *MockRequestHandler) AstChannelCreateSnoop(arg0, arg1, arg2, arg3 string, arg4, arg5 channel.SnoopDirection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelCreateSnoop", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelCreateSnoop indicates an expected call of AstChannelCreateSnoop.
func (mr *MockRequestHandlerMockRecorder) AstChannelCreateSnoop(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelCreateSnoop", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelCreateSnoop), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AstChannelDTMF mocks base method.
func (m *MockRequestHandler) AstChannelDTMF(arg0, arg1, arg2 string, arg3, arg4, arg5, arg6 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelDTMF", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelDTMF indicates an expected call of AstChannelDTMF.
func (mr *MockRequestHandlerMockRecorder) AstChannelDTMF(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelDTMF", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelDTMF), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// AstChannelDial mocks base method.
func (m *MockRequestHandler) AstChannelDial(arg0, arg1, arg2 string, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelDial", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelDial indicates an expected call of AstChannelDial.
func (mr *MockRequestHandlerMockRecorder) AstChannelDial(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelDial", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelDial), arg0, arg1, arg2, arg3)
}

// AstChannelGet mocks base method.
func (m *MockRequestHandler) AstChannelGet(arg0, arg1 string) (*channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelGet", arg0, arg1)
	ret0, _ := ret[0].(*channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AstChannelGet indicates an expected call of AstChannelGet.
func (mr *MockRequestHandlerMockRecorder) AstChannelGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelGet", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelGet), arg0, arg1)
}

// AstChannelHangup mocks base method.
func (m *MockRequestHandler) AstChannelHangup(arg0, arg1 string, arg2 ari.ChannelCause) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelHangup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelHangup indicates an expected call of AstChannelHangup.
func (mr *MockRequestHandlerMockRecorder) AstChannelHangup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelHangup", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelHangup), arg0, arg1, arg2)
}

// AstChannelPlay mocks base method.
func (m *MockRequestHandler) AstChannelPlay(arg0, arg1 string, arg2 uuid.UUID, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelPlay", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelPlay indicates an expected call of AstChannelPlay.
func (mr *MockRequestHandlerMockRecorder) AstChannelPlay(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelPlay", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelPlay), arg0, arg1, arg2, arg3)
}

// AstChannelVariableSet mocks base method.
func (m *MockRequestHandler) AstChannelVariableSet(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AstChannelVariableSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AstChannelVariableSet indicates an expected call of AstChannelVariableSet.
func (mr *MockRequestHandlerMockRecorder) AstChannelVariableSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AstChannelVariableSet", reflect.TypeOf((*MockRequestHandler)(nil).AstChannelVariableSet), arg0, arg1, arg2, arg3)
}

// CallCallActionNext mocks base method.
func (m *MockRequestHandler) CallCallActionNext(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallCallActionNext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallCallActionNext indicates an expected call of CallCallActionNext.
func (mr *MockRequestHandlerMockRecorder) CallCallActionNext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCallActionNext", reflect.TypeOf((*MockRequestHandler)(nil).CallCallActionNext), arg0)
}

// CallCallActionTimeout mocks base method.
func (m *MockRequestHandler) CallCallActionTimeout(arg0 uuid.UUID, arg1 int, arg2 *action.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallCallActionTimeout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallCallActionTimeout indicates an expected call of CallCallActionTimeout.
func (mr *MockRequestHandlerMockRecorder) CallCallActionTimeout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCallActionTimeout", reflect.TypeOf((*MockRequestHandler)(nil).CallCallActionTimeout), arg0, arg1, arg2)
}

// CallCallHealth mocks base method.
func (m *MockRequestHandler) CallCallHealth(arg0 uuid.UUID, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallCallHealth", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallCallHealth indicates an expected call of CallCallHealth.
func (mr *MockRequestHandlerMockRecorder) CallCallHealth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallCallHealth", reflect.TypeOf((*MockRequestHandler)(nil).CallCallHealth), arg0, arg1, arg2)
}

// CallChannelHealth mocks base method.
func (m *MockRequestHandler) CallChannelHealth(arg0, arg1 string, arg2, arg3, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallChannelHealth", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallChannelHealth indicates an expected call of CallChannelHealth.
func (mr *MockRequestHandlerMockRecorder) CallChannelHealth(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallChannelHealth", reflect.TypeOf((*MockRequestHandler)(nil).CallChannelHealth), arg0, arg1, arg2, arg3, arg4)
}

// CallConferenceTerminate mocks base method.
func (m *MockRequestHandler) CallConferenceTerminate(arg0 uuid.UUID, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallConferenceTerminate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallConferenceTerminate indicates an expected call of CallConferenceTerminate.
func (mr *MockRequestHandlerMockRecorder) CallConferenceTerminate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallConferenceTerminate", reflect.TypeOf((*MockRequestHandler)(nil).CallConferenceTerminate), arg0, arg1, arg2)
}

// FlowActionGet mocks base method.
func (m *MockRequestHandler) FlowActionGet(arg0, arg1 uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowActionGet", arg0, arg1)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowActionGet indicates an expected call of FlowActionGet.
func (mr *MockRequestHandlerMockRecorder) FlowActionGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowActionGet", reflect.TypeOf((*MockRequestHandler)(nil).FlowActionGet), arg0, arg1)
}
