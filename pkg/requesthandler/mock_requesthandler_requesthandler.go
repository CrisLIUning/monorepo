// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	confbridge "gitlab.com/voipbin/bin-manager/call-manager.git/models/confbridge"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
	activeflow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/activeflow"
	flow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/flow"
)

// MockRequestHandler is a mock of RequestHandler interface.
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler.
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance.
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// CFConferencesIDDelete mocks base method.
func (m *MockRequestHandler) CFConferencesIDDelete(conferenceID uuid.UUID, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CFConferencesIDDelete", conferenceID, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// CFConferencesIDDelete indicates an expected call of CFConferencesIDDelete.
func (mr *MockRequestHandlerMockRecorder) CFConferencesIDDelete(conferenceID, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CFConferencesIDDelete", reflect.TypeOf((*MockRequestHandler)(nil).CFConferencesIDDelete), conferenceID, delay)
}

// CMConfbridgesIDCallsIDDelete mocks base method.
func (m *MockRequestHandler) CMConfbridgesIDCallsIDDelete(conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMConfbridgesIDCallsIDDelete", conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMConfbridgesIDCallsIDDelete indicates an expected call of CMConfbridgesIDCallsIDDelete.
func (mr *MockRequestHandlerMockRecorder) CMConfbridgesIDCallsIDDelete(conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMConfbridgesIDCallsIDDelete", reflect.TypeOf((*MockRequestHandler)(nil).CMConfbridgesIDCallsIDDelete), conferenceID, callID)
}

// CMConfbridgesIDCallsIDPost mocks base method.
func (m *MockRequestHandler) CMConfbridgesIDCallsIDPost(conferenceID, callID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMConfbridgesIDCallsIDPost", conferenceID, callID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMConfbridgesIDCallsIDPost indicates an expected call of CMConfbridgesIDCallsIDPost.
func (mr *MockRequestHandlerMockRecorder) CMConfbridgesIDCallsIDPost(conferenceID, callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMConfbridgesIDCallsIDPost", reflect.TypeOf((*MockRequestHandler)(nil).CMConfbridgesIDCallsIDPost), conferenceID, callID)
}

// CMConfbridgesIDDelete mocks base method.
func (m *MockRequestHandler) CMConfbridgesIDDelete(conferenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMConfbridgesIDDelete", conferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMConfbridgesIDDelete indicates an expected call of CMConfbridgesIDDelete.
func (mr *MockRequestHandlerMockRecorder) CMConfbridgesIDDelete(conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMConfbridgesIDDelete", reflect.TypeOf((*MockRequestHandler)(nil).CMConfbridgesIDDelete), conferenceID)
}

// CMConfbridgesPost mocks base method.
func (m *MockRequestHandler) CMConfbridgesPost(conferenceID uuid.UUID) (*confbridge.Confbridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMConfbridgesPost", conferenceID)
	ret0, _ := ret[0].(*confbridge.Confbridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMConfbridgesPost indicates an expected call of CMConfbridgesPost.
func (mr *MockRequestHandlerMockRecorder) CMConfbridgesPost(conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMConfbridgesPost", reflect.TypeOf((*MockRequestHandler)(nil).CMConfbridgesPost), conferenceID)
}

// FMFlowCreate mocks base method.
func (m *MockRequestHandler) FMFlowCreate(f *flow.Flow) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowCreate", f)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowCreate indicates an expected call of FMFlowCreate.
func (mr *MockRequestHandlerMockRecorder) FMFlowCreate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowCreate), f)
}

// FMFlowDelete mocks base method.
func (m *MockRequestHandler) FMFlowDelete(flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowDelete", flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FMFlowDelete indicates an expected call of FMFlowDelete.
func (mr *MockRequestHandlerMockRecorder) FMFlowDelete(flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowDelete", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowDelete), flowID)
}

// FMFlowGet mocks base method.
func (m *MockRequestHandler) FMFlowGet(flowID uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowGet", flowID)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowGet indicates an expected call of FMFlowGet.
func (mr *MockRequestHandlerMockRecorder) FMFlowGet(flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowGet", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowGet), flowID)
}

// FMFlowGets mocks base method.
func (m *MockRequestHandler) FMFlowGets(userID uint64, pageToken string, pageSize uint64) ([]flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowGets", userID, pageToken, pageSize)
	ret0, _ := ret[0].([]flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowGets indicates an expected call of FMFlowGets.
func (mr *MockRequestHandlerMockRecorder) FMFlowGets(userID, pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowGets", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowGets), userID, pageToken, pageSize)
}

// FMFlowUpdate mocks base method.
func (m *MockRequestHandler) FMFlowUpdate(f *flow.Flow) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowUpdate", f)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowUpdate indicates an expected call of FMFlowUpdate.
func (mr *MockRequestHandlerMockRecorder) FMFlowUpdate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowUpdate", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowUpdate), f)
}

// FlowActionGet mocks base method.
func (m *MockRequestHandler) FlowActionGet(flowID, actionID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowActionGet", flowID, actionID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowActionGet indicates an expected call of FlowActionGet.
func (mr *MockRequestHandlerMockRecorder) FlowActionGet(flowID, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowActionGet", reflect.TypeOf((*MockRequestHandler)(nil).FlowActionGet), flowID, actionID)
}

// FlowActvieFlowNextGet mocks base method.
func (m *MockRequestHandler) FlowActvieFlowNextGet(callID, actionID uuid.UUID) (*action.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowActvieFlowNextGet", callID, actionID)
	ret0, _ := ret[0].(*action.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowActvieFlowNextGet indicates an expected call of FlowActvieFlowNextGet.
func (mr *MockRequestHandlerMockRecorder) FlowActvieFlowNextGet(callID, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowActvieFlowNextGet", reflect.TypeOf((*MockRequestHandler)(nil).FlowActvieFlowNextGet), callID, actionID)
}

// FlowActvieFlowPost mocks base method.
func (m *MockRequestHandler) FlowActvieFlowPost(callID, flowID uuid.UUID) (*activeflow.ActiveFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowActvieFlowPost", callID, flowID)
	ret0, _ := ret[0].(*activeflow.ActiveFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowActvieFlowPost indicates an expected call of FlowActvieFlowPost.
func (mr *MockRequestHandlerMockRecorder) FlowActvieFlowPost(callID, flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowActvieFlowPost", reflect.TypeOf((*MockRequestHandler)(nil).FlowActvieFlowPost), callID, flowID)
}

// WMWebhookPOST mocks base method.
func (m *MockRequestHandler) WMWebhookPOST(webhookMethod, webhookURI, dataType, messageType string, messageData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WMWebhookPOST", webhookMethod, webhookURI, dataType, messageType, messageData)
	ret0, _ := ret[0].(error)
	return ret0
}

// WMWebhookPOST indicates an expected call of WMWebhookPOST.
func (mr *MockRequestHandlerMockRecorder) WMWebhookPOST(webhookMethod, webhookURI, dataType, messageType, messageData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WMWebhookPOST", reflect.TypeOf((*MockRequestHandler)(nil).WMWebhookPOST), webhookMethod, webhookURI, dataType, messageType, messageData)
}
