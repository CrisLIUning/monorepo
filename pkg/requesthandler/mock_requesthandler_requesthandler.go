// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package requesthandler is a generated GoMock package.
package requesthandler

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	address "gitlab.com/voipbin/bin-manager/call-manager.git/models/address"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/models/call"
	conference "gitlab.com/voipbin/bin-manager/call-manager.git/models/conference"
	action "gitlab.com/voipbin/bin-manager/flow-manager.git/models/action"
	flow "gitlab.com/voipbin/bin-manager/flow-manager.git/models/flow"
)

// MockRequestHandler is a mock of RequestHandler interface.
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler.
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance.
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// CMCallAddChainedCall mocks base method.
func (m *MockRequestHandler) CMCallAddChainedCall(callID, chainedCallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallAddChainedCall", callID, chainedCallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMCallAddChainedCall indicates an expected call of CMCallAddChainedCall.
func (mr *MockRequestHandlerMockRecorder) CMCallAddChainedCall(callID, chainedCallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallAddChainedCall", reflect.TypeOf((*MockRequestHandler)(nil).CMCallAddChainedCall), callID, chainedCallID)
}

// CMCallCreate mocks base method.
func (m *MockRequestHandler) CMCallCreate(userID uint64, flowID uuid.UUID, source, destination address.Address) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallCreate", userID, flowID, source, destination)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMCallCreate indicates an expected call of CMCallCreate.
func (mr *MockRequestHandlerMockRecorder) CMCallCreate(userID, flowID, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallCreate", reflect.TypeOf((*MockRequestHandler)(nil).CMCallCreate), userID, flowID, source, destination)
}

// CMCallGet mocks base method.
func (m *MockRequestHandler) CMCallGet(callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallGet", callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMCallGet indicates an expected call of CMCallGet.
func (mr *MockRequestHandlerMockRecorder) CMCallGet(callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallGet", reflect.TypeOf((*MockRequestHandler)(nil).CMCallGet), callID)
}

// CMCallHangup mocks base method.
func (m *MockRequestHandler) CMCallHangup(callID uuid.UUID) (*call.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMCallHangup", callID)
	ret0, _ := ret[0].(*call.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMCallHangup indicates an expected call of CMCallHangup.
func (mr *MockRequestHandlerMockRecorder) CMCallHangup(callID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMCallHangup", reflect.TypeOf((*MockRequestHandler)(nil).CMCallHangup), callID)
}

// CMConferenceCreate mocks base method.
func (m *MockRequestHandler) CMConferenceCreate(userID uint64, conferenceType conference.Type, name, detail string, timeout int) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMConferenceCreate", userID, conferenceType, name, detail, timeout)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMConferenceCreate indicates an expected call of CMConferenceCreate.
func (mr *MockRequestHandlerMockRecorder) CMConferenceCreate(userID, conferenceType, name, detail, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMConferenceCreate", reflect.TypeOf((*MockRequestHandler)(nil).CMConferenceCreate), userID, conferenceType, name, detail, timeout)
}

// CMConferenceDelete mocks base method.
func (m *MockRequestHandler) CMConferenceDelete(conferenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMConferenceDelete", conferenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CMConferenceDelete indicates an expected call of CMConferenceDelete.
func (mr *MockRequestHandlerMockRecorder) CMConferenceDelete(conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMConferenceDelete", reflect.TypeOf((*MockRequestHandler)(nil).CMConferenceDelete), conferenceID)
}

// CMConferenceGet mocks base method.
func (m *MockRequestHandler) CMConferenceGet(conferenceID uuid.UUID) (*conference.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CMConferenceGet", conferenceID)
	ret0, _ := ret[0].(*conference.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CMConferenceGet indicates an expected call of CMConferenceGet.
func (mr *MockRequestHandlerMockRecorder) CMConferenceGet(conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CMConferenceGet", reflect.TypeOf((*MockRequestHandler)(nil).CMConferenceGet), conferenceID)
}

// FMFlowCreate mocks base method.
func (m *MockRequestHandler) FMFlowCreate(userID uint64, name, detail string, actions []action.Action, persist bool) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FMFlowCreate", userID, name, detail, actions, persist)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FMFlowCreate indicates an expected call of FMFlowCreate.
func (mr *MockRequestHandlerMockRecorder) FMFlowCreate(userID, name, detail, actions, persist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FMFlowCreate", reflect.TypeOf((*MockRequestHandler)(nil).FMFlowCreate), userID, name, detail, actions, persist)
}

// NMNumberFlowDelete mocks base method.
func (m *MockRequestHandler) NMNumberFlowDelete(flowID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NMNumberFlowDelete", flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NMNumberFlowDelete indicates an expected call of NMNumberFlowDelete.
func (mr *MockRequestHandlerMockRecorder) NMNumberFlowDelete(flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NMNumberFlowDelete", reflect.TypeOf((*MockRequestHandler)(nil).NMNumberFlowDelete), flowID)
}

// TMCallRecordingPost mocks base method.
func (m *MockRequestHandler) TMCallRecordingPost(callID uuid.UUID, language, webhookURI, webhookMethod string, timeout, delay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TMCallRecordingPost", callID, language, webhookURI, webhookMethod, timeout, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// TMCallRecordingPost indicates an expected call of TMCallRecordingPost.
func (mr *MockRequestHandlerMockRecorder) TMCallRecordingPost(callID, language, webhookURI, webhookMethod, timeout, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TMCallRecordingPost", reflect.TypeOf((*MockRequestHandler)(nil).TMCallRecordingPost), callID, language, webhookURI, webhookMethod, timeout, delay)
}
