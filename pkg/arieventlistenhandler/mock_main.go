// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package arieventlistenhandler is a generated GoMock package.
package arieventlistenhandler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockARIEventListenHandler is a mock of ARIEventListenHandler interface.
type MockARIEventListenHandler struct {
	ctrl     *gomock.Controller
	recorder *MockARIEventListenHandlerMockRecorder
}

// MockARIEventListenHandlerMockRecorder is the mock recorder for MockARIEventListenHandler.
type MockARIEventListenHandlerMockRecorder struct {
	mock *MockARIEventListenHandler
}

// NewMockARIEventListenHandler creates a new mock instance.
func NewMockARIEventListenHandler(ctrl *gomock.Controller) *MockARIEventListenHandler {
	mock := &MockARIEventListenHandler{ctrl: ctrl}
	mock.recorder = &MockARIEventListenHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockARIEventListenHandler) EXPECT() *MockARIEventListenHandlerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockARIEventListenHandler) Run(queue, receiver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", queue, receiver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockARIEventListenHandlerMockRecorder) Run(queue, receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockARIEventListenHandler)(nil).Run), queue, receiver)
}
