// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package transcirpthandler is a generated GoMock package.
package transcirpthandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	streaming "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/streaming"
	transcribe "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcribe"
	transcript "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcript"
)

// MockTranscriptHandler is a mock of TranscriptHandler interface.
type MockTranscriptHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTranscriptHandlerMockRecorder
}

// MockTranscriptHandlerMockRecorder is the mock recorder for MockTranscriptHandler.
type MockTranscriptHandlerMockRecorder struct {
	mock *MockTranscriptHandler
}

// NewMockTranscriptHandler creates a new mock instance.
func NewMockTranscriptHandler(ctrl *gomock.Controller) *MockTranscriptHandler {
	mock := &MockTranscriptHandler{ctrl: ctrl}
	mock.recorder = &MockTranscriptHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranscriptHandler) EXPECT() *MockTranscriptHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTranscriptHandler) Create(ctx context.Context, customerID, transcribeID uuid.UUID, direction transcript.Direction, message, tmTranscript string) (*transcript.Transcript, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, transcribeID, direction, message, tmTranscript)
	ret0, _ := ret[0].(*transcript.Transcript)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTranscriptHandlerMockRecorder) Create(ctx, customerID, transcribeID, direction, message, tmTranscript interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTranscriptHandler)(nil).Create), ctx, customerID, transcribeID, direction, message, tmTranscript)
}

// Recording mocks base method.
func (m *MockTranscriptHandler) Recording(ctx context.Context, customerID, transcribeID, recordingID uuid.UUID, language string) (*transcript.Transcript, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recording", ctx, customerID, transcribeID, recordingID, language)
	ret0, _ := ret[0].(*transcript.Transcript)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recording indicates an expected call of Recording.
func (mr *MockTranscriptHandlerMockRecorder) Recording(ctx, customerID, transcribeID, recordingID, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recording", reflect.TypeOf((*MockTranscriptHandler)(nil).Recording), ctx, customerID, transcribeID, recordingID, language)
}

// Start mocks base method.
func (m *MockTranscriptHandler) Start(ctx context.Context, tr *transcribe.Transcribe, direction transcript.Direction) (*streaming.Streaming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, tr, direction)
	ret0, _ := ret[0].(*streaming.Streaming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockTranscriptHandlerMockRecorder) Start(ctx, tr, direction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTranscriptHandler)(nil).Start), ctx, tr, direction)
}

// Stop mocks base method.
func (m *MockTranscriptHandler) Stop(ctx context.Context, st *streaming.Streaming) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, st)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockTranscriptHandlerMockRecorder) Stop(ctx, st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTranscriptHandler)(nil).Stop), ctx, st)
}
