// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package notifyhandler is a generated GoMock package.
package notifyhandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebhookMessage is a mock of WebhookMessage interface.
type MockWebhookMessage struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookMessageMockRecorder
}

// MockWebhookMessageMockRecorder is the mock recorder for MockWebhookMessage.
type MockWebhookMessageMockRecorder struct {
	mock *MockWebhookMessage
}

// NewMockWebhookMessage creates a new mock instance.
func NewMockWebhookMessage(ctrl *gomock.Controller) *MockWebhookMessage {
	mock := &MockWebhookMessage{ctrl: ctrl}
	mock.recorder = &MockWebhookMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookMessage) EXPECT() *MockWebhookMessageMockRecorder {
	return m.recorder
}

// CreateWebhookEvent mocks base method.
func (m *MockWebhookMessage) CreateWebhookEvent() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhookEvent")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhookEvent indicates an expected call of CreateWebhookEvent.
func (mr *MockWebhookMessageMockRecorder) CreateWebhookEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhookEvent", reflect.TypeOf((*MockWebhookMessage)(nil).CreateWebhookEvent))
}

// MockNotifyHandler is a mock of NotifyHandler interface.
type MockNotifyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyHandlerMockRecorder
}

// MockNotifyHandlerMockRecorder is the mock recorder for MockNotifyHandler.
type MockNotifyHandlerMockRecorder struct {
	mock *MockNotifyHandler
}

// NewMockNotifyHandler creates a new mock instance.
func NewMockNotifyHandler(ctrl *gomock.Controller) *MockNotifyHandler {
	mock := &MockNotifyHandler{ctrl: ctrl}
	mock.recorder = &MockNotifyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyHandler) EXPECT() *MockNotifyHandlerMockRecorder {
	return m.recorder
}

// PublishEvent mocks base method.
func (m *MockNotifyHandler) PublishEvent(ctx context.Context, t string, c interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishEvent", ctx, t, c)
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockNotifyHandlerMockRecorder) PublishEvent(ctx, t, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockNotifyHandler)(nil).PublishEvent), ctx, t, c)
}

// PublishWebhook mocks base method.
func (m *MockNotifyHandler) PublishWebhook(ctx context.Context, t, webhookURI string, c WebhookMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishWebhook", ctx, t, webhookURI, c)
}

// PublishWebhook indicates an expected call of PublishWebhook.
func (mr *MockNotifyHandlerMockRecorder) PublishWebhook(ctx, t, webhookURI, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWebhook", reflect.TypeOf((*MockNotifyHandler)(nil).PublishWebhook), ctx, t, webhookURI, c)
}

// PublishWebhookEvent mocks base method.
func (m *MockNotifyHandler) PublishWebhookEvent(ctx context.Context, eventType, webhookURI string, message WebhookMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishWebhookEvent", ctx, eventType, webhookURI, message)
}

// PublishWebhookEvent indicates an expected call of PublishWebhookEvent.
func (mr *MockNotifyHandlerMockRecorder) PublishWebhookEvent(ctx, eventType, webhookURI, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWebhookEvent", reflect.TypeOf((*MockNotifyHandler)(nil).PublishWebhookEvent), ctx, eventType, webhookURI, message)
}
