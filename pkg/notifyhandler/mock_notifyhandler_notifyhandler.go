// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package notifyhandler is a generated GoMock package.
package notifyhandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/models/call"
	recording "gitlab.com/voipbin/bin-manager/call-manager.git/models/recording"
)

// MockWebhookMessage is a mock of WebhookMessage interface.
type MockWebhookMessage struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookMessageMockRecorder
}

// MockWebhookMessageMockRecorder is the mock recorder for MockWebhookMessage.
type MockWebhookMessageMockRecorder struct {
	mock *MockWebhookMessage
}

// NewMockWebhookMessage creates a new mock instance.
func NewMockWebhookMessage(ctrl *gomock.Controller) *MockWebhookMessage {
	mock := &MockWebhookMessage{ctrl: ctrl}
	mock.recorder = &MockWebhookMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookMessage) EXPECT() *MockWebhookMessageMockRecorder {
	return m.recorder
}

// CreateWebhookEvent mocks base method.
func (m *MockWebhookMessage) CreateWebhookEvent(t string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhookEvent", t)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhookEvent indicates an expected call of CreateWebhookEvent.
func (mr *MockWebhookMessageMockRecorder) CreateWebhookEvent(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhookEvent", reflect.TypeOf((*MockWebhookMessage)(nil).CreateWebhookEvent), t)
}

// GetWebhookURI mocks base method.
func (m *MockWebhookMessage) GetWebhookURI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookURI")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWebhookURI indicates an expected call of GetWebhookURI.
func (mr *MockWebhookMessageMockRecorder) GetWebhookURI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookURI", reflect.TypeOf((*MockWebhookMessage)(nil).GetWebhookURI))
}

// MockNotifyHandler is a mock of NotifyHandler interface.
type MockNotifyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyHandlerMockRecorder
}

// MockNotifyHandlerMockRecorder is the mock recorder for MockNotifyHandler.
type MockNotifyHandlerMockRecorder struct {
	mock *MockNotifyHandler
}

// NewMockNotifyHandler creates a new mock instance.
func NewMockNotifyHandler(ctrl *gomock.Controller) *MockNotifyHandler {
	mock := &MockNotifyHandler{ctrl: ctrl}
	mock.recorder = &MockNotifyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyHandler) EXPECT() *MockNotifyHandlerMockRecorder {
	return m.recorder
}

// NotifyCall mocks base method.
func (m *MockNotifyHandler) NotifyCall(ctx context.Context, c *call.Call, t EventType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyCall", ctx, c, t)
}

// NotifyCall indicates an expected call of NotifyCall.
func (mr *MockNotifyHandlerMockRecorder) NotifyCall(ctx, c, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCall", reflect.TypeOf((*MockNotifyHandler)(nil).NotifyCall), ctx, c, t)
}

// NotifyRecording mocks base method.
func (m *MockNotifyHandler) NotifyRecording(ctx context.Context, t EventType, c *recording.Recording) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyRecording", ctx, t, c)
}

// NotifyRecording indicates an expected call of NotifyRecording.
func (mr *MockNotifyHandlerMockRecorder) NotifyRecording(ctx, t, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRecording", reflect.TypeOf((*MockNotifyHandler)(nil).NotifyRecording), ctx, t, c)
}
