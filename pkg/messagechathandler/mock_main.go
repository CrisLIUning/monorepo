// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package messagechathandler is a generated GoMock package.
package messagechathandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	media "gitlab.com/voipbin/bin-manager/chat-manager.git/models/media"
	message "gitlab.com/voipbin/bin-manager/chat-manager.git/models/message"
	messagechat "gitlab.com/voipbin/bin-manager/chat-manager.git/models/messagechat"
	address "gitlab.com/voipbin/bin-manager/common-handler.git/models/address"
)

// MockMessagechatHandler is a mock of MessagechatHandler interface.
type MockMessagechatHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessagechatHandlerMockRecorder
}

// MockMessagechatHandlerMockRecorder is the mock recorder for MockMessagechatHandler.
type MockMessagechatHandlerMockRecorder struct {
	mock *MockMessagechatHandler
}

// NewMockMessagechatHandler creates a new mock instance.
func NewMockMessagechatHandler(ctrl *gomock.Controller) *MockMessagechatHandler {
	mock := &MockMessagechatHandler{ctrl: ctrl}
	mock.recorder = &MockMessagechatHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagechatHandler) EXPECT() *MockMessagechatHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessagechatHandler) Create(ctx context.Context, customerID, chatID uuid.UUID, source *address.Address, messageType message.Type, text string, medias []media.Media) (*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, chatID, source, messageType, text, medias)
	ret0, _ := ret[0].(*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessagechatHandlerMockRecorder) Create(ctx, customerID, chatID, source, messageType, text, medias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessagechatHandler)(nil).Create), ctx, customerID, chatID, source, messageType, text, medias)
}

// Delete mocks base method.
func (m *MockMessagechatHandler) Delete(ctx context.Context, id uuid.UUID) (*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMessagechatHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessagechatHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockMessagechatHandler) Get(ctx context.Context, id uuid.UUID) (*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMessagechatHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessagechatHandler)(nil).Get), ctx, id)
}

// GetsByChatID mocks base method.
func (m *MockMessagechatHandler) GetsByChatID(ctx context.Context, chatID uuid.UUID, token string, limit uint64) ([]*messagechat.Messagechat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByChatID", ctx, chatID, token, limit)
	ret0, _ := ret[0].([]*messagechat.Messagechat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByChatID indicates an expected call of GetsByChatID.
func (mr *MockMessagechatHandlerMockRecorder) GetsByChatID(ctx, chatID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByChatID", reflect.TypeOf((*MockMessagechatHandler)(nil).GetsByChatID), ctx, chatID, token, limit)
}
