// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/voipbin/bin-manager/flow-manager/pkg/flow_handler (interfaces: FlowHandler)

// Package flowhandler is a generated GoMock package.
package flowhandler

import (
	context "context"
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	flow "gitlab.com/voipbin/bin-manager/flow-manager/pkg/flow"
	reflect "reflect"
)

// MockFlowHandler is a mock of FlowHandler interface
type MockFlowHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFlowHandlerMockRecorder
}

// MockFlowHandlerMockRecorder is the mock recorder for MockFlowHandler
type MockFlowHandlerMockRecorder struct {
	mock *MockFlowHandler
}

// NewMockFlowHandler creates a new mock instance
func NewMockFlowHandler(ctrl *gomock.Controller) *MockFlowHandler {
	mock := &MockFlowHandler{ctrl: ctrl}
	mock.recorder = &MockFlowHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlowHandler) EXPECT() *MockFlowHandlerMockRecorder {
	return m.recorder
}

// ActionGet mocks base method
func (m *MockFlowHandler) ActionGet(arg0 context.Context, arg1, arg2, arg3 uuid.UUID) (*flow.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionGet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*flow.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionGet indicates an expected call of ActionGet
func (mr *MockFlowHandlerMockRecorder) ActionGet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionGet", reflect.TypeOf((*MockFlowHandler)(nil).ActionGet), arg0, arg1, arg2, arg3)
}

// FlowCreate mocks base method
func (m *MockFlowHandler) FlowCreate(arg0 context.Context, arg1 *flow.Flow) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowCreate", arg0, arg1)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowCreate indicates an expected call of FlowCreate
func (mr *MockFlowHandlerMockRecorder) FlowCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowCreate", reflect.TypeOf((*MockFlowHandler)(nil).FlowCreate), arg0, arg1)
}

// FlowGet mocks base method
func (m *MockFlowHandler) FlowGet(arg0 context.Context, arg1, arg2 uuid.UUID) (*flow.Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowGet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*flow.Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowGet indicates an expected call of FlowGet
func (mr *MockFlowHandlerMockRecorder) FlowGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowGet", reflect.TypeOf((*MockFlowHandler)(nil).FlowGet), arg0, arg1, arg2)
}
