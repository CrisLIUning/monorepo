// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package transcribehandler is a generated GoMock package.
package transcribehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	common "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/common"
	transcribe "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcribe"
	transcript "gitlab.com/voipbin/bin-manager/transcribe-manager.git/models/transcript"
)

// MockTranscribeHandler is a mock of TranscribeHandler interface.
type MockTranscribeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTranscribeHandlerMockRecorder
}

// MockTranscribeHandlerMockRecorder is the mock recorder for MockTranscribeHandler.
type MockTranscribeHandlerMockRecorder struct {
	mock *MockTranscribeHandler
}

// NewMockTranscribeHandler creates a new mock instance.
func NewMockTranscribeHandler(ctrl *gomock.Controller) *MockTranscribeHandler {
	mock := &MockTranscribeHandler{ctrl: ctrl}
	mock.recorder = &MockTranscribeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranscribeHandler) EXPECT() *MockTranscribeHandlerMockRecorder {
	return m.recorder
}

// CallRecording mocks base method.
func (m *MockTranscribeHandler) CallRecording(ctx context.Context, customerID, callID uuid.UUID, language, webhookURI, webhookMethod string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallRecording", ctx, customerID, callID, language, webhookURI, webhookMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallRecording indicates an expected call of CallRecording.
func (mr *MockTranscribeHandlerMockRecorder) CallRecording(ctx, customerID, callID, language, webhookURI, webhookMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallRecording", reflect.TypeOf((*MockTranscribeHandler)(nil).CallRecording), ctx, customerID, callID, language, webhookURI, webhookMethod)
}

// Create mocks base method.
func (m *MockTranscribeHandler) Create(ctx context.Context, customerID, referenceID uuid.UUID, transType transcribe.Type, language string, direction common.Direction, transcripts []transcript.Transcript) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, referenceID, transType, language, direction, transcripts)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTranscribeHandlerMockRecorder) Create(ctx, customerID, referenceID, transType, language, direction, transcripts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTranscribeHandler)(nil).Create), ctx, customerID, referenceID, transType, language, direction, transcripts)
}

// Delete mocks base method.
func (m *MockTranscribeHandler) Delete(ctx context.Context, id uuid.UUID) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTranscribeHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTranscribeHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockTranscribeHandler) Get(ctx context.Context, id uuid.UUID) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTranscribeHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTranscribeHandler)(nil).Get), ctx, id)
}

// Recording mocks base method.
func (m *MockTranscribeHandler) Recording(ctx context.Context, customerID, recordingID uuid.UUID, language string) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recording", ctx, customerID, recordingID, language)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recording indicates an expected call of Recording.
func (mr *MockTranscribeHandlerMockRecorder) Recording(ctx, customerID, recordingID, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recording", reflect.TypeOf((*MockTranscribeHandler)(nil).Recording), ctx, customerID, recordingID, language)
}

// StreamingTranscribeStart mocks base method.
func (m *MockTranscribeHandler) StreamingTranscribeStart(ctx context.Context, customerID, referenceID uuid.UUID, transType transcribe.Type, language string) (*transcribe.Transcribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamingTranscribeStart", ctx, customerID, referenceID, transType, language)
	ret0, _ := ret[0].(*transcribe.Transcribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamingTranscribeStart indicates an expected call of StreamingTranscribeStart.
func (mr *MockTranscribeHandlerMockRecorder) StreamingTranscribeStart(ctx, customerID, referenceID, transType, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamingTranscribeStart", reflect.TypeOf((*MockTranscribeHandler)(nil).StreamingTranscribeStart), ctx, customerID, referenceID, transType, language)
}

// StreamingTranscribeStop mocks base method.
func (m *MockTranscribeHandler) StreamingTranscribeStop(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamingTranscribeStop", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamingTranscribeStop indicates an expected call of StreamingTranscribeStop.
func (mr *MockTranscribeHandlerMockRecorder) StreamingTranscribeStop(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamingTranscribeStop", reflect.TypeOf((*MockTranscribeHandler)(nil).StreamingTranscribeStop), ctx, id)
}
