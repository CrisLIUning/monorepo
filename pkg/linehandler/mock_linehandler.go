// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package linehandler is a generated GoMock package.
package linehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	conversation "gitlab.com/voipbin/bin-manager/conversation-manager.git/models/conversation"
	media "gitlab.com/voipbin/bin-manager/conversation-manager.git/models/media"
	message "gitlab.com/voipbin/bin-manager/conversation-manager.git/models/message"
)

// MockLineHandler is a mock of LineHandler interface.
type MockLineHandler struct {
	ctrl     *gomock.Controller
	recorder *MockLineHandlerMockRecorder
}

// MockLineHandlerMockRecorder is the mock recorder for MockLineHandler.
type MockLineHandlerMockRecorder struct {
	mock *MockLineHandler
}

// NewMockLineHandler creates a new mock instance.
func NewMockLineHandler(ctrl *gomock.Controller) *MockLineHandler {
	mock := &MockLineHandler{ctrl: ctrl}
	mock.recorder = &MockLineHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineHandler) EXPECT() *MockLineHandlerMockRecorder {
	return m.recorder
}

// Event mocks base method.
func (m *MockLineHandler) Event(ctx context.Context, customerID uuid.UUID, data []byte) ([]*conversation.Conversation, []*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event", ctx, customerID, data)
	ret0, _ := ret[0].([]*conversation.Conversation)
	ret1, _ := ret[1].([]*message.Message)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Event indicates an expected call of Event.
func (mr *MockLineHandlerMockRecorder) Event(ctx, customerID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockLineHandler)(nil).Event), ctx, customerID, data)
}

// Send mocks base method.
func (m *MockLineHandler) Send(ctx context.Context, customerID uuid.UUID, destination, text string, medias []media.Media) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, customerID, destination, text, medias)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLineHandlerMockRecorder) Send(ctx, customerID, destination, text, medias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLineHandler)(nil).Send), ctx, customerID, destination, text, medias)
}

// Setup mocks base method.
func (m *MockLineHandler) Setup(ctx context.Context, customerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, customerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockLineHandlerMockRecorder) Setup(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockLineHandler)(nil).Setup), ctx, customerID)
}
