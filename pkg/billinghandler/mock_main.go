// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package billinghandler is a generated GoMock package.
package billinghandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	billing "gitlab.com/voipbin/bin-manager/billing-manager.git/models/billing"
	address "gitlab.com/voipbin/bin-manager/common-handler.git/models/address"
)

// MockBillingHandler is a mock of BillingHandler interface.
type MockBillingHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBillingHandlerMockRecorder
}

// MockBillingHandlerMockRecorder is the mock recorder for MockBillingHandler.
type MockBillingHandlerMockRecorder struct {
	mock *MockBillingHandler
}

// NewMockBillingHandler creates a new mock instance.
func NewMockBillingHandler(ctrl *gomock.Controller) *MockBillingHandler {
	mock := &MockBillingHandler{ctrl: ctrl}
	mock.recorder = &MockBillingHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingHandler) EXPECT() *MockBillingHandlerMockRecorder {
	return m.recorder
}

// BillingEndByReferenceID mocks base method.
func (m *MockBillingHandler) BillingEndByReferenceID(ctx context.Context, referenceID uuid.UUID, tmBillingEnd string, source, destination *address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingEndByReferenceID", ctx, referenceID, tmBillingEnd, source, destination)
	ret0, _ := ret[0].(error)
	return ret0
}

// BillingEndByReferenceID indicates an expected call of BillingEndByReferenceID.
func (mr *MockBillingHandlerMockRecorder) BillingEndByReferenceID(ctx, referenceID, tmBillingEnd, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingEndByReferenceID", reflect.TypeOf((*MockBillingHandler)(nil).BillingEndByReferenceID), ctx, referenceID, tmBillingEnd, source, destination)
}

// BillingStart mocks base method.
func (m *MockBillingHandler) BillingStart(ctx context.Context, customerID uuid.UUID, referenceType billing.ReferenceType, referenceID uuid.UUID, tmBillingStart string, source, destination *address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingStart", ctx, customerID, referenceType, referenceID, tmBillingStart, source, destination)
	ret0, _ := ret[0].(error)
	return ret0
}

// BillingStart indicates an expected call of BillingStart.
func (mr *MockBillingHandlerMockRecorder) BillingStart(ctx, customerID, referenceType, referenceID, tmBillingStart, source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingStart", reflect.TypeOf((*MockBillingHandler)(nil).BillingStart), ctx, customerID, referenceType, referenceID, tmBillingStart, source, destination)
}

// Create mocks base method.
func (m *MockBillingHandler) Create(ctx context.Context, customerID, accountID uuid.UUID, referenceType billing.ReferenceType, referenceID uuid.UUID, costPerUnit float32, tmBillingStart string) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, accountID, referenceType, referenceID, costPerUnit, tmBillingStart)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBillingHandlerMockRecorder) Create(ctx, customerID, accountID, referenceType, referenceID, costPerUnit, tmBillingStart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingHandler)(nil).Create), ctx, customerID, accountID, referenceType, referenceID, costPerUnit, tmBillingStart)
}

// Get mocks base method.
func (m *MockBillingHandler) Get(ctx context.Context, id uuid.UUID) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBillingHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBillingHandler)(nil).Get), ctx, id)
}

// GetByReferenceID mocks base method.
func (m *MockBillingHandler) GetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferenceID indicates an expected call of GetByReferenceID.
func (mr *MockBillingHandlerMockRecorder) GetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferenceID", reflect.TypeOf((*MockBillingHandler)(nil).GetByReferenceID), ctx, referenceID)
}

// Gets mocks base method.
func (m *MockBillingHandler) Gets(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockBillingHandlerMockRecorder) Gets(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockBillingHandler)(nil).Gets), ctx, customerID, size, token)
}

// UpdateStatusEnd mocks base method.
func (m *MockBillingHandler) UpdateStatusEnd(ctx context.Context, id uuid.UUID, billingDuration float32, tmBillingEnd string) (*billing.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusEnd", ctx, id, billingDuration, tmBillingEnd)
	ret0, _ := ret[0].(*billing.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusEnd indicates an expected call of UpdateStatusEnd.
func (mr *MockBillingHandlerMockRecorder) UpdateStatusEnd(ctx, id, billingDuration, tmBillingEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusEnd", reflect.TypeOf((*MockBillingHandler)(nil).UpdateStatusEnd), ctx, id, billingDuration, tmBillingEnd)
}
