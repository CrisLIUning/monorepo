// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package domainhandler is a generated GoMock package.
package domainhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/voipbin/bin-manager/registrar-manager.git/models/domain"
)

// MockDomainHandler is a mock of DomainHandler interface.
type MockDomainHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDomainHandlerMockRecorder
}

// MockDomainHandlerMockRecorder is the mock recorder for MockDomainHandler.
type MockDomainHandlerMockRecorder struct {
	mock *MockDomainHandler
}

// NewMockDomainHandler creates a new mock instance.
func NewMockDomainHandler(ctrl *gomock.Controller) *MockDomainHandler {
	mock := &MockDomainHandler{ctrl: ctrl}
	mock.recorder = &MockDomainHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainHandler) EXPECT() *MockDomainHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDomainHandler) Create(ctx context.Context, customerID uuid.UUID, domainName, name, detail string) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, domainName, name, detail)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDomainHandlerMockRecorder) Create(ctx, customerID, domainName, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDomainHandler)(nil).Create), ctx, customerID, domainName, name, detail)
}

// Delete mocks base method.
func (m *MockDomainHandler) Delete(ctx context.Context, id uuid.UUID) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDomainHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDomainHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockDomainHandler) Get(ctx context.Context, id uuid.UUID) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDomainHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDomainHandler)(nil).Get), ctx, id)
}

// Gets mocks base method.
func (m *MockDomainHandler) Gets(ctx context.Context, customerID uuid.UUID, token string, limit uint64) ([]*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", ctx, customerID, token, limit)
	ret0, _ := ret[0].([]*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockDomainHandlerMockRecorder) Gets(ctx, customerID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockDomainHandler)(nil).Gets), ctx, customerID, token, limit)
}

// Update mocks base method.
func (m *MockDomainHandler) Update(ctx context.Context, id uuid.UUID, name, detail string) (*domain.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name, detail)
	ret0, _ := ret[0].(*domain.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDomainHandlerMockRecorder) Update(ctx, id, name, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDomainHandler)(nil).Update), ctx, id, name, detail)
}
