// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package queuecallreferencehandler is a generated GoMock package.
package queuecallreferencehandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	queuecall "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecall"
	queuecallreference "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecallreference"
)

// MockQueuecallReferenceHandler is a mock of QueuecallReferenceHandler interface.
type MockQueuecallReferenceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockQueuecallReferenceHandlerMockRecorder
}

// MockQueuecallReferenceHandlerMockRecorder is the mock recorder for MockQueuecallReferenceHandler.
type MockQueuecallReferenceHandlerMockRecorder struct {
	mock *MockQueuecallReferenceHandler
}

// NewMockQueuecallReferenceHandler creates a new mock instance.
func NewMockQueuecallReferenceHandler(ctrl *gomock.Controller) *MockQueuecallReferenceHandler {
	mock := &MockQueuecallReferenceHandler{ctrl: ctrl}
	mock.recorder = &MockQueuecallReferenceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueuecallReferenceHandler) EXPECT() *MockQueuecallReferenceHandlerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockQueuecallReferenceHandler) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQueuecallReferenceHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQueuecallReferenceHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockQueuecallReferenceHandler) Get(ctx context.Context, id uuid.UUID) (*queuecallreference.QueuecallReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*queuecallreference.QueuecallReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueuecallReferenceHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQueuecallReferenceHandler)(nil).Get), ctx, id)
}

// SetCurrentQueuecallID mocks base method.
func (m *MockQueuecallReferenceHandler) SetCurrentQueuecallID(ctx context.Context, referenceID uuid.UUID, queuecallType queuecall.ReferenceType, queuecallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentQueuecallID", ctx, referenceID, queuecallType, queuecallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentQueuecallID indicates an expected call of SetCurrentQueuecallID.
func (mr *MockQueuecallReferenceHandlerMockRecorder) SetCurrentQueuecallID(ctx, referenceID, queuecallType, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentQueuecallID", reflect.TypeOf((*MockQueuecallReferenceHandler)(nil).SetCurrentQueuecallID), ctx, referenceID, queuecallType, queuecallID)
}
