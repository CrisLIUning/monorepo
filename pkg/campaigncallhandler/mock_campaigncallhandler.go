// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package campaigncallhandler is a generated GoMock package.
package campaigncallhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	address "gitlab.com/voipbin/bin-manager/call-manager.git/models/address"
	campaigncall "gitlab.com/voipbin/bin-manager/campaign-manager.git/models/campaigncall"
)

// MockCampaigncallHandler is a mock of CampaigncallHandler interface.
type MockCampaigncallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCampaigncallHandlerMockRecorder
}

// MockCampaigncallHandlerMockRecorder is the mock recorder for MockCampaigncallHandler.
type MockCampaigncallHandlerMockRecorder struct {
	mock *MockCampaigncallHandler
}

// NewMockCampaigncallHandler creates a new mock instance.
func NewMockCampaigncallHandler(ctrl *gomock.Controller) *MockCampaigncallHandler {
	mock := &MockCampaigncallHandler{ctrl: ctrl}
	mock.recorder = &MockCampaigncallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaigncallHandler) EXPECT() *MockCampaigncallHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCampaigncallHandler) Create(ctx context.Context, customerID, campaignID, outplanID, outdialID, outdialTargetID, queueID, activeflowID uuid.UUID, referenceType campaigncall.ReferenceType, referenceID uuid.UUID, source, destination *address.Address, destinationIndex, tryCount int) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, campaignID, outplanID, outdialID, outdialTargetID, queueID, activeflowID, referenceType, referenceID, source, destination, destinationIndex, tryCount)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCampaigncallHandlerMockRecorder) Create(ctx, customerID, campaignID, outplanID, outdialID, outdialTargetID, queueID, activeflowID, referenceType, referenceID, source, destination, destinationIndex, tryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCampaigncallHandler)(nil).Create), ctx, customerID, campaignID, outplanID, outdialID, outdialTargetID, queueID, activeflowID, referenceType, referenceID, source, destination, destinationIndex, tryCount)
}

// Get mocks base method.
func (m *MockCampaigncallHandler) Get(ctx context.Context, id uuid.UUID) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCampaigncallHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCampaigncallHandler)(nil).Get), ctx, id)
}

// GetsByCampaignID mocks base method.
func (m *MockCampaigncallHandler) GetsByCampaignID(ctx context.Context, campaignID uuid.UUID, token string, limit uint64) ([]*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCampaignID", ctx, campaignID, token, limit)
	ret0, _ := ret[0].([]*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCampaignID indicates an expected call of GetsByCampaignID.
func (mr *MockCampaigncallHandlerMockRecorder) GetsByCampaignID(ctx, campaignID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCampaignID", reflect.TypeOf((*MockCampaigncallHandler)(nil).GetsByCampaignID), ctx, campaignID, token, limit)
}

// GetsByCampaignIDAndStatus mocks base method.
func (m *MockCampaigncallHandler) GetsByCampaignIDAndStatus(ctx context.Context, campaignID uuid.UUID, status campaigncall.Status, token string, limit uint64) ([]*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCampaignIDAndStatus", ctx, campaignID, status, token, limit)
	ret0, _ := ret[0].([]*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCampaignIDAndStatus indicates an expected call of GetsByCampaignIDAndStatus.
func (mr *MockCampaigncallHandlerMockRecorder) GetsByCampaignIDAndStatus(ctx, campaignID, status, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCampaignIDAndStatus", reflect.TypeOf((*MockCampaigncallHandler)(nil).GetsByCampaignIDAndStatus), ctx, campaignID, status, token, limit)
}

// UpdateStatus mocks base method.
func (m *MockCampaigncallHandler) UpdateStatus(ctx context.Context, id uuid.UUID, status campaigncall.Status) (*campaigncall.Campaigncall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*campaigncall.Campaigncall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockCampaigncallHandlerMockRecorder) UpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCampaigncallHandler)(nil).UpdateStatus), ctx, id, status)
}
