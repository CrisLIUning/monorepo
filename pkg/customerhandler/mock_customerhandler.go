// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package customerhandler is a generated GoMock package.
package customerhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	customer "gitlab.com/voipbin/bin-manager/customer-manager.git/models/customer"
)

// MockCustomerHandler is a mock of CustomerHandler interface.
type MockCustomerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerHandlerMockRecorder
}

// MockCustomerHandlerMockRecorder is the mock recorder for MockCustomerHandler.
type MockCustomerHandlerMockRecorder struct {
	mock *MockCustomerHandler
}

// NewMockCustomerHandler creates a new mock instance.
func NewMockCustomerHandler(ctrl *gomock.Controller) *MockCustomerHandler {
	mock := &MockCustomerHandler{ctrl: ctrl}
	mock.recorder = &MockCustomerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerHandler) EXPECT() *MockCustomerHandlerMockRecorder {
	return m.recorder
}

// CustomerCreate mocks base method.
func (m *MockCustomerHandler) CustomerCreate(ctx context.Context, username, password, name, detail, webhookMethod, webhookURI string, permissionIDs []uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerCreate", ctx, username, password, name, detail, webhookMethod, webhookURI, permissionIDs)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerCreate indicates an expected call of CustomerCreate.
func (mr *MockCustomerHandlerMockRecorder) CustomerCreate(ctx, username, password, name, detail, webhookMethod, webhookURI, permissionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerCreate", reflect.TypeOf((*MockCustomerHandler)(nil).CustomerCreate), ctx, username, password, name, detail, webhookMethod, webhookURI, permissionIDs)
}

// CustomerDelete mocks base method.
func (m *MockCustomerHandler) CustomerDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerDelete indicates an expected call of CustomerDelete.
func (mr *MockCustomerHandlerMockRecorder) CustomerDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerDelete", reflect.TypeOf((*MockCustomerHandler)(nil).CustomerDelete), ctx, id)
}

// CustomerGet mocks base method.
func (m *MockCustomerHandler) CustomerGet(ctx context.Context, id uuid.UUID) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerGet", ctx, id)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerGet indicates an expected call of CustomerGet.
func (mr *MockCustomerHandlerMockRecorder) CustomerGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerGet", reflect.TypeOf((*MockCustomerHandler)(nil).CustomerGet), ctx, id)
}

// CustomerGets mocks base method.
func (m *MockCustomerHandler) CustomerGets(ctx context.Context, size uint64, token string) ([]*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerGets", ctx, size, token)
	ret0, _ := ret[0].([]*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerGets indicates an expected call of CustomerGets.
func (mr *MockCustomerHandlerMockRecorder) CustomerGets(ctx, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerGets", reflect.TypeOf((*MockCustomerHandler)(nil).CustomerGets), ctx, size, token)
}

// CustomerLogin mocks base method.
func (m *MockCustomerHandler) CustomerLogin(ctx context.Context, username, password string) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerLogin", ctx, username, password)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerLogin indicates an expected call of CustomerLogin.
func (mr *MockCustomerHandlerMockRecorder) CustomerLogin(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerLogin", reflect.TypeOf((*MockCustomerHandler)(nil).CustomerLogin), ctx, username, password)
}

// CustomerUpdateBasicInfo mocks base method.
func (m *MockCustomerHandler) CustomerUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail, webhookMethod, webhookURI string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdateBasicInfo", ctx, id, name, detail, webhookMethod, webhookURI)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerUpdateBasicInfo indicates an expected call of CustomerUpdateBasicInfo.
func (mr *MockCustomerHandlerMockRecorder) CustomerUpdateBasicInfo(ctx, id, name, detail, webhookMethod, webhookURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdateBasicInfo", reflect.TypeOf((*MockCustomerHandler)(nil).CustomerUpdateBasicInfo), ctx, id, name, detail, webhookMethod, webhookURI)
}

// CustomerUpdatePassword mocks base method.
func (m *MockCustomerHandler) CustomerUpdatePassword(ctx context.Context, id uuid.UUID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdatePassword", ctx, id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerUpdatePassword indicates an expected call of CustomerUpdatePassword.
func (mr *MockCustomerHandlerMockRecorder) CustomerUpdatePassword(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdatePassword", reflect.TypeOf((*MockCustomerHandler)(nil).CustomerUpdatePassword), ctx, id, password)
}

// CustomerUpdatePermissionIDs mocks base method.
func (m *MockCustomerHandler) CustomerUpdatePermissionIDs(ctx context.Context, id uuid.UUID, permissionIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdatePermissionIDs", ctx, id, permissionIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerUpdatePermissionIDs indicates an expected call of CustomerUpdatePermissionIDs.
func (mr *MockCustomerHandlerMockRecorder) CustomerUpdatePermissionIDs(ctx, id, permissionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdatePermissionIDs", reflect.TypeOf((*MockCustomerHandler)(nil).CustomerUpdatePermissionIDs), ctx, id, permissionIDs)
}
