// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package queuecallhandler is a generated GoMock package.
package queuecallhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	address "gitlab.com/voipbin/bin-manager/call-manager.git/models/address"
	queue "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queue"
	queuecall "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecall"
)

// MockQueuecallHandler is a mock of QueuecallHandler interface.
type MockQueuecallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockQueuecallHandlerMockRecorder
}

// MockQueuecallHandlerMockRecorder is the mock recorder for MockQueuecallHandler.
type MockQueuecallHandlerMockRecorder struct {
	mock *MockQueuecallHandler
}

// NewMockQueuecallHandler creates a new mock instance.
func NewMockQueuecallHandler(ctrl *gomock.Controller) *MockQueuecallHandler {
	mock := &MockQueuecallHandler{ctrl: ctrl}
	mock.recorder = &MockQueuecallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueuecallHandler) EXPECT() *MockQueuecallHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQueuecallHandler) Create(ctx context.Context, userID uint64, queueID uuid.UUID, referenceType queuecall.ReferenceType, referenceID, exitActionID, forwardActionID, confbridgeID uuid.UUID, webhookURI, webhookMethod string, source address.Address, routingMethod queue.RoutingMethod, tagIDs []uuid.UUID, timeoutWait, timeoutService int) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, queueID, referenceType, referenceID, exitActionID, forwardActionID, confbridgeID, webhookURI, webhookMethod, source, routingMethod, tagIDs, timeoutWait, timeoutService)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockQueuecallHandlerMockRecorder) Create(ctx, userID, queueID, referenceType, referenceID, exitActionID, forwardActionID, confbridgeID, webhookURI, webhookMethod, source, routingMethod, tagIDs, timeoutWait, timeoutService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQueuecallHandler)(nil).Create), ctx, userID, queueID, referenceType, referenceID, exitActionID, forwardActionID, confbridgeID, webhookURI, webhookMethod, source, routingMethod, tagIDs, timeoutWait, timeoutService)
}

// Execute mocks base method.
func (m *MockQueuecallHandler) Execute(ctx context.Context, queuecallID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", ctx, queuecallID)
}

// Execute indicates an expected call of Execute.
func (mr *MockQueuecallHandlerMockRecorder) Execute(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockQueuecallHandler)(nil).Execute), ctx, queuecallID)
}

// Hangup mocks base method.
func (m *MockQueuecallHandler) Hangup(ctx context.Context, referenceID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Hangup", ctx, referenceID)
}

// Hangup indicates an expected call of Hangup.
func (mr *MockQueuecallHandlerMockRecorder) Hangup(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hangup", reflect.TypeOf((*MockQueuecallHandler)(nil).Hangup), ctx, referenceID)
}

// Kick mocks base method.
func (m *MockQueuecallHandler) Kick(ctx context.Context, queuecallID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kick", ctx, queuecallID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Kick indicates an expected call of Kick.
func (mr *MockQueuecallHandlerMockRecorder) Kick(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kick", reflect.TypeOf((*MockQueuecallHandler)(nil).Kick), ctx, queuecallID)
}

// KickByReferenceID mocks base method.
func (m *MockQueuecallHandler) KickByReferenceID(ctx context.Context, referenceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KickByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// KickByReferenceID indicates an expected call of KickByReferenceID.
func (mr *MockQueuecallHandlerMockRecorder) KickByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickByReferenceID", reflect.TypeOf((*MockQueuecallHandler)(nil).KickByReferenceID), ctx, referenceID)
}

// Leaved mocks base method.
func (m *MockQueuecallHandler) Leaved(ctx context.Context, referenceID, confbridgeID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Leaved", ctx, referenceID, confbridgeID)
}

// Leaved indicates an expected call of Leaved.
func (mr *MockQueuecallHandlerMockRecorder) Leaved(ctx, referenceID, confbridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leaved", reflect.TypeOf((*MockQueuecallHandler)(nil).Leaved), ctx, referenceID, confbridgeID)
}

// TimeoutService mocks base method.
func (m *MockQueuecallHandler) TimeoutService(ctx context.Context, queuecallID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TimeoutService", ctx, queuecallID)
}

// TimeoutService indicates an expected call of TimeoutService.
func (mr *MockQueuecallHandlerMockRecorder) TimeoutService(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutService", reflect.TypeOf((*MockQueuecallHandler)(nil).TimeoutService), ctx, queuecallID)
}

// TimeoutWait mocks base method.
func (m *MockQueuecallHandler) TimeoutWait(ctx context.Context, queuecallID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TimeoutWait", ctx, queuecallID)
}

// TimeoutWait indicates an expected call of TimeoutWait.
func (mr *MockQueuecallHandlerMockRecorder) TimeoutWait(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutWait", reflect.TypeOf((*MockQueuecallHandler)(nil).TimeoutWait), ctx, queuecallID)
}
