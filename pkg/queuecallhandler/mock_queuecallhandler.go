// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package queuecallhandler is a generated GoMock package.
package queuecallhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	agent "gitlab.com/voipbin/bin-manager/agent-manager.git/models/agent"
	address "gitlab.com/voipbin/bin-manager/common-handler.git/models/address"
	queue "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queue"
	queuecall "gitlab.com/voipbin/bin-manager/queue-manager.git/models/queuecall"
)

// MockQueuecallHandler is a mock of QueuecallHandler interface.
type MockQueuecallHandler struct {
	ctrl     *gomock.Controller
	recorder *MockQueuecallHandlerMockRecorder
}

// MockQueuecallHandlerMockRecorder is the mock recorder for MockQueuecallHandler.
type MockQueuecallHandlerMockRecorder struct {
	mock *MockQueuecallHandler
}

// NewMockQueuecallHandler creates a new mock instance.
func NewMockQueuecallHandler(ctrl *gomock.Controller) *MockQueuecallHandler {
	mock := &MockQueuecallHandler{ctrl: ctrl}
	mock.recorder = &MockQueuecallHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueuecallHandler) EXPECT() *MockQueuecallHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQueuecallHandler) Create(ctx context.Context, q *queue.Queue, referenceType queuecall.ReferenceType, referenceID, referenceActiveflowID, flowID, forwardActionID, exitActionID, conferenceID uuid.UUID, source address.Address) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, q, referenceType, referenceID, referenceActiveflowID, flowID, forwardActionID, exitActionID, conferenceID, source)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockQueuecallHandlerMockRecorder) Create(ctx, q, referenceType, referenceID, referenceActiveflowID, flowID, forwardActionID, exitActionID, conferenceID, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQueuecallHandler)(nil).Create), ctx, q, referenceType, referenceID, referenceActiveflowID, flowID, forwardActionID, exitActionID, conferenceID, source)
}

// Execute mocks base method.
func (m *MockQueuecallHandler) Execute(ctx context.Context, qc *queuecall.Queuecall, agent *agent.Agent) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, qc, agent)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockQueuecallHandlerMockRecorder) Execute(ctx, qc, agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockQueuecallHandler)(nil).Execute), ctx, qc, agent)
}

// Get mocks base method.
func (m *MockQueuecallHandler) Get(ctx context.Context, id uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueuecallHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQueuecallHandler)(nil).Get), ctx, id)
}

// GetByReferenceID mocks base method.
func (m *MockQueuecallHandler) GetByReferenceID(ctx context.Context, referenceID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferenceID indicates an expected call of GetByReferenceID.
func (mr *MockQueuecallHandlerMockRecorder) GetByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferenceID", reflect.TypeOf((*MockQueuecallHandler)(nil).GetByReferenceID), ctx, referenceID)
}

// GetsByCustomerID mocks base method.
func (m *MockQueuecallHandler) GetsByCustomerID(ctx context.Context, customerID uuid.UUID, size uint64, token string) ([]*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByCustomerID", ctx, customerID, size, token)
	ret0, _ := ret[0].([]*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByCustomerID indicates an expected call of GetsByCustomerID.
func (mr *MockQueuecallHandlerMockRecorder) GetsByCustomerID(ctx, customerID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByCustomerID", reflect.TypeOf((*MockQueuecallHandler)(nil).GetsByCustomerID), ctx, customerID, size, token)
}

// GetsByQueueIDAndStatus mocks base method.
func (m *MockQueuecallHandler) GetsByQueueIDAndStatus(ctx context.Context, queueID uuid.UUID, status queuecall.Status, size uint64, token string) ([]*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByQueueIDAndStatus", ctx, queueID, status, size, token)
	ret0, _ := ret[0].([]*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByQueueIDAndStatus indicates an expected call of GetsByQueueIDAndStatus.
func (mr *MockQueuecallHandlerMockRecorder) GetsByQueueIDAndStatus(ctx, queueID, status, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByQueueIDAndStatus", reflect.TypeOf((*MockQueuecallHandler)(nil).GetsByQueueIDAndStatus), ctx, queueID, status, size, token)
}

// Hungup mocks base method.
func (m *MockQueuecallHandler) Hungup(ctx context.Context, referenceID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Hungup", ctx, referenceID)
}

// Hungup indicates an expected call of Hungup.
func (mr *MockQueuecallHandlerMockRecorder) Hungup(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hungup", reflect.TypeOf((*MockQueuecallHandler)(nil).Hungup), ctx, referenceID)
}

// Joined mocks base method.
func (m *MockQueuecallHandler) Joined(ctx context.Context, referenceID, conferenceID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Joined", ctx, referenceID, conferenceID)
}

// Joined indicates an expected call of Joined.
func (mr *MockQueuecallHandlerMockRecorder) Joined(ctx, referenceID, conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joined", reflect.TypeOf((*MockQueuecallHandler)(nil).Joined), ctx, referenceID, conferenceID)
}

// Kick mocks base method.
func (m *MockQueuecallHandler) Kick(ctx context.Context, queuecallID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kick", ctx, queuecallID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Kick indicates an expected call of Kick.
func (mr *MockQueuecallHandlerMockRecorder) Kick(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kick", reflect.TypeOf((*MockQueuecallHandler)(nil).Kick), ctx, queuecallID)
}

// KickByReferenceID mocks base method.
func (m *MockQueuecallHandler) KickByReferenceID(ctx context.Context, referenceID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KickByReferenceID", ctx, referenceID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KickByReferenceID indicates an expected call of KickByReferenceID.
func (mr *MockQueuecallHandlerMockRecorder) KickByReferenceID(ctx, referenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickByReferenceID", reflect.TypeOf((*MockQueuecallHandler)(nil).KickByReferenceID), ctx, referenceID)
}

// Leaved mocks base method.
func (m *MockQueuecallHandler) Leaved(ctx context.Context, referenceID, conferenceID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Leaved", ctx, referenceID, conferenceID)
}

// Leaved indicates an expected call of Leaved.
func (mr *MockQueuecallHandlerMockRecorder) Leaved(ctx, referenceID, conferenceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leaved", reflect.TypeOf((*MockQueuecallHandler)(nil).Leaved), ctx, referenceID, conferenceID)
}

// TimeoutService mocks base method.
func (m *MockQueuecallHandler) TimeoutService(ctx context.Context, queuecallID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TimeoutService", ctx, queuecallID)
}

// TimeoutService indicates an expected call of TimeoutService.
func (mr *MockQueuecallHandlerMockRecorder) TimeoutService(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutService", reflect.TypeOf((*MockQueuecallHandler)(nil).TimeoutService), ctx, queuecallID)
}

// TimeoutWait mocks base method.
func (m *MockQueuecallHandler) TimeoutWait(ctx context.Context, queuecallID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TimeoutWait", ctx, queuecallID)
}

// TimeoutWait indicates an expected call of TimeoutWait.
func (mr *MockQueuecallHandlerMockRecorder) TimeoutWait(ctx, queuecallID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutWait", reflect.TypeOf((*MockQueuecallHandler)(nil).TimeoutWait), ctx, queuecallID)
}

// UpdateStatusConnecting mocks base method.
func (m *MockQueuecallHandler) UpdateStatusConnecting(ctx context.Context, id, agentID uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusConnecting", ctx, id, agentID)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusConnecting indicates an expected call of UpdateStatusConnecting.
func (mr *MockQueuecallHandlerMockRecorder) UpdateStatusConnecting(ctx, id, agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusConnecting", reflect.TypeOf((*MockQueuecallHandler)(nil).UpdateStatusConnecting), ctx, id, agentID)
}

// UpdateStatusWaiting mocks base method.
func (m *MockQueuecallHandler) UpdateStatusWaiting(ctx context.Context, id uuid.UUID) (*queuecall.Queuecall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusWaiting", ctx, id)
	ret0, _ := ret[0].(*queuecall.Queuecall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusWaiting indicates an expected call of UpdateStatusWaiting.
func (mr *MockQueuecallHandlerMockRecorder) UpdateStatusWaiting(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusWaiting", reflect.TypeOf((*MockQueuecallHandler)(nil).UpdateStatusWaiting), ctx, id)
}
