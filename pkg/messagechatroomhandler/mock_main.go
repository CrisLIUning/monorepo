// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package messagechatroomhandler is a generated GoMock package.
package messagechatroomhandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	media "gitlab.com/voipbin/bin-manager/chat-manager.git/models/media"
	messagechatroom "gitlab.com/voipbin/bin-manager/chat-manager.git/models/messagechatroom"
	address "gitlab.com/voipbin/bin-manager/common-handler.git/models/address"
)

// MockMessagechatroomHandler is a mock of MessagechatroomHandler interface.
type MockMessagechatroomHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessagechatroomHandlerMockRecorder
}

// MockMessagechatroomHandlerMockRecorder is the mock recorder for MockMessagechatroomHandler.
type MockMessagechatroomHandlerMockRecorder struct {
	mock *MockMessagechatroomHandler
}

// NewMockMessagechatroomHandler creates a new mock instance.
func NewMockMessagechatroomHandler(ctrl *gomock.Controller) *MockMessagechatroomHandler {
	mock := &MockMessagechatroomHandler{ctrl: ctrl}
	mock.recorder = &MockMessagechatroomHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagechatroomHandler) EXPECT() *MockMessagechatroomHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessagechatroomHandler) Create(ctx context.Context, customerID, chatroomID, messagechatID uuid.UUID, source *address.Address, messageType messagechatroom.Type, text string, medias []media.Media) (*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customerID, chatroomID, messagechatID, source, messageType, text, medias)
	ret0, _ := ret[0].(*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessagechatroomHandlerMockRecorder) Create(ctx, customerID, chatroomID, messagechatID, source, messageType, text, medias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessagechatroomHandler)(nil).Create), ctx, customerID, chatroomID, messagechatID, source, messageType, text, medias)
}

// Delete mocks base method.
func (m *MockMessagechatroomHandler) Delete(ctx context.Context, id uuid.UUID) (*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMessagechatroomHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessagechatroomHandler)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockMessagechatroomHandler) Get(ctx context.Context, id uuid.UUID) (*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMessagechatroomHandlerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessagechatroomHandler)(nil).Get), ctx, id)
}

// GetsByChatroomID mocks base method.
func (m *MockMessagechatroomHandler) GetsByChatroomID(ctx context.Context, chatroomID uuid.UUID, token string, limit uint64) ([]*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByChatroomID", ctx, chatroomID, token, limit)
	ret0, _ := ret[0].([]*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByChatroomID indicates an expected call of GetsByChatroomID.
func (mr *MockMessagechatroomHandlerMockRecorder) GetsByChatroomID(ctx, chatroomID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByChatroomID", reflect.TypeOf((*MockMessagechatroomHandler)(nil).GetsByChatroomID), ctx, chatroomID, token, limit)
}

// GetsByMessagechatID mocks base method.
func (m *MockMessagechatroomHandler) GetsByMessagechatID(ctx context.Context, messagechatID uuid.UUID, token string, limit uint64) ([]*messagechatroom.Messagechatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetsByMessagechatID", ctx, messagechatID, token, limit)
	ret0, _ := ret[0].([]*messagechatroom.Messagechatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetsByMessagechatID indicates an expected call of GetsByMessagechatID.
func (mr *MockMessagechatroomHandlerMockRecorder) GetsByMessagechatID(ctx, messagechatID, token, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetsByMessagechatID", reflect.TypeOf((*MockMessagechatroomHandler)(nil).GetsByMessagechatID), ctx, messagechatID, token, limit)
}
