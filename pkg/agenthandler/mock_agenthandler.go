// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package agenthandler is a generated GoMock package.
package agenthandler

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	agent "gitlab.com/voipbin/bin-manager/agent-manager.git/models/agent"
	address "gitlab.com/voipbin/bin-manager/call-manager.git/models/address"
	call "gitlab.com/voipbin/bin-manager/call-manager.git/models/call"
)

// MockAgentHandler is a mock of AgentHandler interface.
type MockAgentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAgentHandlerMockRecorder
}

// MockAgentHandlerMockRecorder is the mock recorder for MockAgentHandler.
type MockAgentHandlerMockRecorder struct {
	mock *MockAgentHandler
}

// NewMockAgentHandler creates a new mock instance.
func NewMockAgentHandler(ctrl *gomock.Controller) *MockAgentHandler {
	mock := &MockAgentHandler{ctrl: ctrl}
	mock.recorder = &MockAgentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentHandler) EXPECT() *MockAgentHandlerMockRecorder {
	return m.recorder
}

// AgentCallAnswered mocks base method.
func (m *MockAgentHandler) AgentCallAnswered(ctx context.Context, c *call.Call) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCallAnswered", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentCallAnswered indicates an expected call of AgentCallAnswered.
func (mr *MockAgentHandlerMockRecorder) AgentCallAnswered(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCallAnswered", reflect.TypeOf((*MockAgentHandler)(nil).AgentCallAnswered), ctx, c)
}

// AgentCreate mocks base method.
func (m *MockAgentHandler) AgentCreate(ctx context.Context, userID uint64, username, password, name, detail string, ringMethod agent.RingMethod, permission agent.Permission, tagIDs []uuid.UUID, addresses []address.Address) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCreate", ctx, userID, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentCreate indicates an expected call of AgentCreate.
func (mr *MockAgentHandlerMockRecorder) AgentCreate(ctx, userID, username, password, name, detail, ringMethod, permission, tagIDs, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCreate", reflect.TypeOf((*MockAgentHandler)(nil).AgentCreate), ctx, userID, username, password, name, detail, ringMethod, permission, tagIDs, addresses)
}

// AgentDelete mocks base method.
func (m *MockAgentHandler) AgentDelete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentDelete indicates an expected call of AgentDelete.
func (mr *MockAgentHandlerMockRecorder) AgentDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentDelete", reflect.TypeOf((*MockAgentHandler)(nil).AgentDelete), ctx, id)
}

// AgentDial mocks base method.
func (m *MockAgentHandler) AgentDial(ctx context.Context, id uuid.UUID, source *address.Address, confbridgeID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentDial", ctx, id, source, confbridgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentDial indicates an expected call of AgentDial.
func (mr *MockAgentHandlerMockRecorder) AgentDial(ctx, id, source, confbridgeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentDial", reflect.TypeOf((*MockAgentHandler)(nil).AgentDial), ctx, id, source, confbridgeID)
}

// AgentGet mocks base method.
func (m *MockAgentHandler) AgentGet(ctx context.Context, id uuid.UUID) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGet", ctx, id)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGet indicates an expected call of AgentGet.
func (mr *MockAgentHandlerMockRecorder) AgentGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGet", reflect.TypeOf((*MockAgentHandler)(nil).AgentGet), ctx, id)
}

// AgentGets mocks base method.
func (m *MockAgentHandler) AgentGets(ctx context.Context, userID, size uint64, token string) ([]*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGets", ctx, userID, size, token)
	ret0, _ := ret[0].([]*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGets indicates an expected call of AgentGets.
func (mr *MockAgentHandlerMockRecorder) AgentGets(ctx, userID, size, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGets", reflect.TypeOf((*MockAgentHandler)(nil).AgentGets), ctx, userID, size, token)
}

// AgentGetsByTagIDs mocks base method.
func (m *MockAgentHandler) AgentGetsByTagIDs(ctx context.Context, userID uint64, tags []uuid.UUID) ([]*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGetsByTagIDs", ctx, userID, tags)
	ret0, _ := ret[0].([]*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGetsByTagIDs indicates an expected call of AgentGetsByTagIDs.
func (mr *MockAgentHandlerMockRecorder) AgentGetsByTagIDs(ctx, userID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGetsByTagIDs", reflect.TypeOf((*MockAgentHandler)(nil).AgentGetsByTagIDs), ctx, userID, tags)
}

// AgentGetsByTagIDsAndStatus mocks base method.
func (m *MockAgentHandler) AgentGetsByTagIDsAndStatus(ctx context.Context, userID uint64, tags []uuid.UUID, status agent.Status) ([]*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentGetsByTagIDsAndStatus", ctx, userID, tags, status)
	ret0, _ := ret[0].([]*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentGetsByTagIDsAndStatus indicates an expected call of AgentGetsByTagIDsAndStatus.
func (mr *MockAgentHandlerMockRecorder) AgentGetsByTagIDsAndStatus(ctx, userID, tags, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentGetsByTagIDsAndStatus", reflect.TypeOf((*MockAgentHandler)(nil).AgentGetsByTagIDsAndStatus), ctx, userID, tags, status)
}

// AgentLogin mocks base method.
func (m *MockAgentHandler) AgentLogin(ctx context.Context, userID uint64, username, password string) (*agent.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentLogin", ctx, userID, username, password)
	ret0, _ := ret[0].(*agent.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentLogin indicates an expected call of AgentLogin.
func (mr *MockAgentHandlerMockRecorder) AgentLogin(ctx, userID, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLogin", reflect.TypeOf((*MockAgentHandler)(nil).AgentLogin), ctx, userID, username, password)
}

// AgentUpdateAddresses mocks base method.
func (m *MockAgentHandler) AgentUpdateAddresses(ctx context.Context, id uuid.UUID, addresses []address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdateAddresses", ctx, id, addresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentUpdateAddresses indicates an expected call of AgentUpdateAddresses.
func (mr *MockAgentHandlerMockRecorder) AgentUpdateAddresses(ctx, id, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdateAddresses", reflect.TypeOf((*MockAgentHandler)(nil).AgentUpdateAddresses), ctx, id, addresses)
}

// AgentUpdateBasicInfo mocks base method.
func (m *MockAgentHandler) AgentUpdateBasicInfo(ctx context.Context, id uuid.UUID, name, detail string, ringMethod agent.RingMethod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdateBasicInfo", ctx, id, name, detail, ringMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentUpdateBasicInfo indicates an expected call of AgentUpdateBasicInfo.
func (mr *MockAgentHandlerMockRecorder) AgentUpdateBasicInfo(ctx, id, name, detail, ringMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdateBasicInfo", reflect.TypeOf((*MockAgentHandler)(nil).AgentUpdateBasicInfo), ctx, id, name, detail, ringMethod)
}

// AgentUpdatePassword mocks base method.
func (m *MockAgentHandler) AgentUpdatePassword(ctx context.Context, id uuid.UUID, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdatePassword", ctx, id, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentUpdatePassword indicates an expected call of AgentUpdatePassword.
func (mr *MockAgentHandlerMockRecorder) AgentUpdatePassword(ctx, id, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdatePassword", reflect.TypeOf((*MockAgentHandler)(nil).AgentUpdatePassword), ctx, id, username, password)
}

// AgentUpdatePermission mocks base method.
func (m *MockAgentHandler) AgentUpdatePermission(ctx context.Context, id uuid.UUID, permission agent.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdatePermission", ctx, id, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentUpdatePermission indicates an expected call of AgentUpdatePermission.
func (mr *MockAgentHandlerMockRecorder) AgentUpdatePermission(ctx, id, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdatePermission", reflect.TypeOf((*MockAgentHandler)(nil).AgentUpdatePermission), ctx, id, permission)
}

// AgentUpdateTagIDs mocks base method.
func (m *MockAgentHandler) AgentUpdateTagIDs(ctx context.Context, id uuid.UUID, tags []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentUpdateTagIDs", ctx, id, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// AgentUpdateTagIDs indicates an expected call of AgentUpdateTagIDs.
func (mr *MockAgentHandlerMockRecorder) AgentUpdateTagIDs(ctx, id, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentUpdateTagIDs", reflect.TypeOf((*MockAgentHandler)(nil).AgentUpdateTagIDs), ctx, id, tags)
}
