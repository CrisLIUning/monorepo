package rabbitmq

// Code generated by http://github.com/gojuno/minimock (3.0.6). DO NOT EDIT.

//go:generate minimock -i gitlab.com/voipbin/bin-manager/call-manager/internal/rabbitmq.Queue -o ./queue_mock.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// QueueMock implements Queue
type QueueMock struct {
	t minimock.Tester

	funcNewQueue          func(url string, qName string, durable bool) (r1 RabbitQueue)
	inspectFuncNewQueue   func(url string, qName string, durable bool)
	afterNewQueueCounter  uint64
	beforeNewQueueCounter uint64
	NewQueueMock          mQueueMockNewQueue
}

// NewQueueMock returns a mock for Queue
func NewQueueMock(t minimock.Tester) *QueueMock {
	m := &QueueMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NewQueueMock = mQueueMockNewQueue{mock: m}
	m.NewQueueMock.callArgs = []*QueueMockNewQueueParams{}

	return m
}

type mQueueMockNewQueue struct {
	mock               *QueueMock
	defaultExpectation *QueueMockNewQueueExpectation
	expectations       []*QueueMockNewQueueExpectation

	callArgs []*QueueMockNewQueueParams
	mutex    sync.RWMutex
}

// QueueMockNewQueueExpectation specifies expectation struct of the Queue.NewQueue
type QueueMockNewQueueExpectation struct {
	mock    *QueueMock
	params  *QueueMockNewQueueParams
	results *QueueMockNewQueueResults
	Counter uint64
}

// QueueMockNewQueueParams contains parameters of the Queue.NewQueue
type QueueMockNewQueueParams struct {
	url     string
	qName   string
	durable bool
}

// QueueMockNewQueueResults contains results of the Queue.NewQueue
type QueueMockNewQueueResults struct {
	r1 RabbitQueue
}

// Expect sets up expected params for Queue.NewQueue
func (mmNewQueue *mQueueMockNewQueue) Expect(url string, qName string, durable bool) *mQueueMockNewQueue {
	if mmNewQueue.mock.funcNewQueue != nil {
		mmNewQueue.mock.t.Fatalf("QueueMock.NewQueue mock is already set by Set")
	}

	if mmNewQueue.defaultExpectation == nil {
		mmNewQueue.defaultExpectation = &QueueMockNewQueueExpectation{}
	}

	mmNewQueue.defaultExpectation.params = &QueueMockNewQueueParams{url, qName, durable}
	for _, e := range mmNewQueue.expectations {
		if minimock.Equal(e.params, mmNewQueue.defaultExpectation.params) {
			mmNewQueue.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNewQueue.defaultExpectation.params)
		}
	}

	return mmNewQueue
}

// Inspect accepts an inspector function that has same arguments as the Queue.NewQueue
func (mmNewQueue *mQueueMockNewQueue) Inspect(f func(url string, qName string, durable bool)) *mQueueMockNewQueue {
	if mmNewQueue.mock.inspectFuncNewQueue != nil {
		mmNewQueue.mock.t.Fatalf("Inspect function is already set for QueueMock.NewQueue")
	}

	mmNewQueue.mock.inspectFuncNewQueue = f

	return mmNewQueue
}

// Return sets up results that will be returned by Queue.NewQueue
func (mmNewQueue *mQueueMockNewQueue) Return(r1 RabbitQueue) *QueueMock {
	if mmNewQueue.mock.funcNewQueue != nil {
		mmNewQueue.mock.t.Fatalf("QueueMock.NewQueue mock is already set by Set")
	}

	if mmNewQueue.defaultExpectation == nil {
		mmNewQueue.defaultExpectation = &QueueMockNewQueueExpectation{mock: mmNewQueue.mock}
	}
	mmNewQueue.defaultExpectation.results = &QueueMockNewQueueResults{r1}
	return mmNewQueue.mock
}

//Set uses given function f to mock the Queue.NewQueue method
func (mmNewQueue *mQueueMockNewQueue) Set(f func(url string, qName string, durable bool) (r1 RabbitQueue)) *QueueMock {
	if mmNewQueue.defaultExpectation != nil {
		mmNewQueue.mock.t.Fatalf("Default expectation is already set for the Queue.NewQueue method")
	}

	if len(mmNewQueue.expectations) > 0 {
		mmNewQueue.mock.t.Fatalf("Some expectations are already set for the Queue.NewQueue method")
	}

	mmNewQueue.mock.funcNewQueue = f
	return mmNewQueue.mock
}

// When sets expectation for the Queue.NewQueue which will trigger the result defined by the following
// Then helper
func (mmNewQueue *mQueueMockNewQueue) When(url string, qName string, durable bool) *QueueMockNewQueueExpectation {
	if mmNewQueue.mock.funcNewQueue != nil {
		mmNewQueue.mock.t.Fatalf("QueueMock.NewQueue mock is already set by Set")
	}

	expectation := &QueueMockNewQueueExpectation{
		mock:   mmNewQueue.mock,
		params: &QueueMockNewQueueParams{url, qName, durable},
	}
	mmNewQueue.expectations = append(mmNewQueue.expectations, expectation)
	return expectation
}

// Then sets up Queue.NewQueue return parameters for the expectation previously defined by the When method
func (e *QueueMockNewQueueExpectation) Then(r1 RabbitQueue) *QueueMock {
	e.results = &QueueMockNewQueueResults{r1}
	return e.mock
}

// NewQueue implements Queue
func (mmNewQueue *QueueMock) NewQueue(url string, qName string, durable bool) (r1 RabbitQueue) {
	mm_atomic.AddUint64(&mmNewQueue.beforeNewQueueCounter, 1)
	defer mm_atomic.AddUint64(&mmNewQueue.afterNewQueueCounter, 1)

	if mmNewQueue.inspectFuncNewQueue != nil {
		mmNewQueue.inspectFuncNewQueue(url, qName, durable)
	}

	mm_params := &QueueMockNewQueueParams{url, qName, durable}

	// Record call args
	mmNewQueue.NewQueueMock.mutex.Lock()
	mmNewQueue.NewQueueMock.callArgs = append(mmNewQueue.NewQueueMock.callArgs, mm_params)
	mmNewQueue.NewQueueMock.mutex.Unlock()

	for _, e := range mmNewQueue.NewQueueMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1
		}
	}

	if mmNewQueue.NewQueueMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNewQueue.NewQueueMock.defaultExpectation.Counter, 1)
		mm_want := mmNewQueue.NewQueueMock.defaultExpectation.params
		mm_got := QueueMockNewQueueParams{url, qName, durable}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNewQueue.t.Errorf("QueueMock.NewQueue got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNewQueue.NewQueueMock.defaultExpectation.results
		if mm_results == nil {
			mmNewQueue.t.Fatal("No results are set for the QueueMock.NewQueue")
		}
		return (*mm_results).r1
	}
	if mmNewQueue.funcNewQueue != nil {
		return mmNewQueue.funcNewQueue(url, qName, durable)
	}
	mmNewQueue.t.Fatalf("Unexpected call to QueueMock.NewQueue. %v %v %v", url, qName, durable)
	return
}

// NewQueueAfterCounter returns a count of finished QueueMock.NewQueue invocations
func (mmNewQueue *QueueMock) NewQueueAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewQueue.afterNewQueueCounter)
}

// NewQueueBeforeCounter returns a count of QueueMock.NewQueue invocations
func (mmNewQueue *QueueMock) NewQueueBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewQueue.beforeNewQueueCounter)
}

// Calls returns a list of arguments used in each call to QueueMock.NewQueue.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNewQueue *mQueueMockNewQueue) Calls() []*QueueMockNewQueueParams {
	mmNewQueue.mutex.RLock()

	argCopy := make([]*QueueMockNewQueueParams, len(mmNewQueue.callArgs))
	copy(argCopy, mmNewQueue.callArgs)

	mmNewQueue.mutex.RUnlock()

	return argCopy
}

// MinimockNewQueueDone returns true if the count of the NewQueue invocations corresponds
// the number of defined expectations
func (m *QueueMock) MinimockNewQueueDone() bool {
	for _, e := range m.NewQueueMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NewQueueMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNewQueueCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewQueue != nil && mm_atomic.LoadUint64(&m.afterNewQueueCounter) < 1 {
		return false
	}
	return true
}

// MinimockNewQueueInspect logs each unmet expectation
func (m *QueueMock) MinimockNewQueueInspect() {
	for _, e := range m.NewQueueMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QueueMock.NewQueue with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NewQueueMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNewQueueCounter) < 1 {
		if m.NewQueueMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to QueueMock.NewQueue")
		} else {
			m.t.Errorf("Expected call to QueueMock.NewQueue with params: %#v", *m.NewQueueMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewQueue != nil && mm_atomic.LoadUint64(&m.afterNewQueueCounter) < 1 {
		m.t.Error("Expected call to QueueMock.NewQueue")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *QueueMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockNewQueueInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *QueueMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *QueueMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNewQueueDone()
}
